
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080070e8  080070e8  000170e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007560  08007560  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007560  08007560  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007560  08007560  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  0800773c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  0800773c  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac1d  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd4  00000000  00000000  0002ae5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  0002cc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007fe  00000000  00000000  0002d690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186a9  00000000  00000000  0002de8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dfef  00000000  00000000  00046537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086d97  00000000  00000000  00054526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b54  00000000  00000000  000db2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000dee14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080070cc 	.word	0x080070cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080070cc 	.word	0x080070cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <MX_GPIO_Init+0xa8>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a23      	ldr	r2, [pc, #140]	; (800108c <MX_GPIO_Init+0xa8>)
 8000ffe:	f043 0310 	orr.w	r3, r3, #16
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_GPIO_Init+0xa8>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0310 	and.w	r3, r3, #16
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <MX_GPIO_Init+0xa8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <MX_GPIO_Init+0xa8>)
 8001016:	f043 0320 	orr.w	r3, r3, #32
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_GPIO_Init+0xa8>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0320 	and.w	r3, r3, #32
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_GPIO_Init+0xa8>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a17      	ldr	r2, [pc, #92]	; (800108c <MX_GPIO_Init+0xa8>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_GPIO_Init+0xa8>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_GPIO_Init+0xa8>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a11      	ldr	r2, [pc, #68]	; (800108c <MX_GPIO_Init+0xa8>)
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_GPIO_Init+0xa8>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_GPIO_Init+0xac>)
 8001060:	f001 fa80 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001068:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2302      	movs	r3, #2
 8001074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	4619      	mov	r1, r3
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_GPIO_Init+0xac>)
 800107e:	f001 f8ed 	bl	800225c <HAL_GPIO_Init>

}
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	40011000 	.word	0x40011000

08001094 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x50>)
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <MX_I2C1_Init+0x54>)
 800109c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <MX_I2C1_Init+0x58>)
 80010a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_I2C1_Init+0x50>)
 80010d2:	f001 fa5f 	bl	8002594 <HAL_I2C_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010dc:	f000 f94b 	bl	8001376 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200001f0 	.word	0x200001f0
 80010e8:	40005400 	.word	0x40005400
 80010ec:	000186a0 	.word	0x000186a0

080010f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a15      	ldr	r2, [pc, #84]	; (8001160 <HAL_I2C_MspInit+0x70>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d123      	bne.n	8001158 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_I2C_MspInit+0x74>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a13      	ldr	r2, [pc, #76]	; (8001164 <HAL_I2C_MspInit+0x74>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_I2C_MspInit+0x74>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001128:	23c0      	movs	r3, #192	; 0xc0
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112c:	2312      	movs	r3, #18
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <HAL_I2C_MspInit+0x78>)
 800113c:	f001 f88e 	bl	800225c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_I2C_MspInit+0x74>)
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_I2C_MspInit+0x74>)
 8001146:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114a:	61d3      	str	r3, [r2, #28]
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_I2C_MspInit+0x74>)
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40005400 	.word	0x40005400
 8001164:	40021000 	.word	0x40021000
 8001168:	40010c00 	.word	0x40010c00

0800116c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b0a      	cmp	r3, #10
 8001178:	d102      	bne.n	8001180 <__io_putchar+0x14>
    __io_putchar('\r');
 800117a:	200d      	movs	r0, #13
 800117c:	f7ff fff6 	bl	800116c <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001180:	1d39      	adds	r1, r7, #4
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	2201      	movs	r2, #1
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <__io_putchar+0x2c>)
 800118a:	f002 febd 	bl	8003f08 <HAL_UART_Transmit>

  return 1;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000248 	.word	0x20000248
 800119c:	00000000 	.word	0x00000000

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011a4:	b09c      	sub	sp, #112	; 0x70
 80011a6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f000 feee 	bl	8001f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 f89e 	bl	80012ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b0:	f7ff ff18 	bl	8000fe4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011b4:	f7ff ff6e 	bl	8001094 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80011b8:	f000 fe4a 	bl	8001e50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  mpu6050_typedef mpu = mpu_init(&hi2c1, 0xD0);
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	22d0      	movs	r2, #208	; 0xd0
 80011c2:	4947      	ldr	r1, [pc, #284]	; (80012e0 <main+0x140>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fa31 	bl	800162c <mpu_init>

  if(mpu_who_am_i(&mpu) != HAL_OK)
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fa18 	bl	8001604 <mpu_who_am_i>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <main+0x42>
  {
	  while(1)
	  {
		  printf("Error while connecting to mpu 6050\n");
 80011da:	4842      	ldr	r0, [pc, #264]	; (80012e4 <main+0x144>)
 80011dc:	f003 fd88 	bl	8004cf0 <puts>
 80011e0:	e7fb      	b.n	80011da <main+0x3a>
	  }
  }

  set_gyro_scale(&mpu, range_250);
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f94b 	bl	8001484 <set_gyro_scale>
  set_accelerometer_scale(&mpu, range_2g);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f993 	bl	8001520 <set_accelerometer_scale>
  mpu_low_pass_filter(&mpu, Acc94Hz_Gyro98Hz);
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2102      	movs	r1, #2
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f9db 	bl	80015bc <mpu_low_pass_filter>
  HAL_Delay(1000);
 8001206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120a:	f000 ff1f 	bl	800204c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  mpu_gyro_calibration(&mpu);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fafd 	bl	8001812 <mpu_gyro_calibration>

  while (1)
  {
	  mpu_calc_x_angle(&mpu);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fbb3 	bl	8001988 <mpu_calc_x_angle>
	  mpu_calc_y_angle(&mpu);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fc52 	bl	8001ad0 <mpu_calc_y_angle>
	  printf("acc_x_angle: %f, x_angle: %f, acc_y_angle: %f, y_angle: %f, gx: %f\n", mpu_get_acc_x_angle(&mpu) * RAD2DEG, mpu.x_angle * RAD2DEG, mpu_get_acc_y_angle(&mpu) * RAD2DEG, mpu.y_angle * RAD2DEG, mpu.gx);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fb65 	bl	8001900 <mpu_get_acc_x_angle>
 8001236:	4603      	mov	r3, r0
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f8f5 	bl	8000428 <__aeabi_f2d>
 800123e:	a326      	add	r3, pc, #152	; (adr r3, 80012d8 <main+0x138>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f948 	bl	80004d8 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	e9c7 2300 	strd	r2, r3, [r7]
 8001250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f8e8 	bl	8000428 <__aeabi_f2d>
 8001258:	a31f      	add	r3, pc, #124	; (adr r3, 80012d8 <main+0x138>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff f93b 	bl	80004d8 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4614      	mov	r4, r2
 8001268:	461d      	mov	r5, r3
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fb67 	bl	8001942 <mpu_get_acc_y_angle>
 8001274:	4603      	mov	r3, r0
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f8d6 	bl	8000428 <__aeabi_f2d>
 800127c:	a316      	add	r3, pc, #88	; (adr r3, 80012d8 <main+0x138>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f929 	bl	80004d8 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4690      	mov	r8, r2
 800128c:	4699      	mov	r9, r3
 800128e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f8c9 	bl	8000428 <__aeabi_f2d>
 8001296:	a310      	add	r3, pc, #64	; (adr r3, 80012d8 <main+0x138>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f91c 	bl	80004d8 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4692      	mov	sl, r2
 80012a6:	469b      	mov	fp, r3
 80012a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8bc 	bl	8000428 <__aeabi_f2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80012b8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80012bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80012c0:	e9cd 4500 	strd	r4, r5, [sp]
 80012c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <main+0x148>)
 80012ca:	f003 fcab 	bl	8004c24 <iprintf>
	  //printf("ax: %f, ay: %f, az: %f, gx: %f, gy: %f, gz: %f\n", mpu.ax, mpu.ay, mpu.az, mpu.gx, mpu.gy, mpu.gz);

	  HAL_Delay(5);
 80012ce:	2005      	movs	r0, #5
 80012d0:	f000 febc 	bl	800204c <HAL_Delay>
	  mpu_calc_x_angle(&mpu);
 80012d4:	e7a0      	b.n	8001218 <main+0x78>
 80012d6:	bf00      	nop
 80012d8:	c63f1412 	.word	0xc63f1412
 80012dc:	404ca5dc 	.word	0x404ca5dc
 80012e0:	200001f0 	.word	0x200001f0
 80012e4:	080070e8 	.word	0x080070e8
 80012e8:	0800710c 	.word	0x0800710c

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b090      	sub	sp, #64	; 0x40
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2228      	movs	r2, #40	; 0x28
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 fdd8 	bl	8004eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131c:	2301      	movs	r3, #1
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001320:	2302      	movs	r3, #2
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800132a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001330:	f107 0318 	add.w	r3, r7, #24
 8001334:	4618      	mov	r0, r3
 8001336:	f002 f987 	bl	8003648 <HAL_RCC_OscConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001340:	f000 f819 	bl	8001376 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001344:	230f      	movs	r3, #15
 8001346:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001348:	2302      	movs	r3, #2
 800134a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2102      	movs	r1, #2
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fbf4 	bl	8003b4c <HAL_RCC_ClockConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800136a:	f000 f804 	bl	8001376 <Error_Handler>
  }
}
 800136e:	bf00      	nop
 8001370:	3740      	adds	r7, #64	; 0x40
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137a:	b672      	cpsid	i
}
 800137c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137e:	e7fe      	b.n	800137e <Error_Handler+0x8>

08001380 <mpu_write_reg>:




static void mpu_write_reg(mpu6050_typedef *mpu, uint8_t reg, uint8_t val)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af04      	add	r7, sp, #16
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
 800138c:	4613      	mov	r3, r2
 800138e:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->i2c_address, reg, 1, &val, 1, HAL_MAX_DELAY);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	b299      	uxth	r1, r3
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	b29a      	uxth	r2, r3
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	2301      	movs	r3, #1
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	1cbb      	adds	r3, r7, #2
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	f001 fa35 	bl	800281c <HAL_I2C_Mem_Write>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <mpu_read_reg>:


static uint8_t mpu_read_reg(mpu6050_typedef *mpu, uint8_t reg)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b088      	sub	sp, #32
 80013be:	af04      	add	r7, sp, #16
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, reg, 1, &tmp, 1, HAL_MAX_DELAY);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	b299      	uxth	r1, r3
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	9302      	str	r3, [sp, #8]
 80013da:	2301      	movs	r3, #1
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	f107 030f 	add.w	r3, r7, #15
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	f001 fb13 	bl	8002a10 <HAL_I2C_Mem_Read>
	return tmp;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <mpu_reset>:


static void mpu_reset(mpu6050_typedef *mpu, uint8_t value)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001400:	216b      	movs	r1, #107	; 0x6b
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffd9 	bl	80013ba <mpu_read_reg>
 8001408:	4603      	mov	r3, r0
 800140a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<7);
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001412:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 7);
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	01db      	lsls	r3, r3, #7
 8001418:	b25a      	sxtb	r2, r3
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	4313      	orrs	r3, r2
 8001420:	b25b      	sxtb	r3, r3
 8001422:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	461a      	mov	r2, r3
 8001428:	216b      	movs	r1, #107	; 0x6b
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa8 	bl	8001380 <mpu_write_reg>
}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <mpu_sleep_mode>:


static void mpu_sleep_mode(mpu6050_typedef *mpu, uint8_t value)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001444:	216b      	movs	r1, #107	; 0x6b
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffb7 	bl	80013ba <mpu_read_reg>
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<6);
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001456:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 6);
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	019b      	lsls	r3, r3, #6
 800145c:	b25b      	sxtb	r3, r3
 800145e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001462:	b25a      	sxtb	r2, r3
 8001464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	461a      	mov	r2, r3
 8001472:	216b      	movs	r1, #107	; 0x6b
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff83 	bl	8001380 <mpu_write_reg>
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <set_gyro_scale>:


void set_gyro_scale(mpu6050_typedef *mpu, gyro_range_typedef range)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, GYRO_CONFIG);
 8001490:	211b      	movs	r1, #27
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff91 	bl	80013ba <mpu_read_reg>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	f023 0318 	bic.w	r3, r3, #24
 80014a2:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	f003 0318 	and.w	r3, r3, #24
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, GYRO_CONFIG, tmp);
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	461a      	mov	r2, r3
 80014be:	211b      	movs	r1, #27
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff5d 	bl	8001380 <mpu_write_reg>

	switch (range){
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d81b      	bhi.n	8001504 <set_gyro_scale+0x80>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <set_gyro_scale+0x50>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	080014e5 	.word	0x080014e5
 80014d8:	080014ed 	.word	0x080014ed
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	080014fd 	.word	0x080014fd
	case range_250:
		mpu->gyro_scale = 0.007633;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <set_gyro_scale+0x8c>)
 80014e8:	609a      	str	r2, [r3, #8]
		break;
 80014ea:	e00c      	b.n	8001506 <set_gyro_scale+0x82>
	case range_500:
		mpu->gyro_scale = 0.015267;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <set_gyro_scale+0x90>)
 80014f0:	609a      	str	r2, [r3, #8]
		break;
 80014f2:	e008      	b.n	8001506 <set_gyro_scale+0x82>
	case range_1000:
		mpu->gyro_scale = 0.030487;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <set_gyro_scale+0x94>)
 80014f8:	609a      	str	r2, [r3, #8]
		break;
 80014fa:	e004      	b.n	8001506 <set_gyro_scale+0x82>
	case range_2000:
		mpu->gyro_scale = 0.060975;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a07      	ldr	r2, [pc, #28]	; (800151c <set_gyro_scale+0x98>)
 8001500:	609a      	str	r2, [r3, #8]
		break;
 8001502:	e000      	b.n	8001506 <set_gyro_scale+0x82>
	default:
		break;
 8001504:	bf00      	nop
	}
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	3bfa1e3f 	.word	0x3bfa1e3f
 8001514:	3c7a2270 	.word	0x3c7a2270
 8001518:	3cf9bfdf 	.word	0x3cf9bfdf
 800151c:	3d79c0ec 	.word	0x3d79c0ec

08001520 <set_accelerometer_scale>:


void set_accelerometer_scale(mpu6050_typedef *mpu, accelerometer_range_typedef range)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, ACCEL_CONFIG);
 800152c:	211c      	movs	r1, #28
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ff43 	bl	80013ba <mpu_read_reg>
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	f023 0318 	bic.w	r3, r3, #24
 800153e:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	b25b      	sxtb	r3, r3
 8001546:	f003 0318 	and.w	r3, r3, #24
 800154a:	b25a      	sxtb	r2, r3
 800154c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001550:	4313      	orrs	r3, r2
 8001552:	b25b      	sxtb	r3, r3
 8001554:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, ACCEL_CONFIG, tmp);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	461a      	mov	r2, r3
 800155a:	211c      	movs	r1, #28
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff0f 	bl	8001380 <mpu_write_reg>

	switch (range)
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d81b      	bhi.n	80015a0 <set_accelerometer_scale+0x80>
 8001568:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <set_accelerometer_scale+0x50>)
 800156a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156e:	bf00      	nop
 8001570:	08001581 	.word	0x08001581
 8001574:	08001589 	.word	0x08001589
 8001578:	08001591 	.word	0x08001591
 800157c:	08001599 	.word	0x08001599
	{
	case range_2g:
		mpu->acc_scale = 0.000061;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <set_accelerometer_scale+0x8c>)
 8001584:	60da      	str	r2, [r3, #12]
		break;
 8001586:	e00c      	b.n	80015a2 <set_accelerometer_scale+0x82>
	case range_4g:
		mpu->acc_scale = 0.000122;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <set_accelerometer_scale+0x90>)
 800158c:	60da      	str	r2, [r3, #12]
		break;
 800158e:	e008      	b.n	80015a2 <set_accelerometer_scale+0x82>
	case range_8g:
		mpu->acc_scale = 0.000244;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <set_accelerometer_scale+0x94>)
 8001594:	60da      	str	r2, [r3, #12]
		break;
 8001596:	e004      	b.n	80015a2 <set_accelerometer_scale+0x82>
	case range_16g:
		mpu->acc_scale = 0.0004882;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <set_accelerometer_scale+0x98>)
 800159c:	60da      	str	r2, [r3, #12]
		break;
 800159e:	e000      	b.n	80015a2 <set_accelerometer_scale+0x82>
	default:
		break;
 80015a0:	bf00      	nop
	}
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	387fda40 	.word	0x387fda40
 80015b0:	38ffda40 	.word	0x38ffda40
 80015b4:	397fda40 	.word	0x397fda40
 80015b8:	39fff518 	.word	0x39fff518

080015bc <mpu_low_pass_filter>:


void mpu_low_pass_filter(mpu6050_typedef *mpu, low_pass_filter_typedef filter)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, CONFIG);
 80015c8:	211a      	movs	r1, #26
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fef5 	bl	80013ba <mpu_read_reg>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~ 7;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	f023 0307 	bic.w	r3, r3, #7
 80015da:	73fb      	strb	r3, [r7, #15]
	tmp |= filter & 0x7;
 80015dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	b25a      	sxtb	r2, r3
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, CONFIG, tmp);
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	461a      	mov	r2, r3
 80015f4:	211a      	movs	r1, #26
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fec2 	bl	8001380 <mpu_write_reg>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <mpu_who_am_i>:


HAL_StatusTypeDef mpu_who_am_i(mpu6050_typedef *mpu)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	uint8_t value = mpu_read_reg(mpu, WHO_AM_I);
 800160c:	2175      	movs	r1, #117	; 0x75
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fed3 	bl	80013ba <mpu_read_reg>
 8001614:	4603      	mov	r3, r0
 8001616:	73fb      	strb	r3, [r7, #15]
	if (value == 0x68){
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	2b68      	cmp	r3, #104	; 0x68
 800161c:	d101      	bne.n	8001622 <mpu_who_am_i+0x1e>
		return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <mpu_who_am_i+0x20>
	}
	else{
		return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
	}
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <mpu_init>:

mpu6050_typedef mpu_init(I2C_HandleTypeDef *hi2c, uint8_t i2c_address)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b096      	sub	sp, #88	; 0x58
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4613      	mov	r3, r2
 8001638:	71fb      	strb	r3, [r7, #7]
	mpu6050_typedef mpu;
	mpu.hi2c = hi2c;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	617b      	str	r3, [r7, #20]
	mpu.i2c_address = i2c_address;
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	763b      	strb	r3, [r7, #24]


	mpu_reset(&mpu, 1);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	2101      	movs	r1, #1
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fed3 	bl	80013f4 <mpu_reset>

	HAL_Delay(1000);
 800164e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001652:	f000 fcfb 	bl	800204c <HAL_Delay>

	mpu_sleep_mode(&mpu, 0);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff feeb 	bl	8001438 <mpu_sleep_mode>

	set_gyro_scale(&mpu, range_250);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff0b 	bl	8001484 <set_gyro_scale>
	set_accelerometer_scale(&mpu, range_2g);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff53 	bl	8001520 <set_accelerometer_scale>

	mpu.gx_bias = 0;
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
	mpu.gy_bias = 0;
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
	mpu.gz_bias = 0;
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
	mpu.lst_time_x_angle = HAL_GetTick();
 800168c:	f000 fcd4 	bl	8002038 <HAL_GetTick>
 8001690:	4603      	mov	r3, r0
 8001692:	653b      	str	r3, [r7, #80]	; 0x50
	mpu.lst_time_y_angle = HAL_GetTick();
 8001694:	f000 fcd0 	bl	8002038 <HAL_GetTick>
 8001698:	4603      	mov	r3, r0
 800169a:	657b      	str	r3, [r7, #84]	; 0x54

	return mpu;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4618      	mov	r0, r3
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2244      	movs	r2, #68	; 0x44
 80016a6:	4619      	mov	r1, r3
 80016a8:	f003 fc8e 	bl	8004fc8 <memcpy>
}
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	3758      	adds	r7, #88	; 0x58
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <mpu_get_data>:



void mpu_get_data(mpu6050_typedef *mpu)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af04      	add	r7, sp, #16
 80016ba:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, data, 14, HAL_MAX_DELAY);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	791b      	ldrb	r3, [r3, #4]
 80016c4:	b299      	uxth	r1, r3
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	230e      	movs	r3, #14
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	223b      	movs	r2, #59	; 0x3b
 80016da:	f001 f999 	bl	8002a10 <HAL_I2C_Mem_Read>

	mpu->ax = (int16_t)((int16_t)data[0] << 8 | data[1]) * mpu->acc_scale;
 80016de:	7a3b      	ldrb	r3, [r7, #8]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	7a7b      	ldrb	r3, [r7, #9]
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fad5 	bl	8000c9c <__aeabi_i2f>
 80016f2:	4602      	mov	r2, r0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f7ff fb22 	bl	8000d44 <__aeabi_fmul>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	61da      	str	r2, [r3, #28]
	mpu->ay = (int16_t)((int16_t)data[2] << 8 | data[3]) * mpu->acc_scale;
 8001708:	7abb      	ldrb	r3, [r7, #10]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	7afb      	ldrb	r3, [r7, #11]
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b21b      	sxth	r3, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fac0 	bl	8000c9c <__aeabi_i2f>
 800171c:	4602      	mov	r2, r0
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f7ff fb0d 	bl	8000d44 <__aeabi_fmul>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	621a      	str	r2, [r3, #32]
	mpu->az = (int16_t)((int16_t)data[4] << 8 | data[5]) * mpu->acc_scale;
 8001732:	7b3b      	ldrb	r3, [r7, #12]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b21a      	sxth	r2, r3
 8001738:	7b7b      	ldrb	r3, [r7, #13]
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21b      	sxth	r3, r3
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff faab 	bl	8000c9c <__aeabi_i2f>
 8001746:	4602      	mov	r2, r0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4619      	mov	r1, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f7ff faf8 	bl	8000d44 <__aeabi_fmul>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	625a      	str	r2, [r3, #36]	; 0x24

	mpu->gx = ((int16_t)((int16_t)data[8] << 8 | data[9]) * mpu->gyro_scale) - mpu->gx_bias;
 800175c:	7c3b      	ldrb	r3, [r7, #16]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	7c7b      	ldrb	r3, [r7, #17]
 8001764:	b21b      	sxth	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b21b      	sxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fa96 	bl	8000c9c <__aeabi_i2f>
 8001770:	4602      	mov	r2, r0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	4619      	mov	r1, r3
 8001778:	4610      	mov	r0, r2
 800177a:	f7ff fae3 	bl	8000d44 <__aeabi_fmul>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	4619      	mov	r1, r3
 8001788:	4610      	mov	r0, r2
 800178a:	f7ff f9d1 	bl	8000b30 <__aeabi_fsub>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
	mpu->gy = ((int16_t)((int16_t)data[10] << 8 | data[11]) * mpu->gyro_scale) - mpu->gy_bias;
 8001796:	7cbb      	ldrb	r3, [r7, #18]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b21a      	sxth	r2, r3
 800179c:	7cfb      	ldrb	r3, [r7, #19]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fa79 	bl	8000c9c <__aeabi_i2f>
 80017aa:	4602      	mov	r2, r0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4619      	mov	r1, r3
 80017b2:	4610      	mov	r0, r2
 80017b4:	f7ff fac6 	bl	8000d44 <__aeabi_fmul>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f7ff f9b4 	bl	8000b30 <__aeabi_fsub>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu->gz = ((int16_t)((int16_t)data[12] << 8 | data[13]) * mpu->gyro_scale) - mpu->gz_bias;
 80017d0:	7d3b      	ldrb	r3, [r7, #20]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	7d7b      	ldrb	r3, [r7, #21]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fa5c 	bl	8000c9c <__aeabi_i2f>
 80017e4:	4602      	mov	r2, r0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4610      	mov	r0, r2
 80017ee:	f7ff faa9 	bl	8000d44 <__aeabi_fmul>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f7ff f997 	bl	8000b30 <__aeabi_fsub>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	631a      	str	r2, [r3, #48]	; 0x30
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <mpu_gyro_calibration>:


void mpu_gyro_calibration(mpu6050_typedef *mpu)
{
 8001812:	b590      	push	{r4, r7, lr}
 8001814:	b089      	sub	sp, #36	; 0x24
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	uint8_t counter = 100;
 800181a:	2364      	movs	r3, #100	; 0x64
 800181c:	73fb      	strb	r3, [r7, #15]
	float gx_sum = 0;
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
	float gy_sum = 0;
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
	float gz_sum = 0;
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

	for(int i = 0; i < counter; i++)
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	e020      	b.n	8001878 <mpu_gyro_calibration+0x66>
	{
		mpu_get_data(mpu);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ff3c 	bl	80016b4 <mpu_get_data>
		gx_sum += mpu->gx;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	4619      	mov	r1, r3
 8001842:	69f8      	ldr	r0, [r7, #28]
 8001844:	f7ff f976 	bl	8000b34 <__addsf3>
 8001848:	4603      	mov	r3, r0
 800184a:	61fb      	str	r3, [r7, #28]
		gy_sum += mpu->gy;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	4619      	mov	r1, r3
 8001852:	69b8      	ldr	r0, [r7, #24]
 8001854:	f7ff f96e 	bl	8000b34 <__addsf3>
 8001858:	4603      	mov	r3, r0
 800185a:	61bb      	str	r3, [r7, #24]
		gz_sum += mpu->gz;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	4619      	mov	r1, r3
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff f966 	bl	8000b34 <__addsf3>
 8001868:	4603      	mov	r3, r0
 800186a:	617b      	str	r3, [r7, #20]
		HAL_Delay(10);
 800186c:	200a      	movs	r0, #10
 800186e:	f000 fbed 	bl	800204c <HAL_Delay>
	for(int i = 0; i < counter; i++)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	3301      	adds	r3, #1
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	dbda      	blt.n	8001836 <mpu_gyro_calibration+0x24>
	}
	// += instead of = is used in case of second calibration (bias is added mpu_get_data)
	mpu->gx_bias += gx_sum / counter;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691c      	ldr	r4, [r3, #16]
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fa08 	bl	8000c9c <__aeabi_i2f>
 800188c:	4603      	mov	r3, r0
 800188e:	4619      	mov	r1, r3
 8001890:	69f8      	ldr	r0, [r7, #28]
 8001892:	f7ff fb0b 	bl	8000eac <__aeabi_fdiv>
 8001896:	4603      	mov	r3, r0
 8001898:	4619      	mov	r1, r3
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff f94a 	bl	8000b34 <__addsf3>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]
	mpu->gy_bias += gy_sum / counter;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695c      	ldr	r4, [r3, #20]
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f9f4 	bl	8000c9c <__aeabi_i2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4619      	mov	r1, r3
 80018b8:	69b8      	ldr	r0, [r7, #24]
 80018ba:	f7ff faf7 	bl	8000eac <__aeabi_fdiv>
 80018be:	4603      	mov	r3, r0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff f936 	bl	8000b34 <__addsf3>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	615a      	str	r2, [r3, #20]
	mpu->gz_bias += gz_sum / counter;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699c      	ldr	r4, [r3, #24]
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f9e0 	bl	8000c9c <__aeabi_i2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	4619      	mov	r1, r3
 80018e0:	6978      	ldr	r0, [r7, #20]
 80018e2:	f7ff fae3 	bl	8000eac <__aeabi_fdiv>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4619      	mov	r1, r3
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff f922 	bl	8000b34 <__addsf3>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	619a      	str	r2, [r3, #24]
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 80018f8:	bf00      	nop
 80018fa:	3724      	adds	r7, #36	; 0x24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd90      	pop	{r4, r7, pc}

08001900 <mpu_get_acc_x_angle>:


float mpu_get_acc_x_angle(mpu6050_typedef *mpu)
{
 8001900:	b5b0      	push	{r4, r5, r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	return atan2(mpu->ax, mpu->az);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fd8b 	bl	8000428 <__aeabi_f2d>
 8001912:	4604      	mov	r4, r0
 8001914:	460d      	mov	r5, r1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fd84 	bl	8000428 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4620      	mov	r0, r4
 8001926:	4629      	mov	r1, r5
 8001928:	f005 f96e 	bl	8006c08 <atan2>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f8a8 	bl	8000a88 <__aeabi_d2f>
 8001938:	4603      	mov	r3, r0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bdb0      	pop	{r4, r5, r7, pc}

08001942 <mpu_get_acc_y_angle>:


float mpu_get_acc_y_angle(mpu6050_typedef *mpu)
{
 8001942:	b5b0      	push	{r4, r5, r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
	return atan2(mpu->ay, mpu->az);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fd6a 	bl	8000428 <__aeabi_f2d>
 8001954:	4604      	mov	r4, r0
 8001956:	460d      	mov	r5, r1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fd63 	bl	8000428 <__aeabi_f2d>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f005 f94d 	bl	8006c08 <atan2>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f887 	bl	8000a88 <__aeabi_d2f>
 800197a:	4603      	mov	r3, r0

}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bdb0      	pop	{r4, r5, r7, pc}
 8001984:	0000      	movs	r0, r0
	...

08001988 <mpu_calc_x_angle>:


void mpu_calc_x_angle(mpu6050_typedef *mpu)
{
 8001988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
	mpu_get_data(mpu);
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f7ff fe8e 	bl	80016b4 <mpu_get_data>
	float delta = (HAL_GetTick() - mpu->lst_time_x_angle) / 1000.0;
 8001998:	f000 fb4e 	bl	8002038 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fd1d 	bl	80003e4 <__aeabi_ui2d>
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b46      	ldr	r3, [pc, #280]	; (8001ac8 <mpu_calc_x_angle+0x140>)
 80019b0:	f7fe febc 	bl	800072c <__aeabi_ddiv>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7ff f864 	bl	8000a88 <__aeabi_d2f>
 80019c0:	4603      	mov	r3, r0
 80019c2:	617b      	str	r3, [r7, #20]
	if(delta > 0.05)
 80019c4:	6978      	ldr	r0, [r7, #20]
 80019c6:	f7fe fd2f 	bl	8000428 <__aeabi_f2d>
 80019ca:	a33b      	add	r3, pc, #236	; (adr r3, 8001ab8 <mpu_calc_x_angle+0x130>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7ff f812 	bl	80009f8 <__aeabi_dcmpgt>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <mpu_calc_x_angle+0x6a>
	{
		mpu->x_angle = mpu_get_acc_x_angle(mpu);
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f7ff ff90 	bl	8001900 <mpu_get_acc_x_angle>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	635a      	str	r2, [r3, #52]	; 0x34
		mpu->lst_time_x_angle = HAL_GetTick();
 80019e6:	f000 fb27 	bl	8002038 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	63da      	str	r2, [r3, #60]	; 0x3c
		//complementary filter
		float alpha = 0.1;
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
		mpu->lst_time_x_angle = HAL_GetTick();
	}
}
 80019f0:	e05a      	b.n	8001aa8 <mpu_calc_x_angle+0x120>
		float alpha = 0.1;
 80019f2:	4b36      	ldr	r3, [pc, #216]	; (8001acc <mpu_calc_x_angle+0x144>)
 80019f4:	613b      	str	r3, [r7, #16]
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff ff82 	bl	8001900 <mpu_get_acc_x_angle>
 80019fc:	4603      	mov	r3, r0
 80019fe:	6939      	ldr	r1, [r7, #16]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f99f 	bl	8000d44 <__aeabi_fmul>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd0d 	bl	8000428 <__aeabi_f2d>
 8001a0e:	4604      	mov	r4, r0
 8001a10:	460d      	mov	r5, r1
 8001a12:	6939      	ldr	r1, [r7, #16]
 8001a14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001a18:	f7ff f88a 	bl	8000b30 <__aeabi_fsub>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fd02 	bl	8000428 <__aeabi_f2d>
 8001a24:	4680      	mov	r8, r0
 8001a26:	4689      	mov	r9, r1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fcfb 	bl	8000428 <__aeabi_f2d>
 8001a32:	4682      	mov	sl, r0
 8001a34:	468b      	mov	fp, r1
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fcf2 	bl	8000428 <__aeabi_f2d>
 8001a44:	a31e      	add	r3, pc, #120	; (adr r3, 8001ac0 <mpu_calc_x_angle+0x138>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fd45 	bl	80004d8 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	e9c7 2300 	strd	r2, r3, [r7]
 8001a56:	6978      	ldr	r0, [r7, #20]
 8001a58:	f7fe fce6 	bl	8000428 <__aeabi_f2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a64:	f7fe fd38 	bl	80004d8 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4650      	mov	r0, sl
 8001a6e:	4659      	mov	r1, fp
 8001a70:	f7fe fb7c 	bl	800016c <__adddf3>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4640      	mov	r0, r8
 8001a7a:	4649      	mov	r1, r9
 8001a7c:	f7fe fd2c 	bl	80004d8 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4620      	mov	r0, r4
 8001a86:	4629      	mov	r1, r5
 8001a88:	f7fe fb70 	bl	800016c <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7fe fff8 	bl	8000a88 <__aeabi_d2f>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34
		mpu->lst_time_x_angle = HAL_GetTick();
 8001a9e:	f000 facb 	bl	8002038 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001aa8:	bf00      	nop
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ab2:	bf00      	nop
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	9999999a 	.word	0x9999999a
 8001abc:	3fa99999 	.word	0x3fa99999
 8001ac0:	22d4405f 	.word	0x22d4405f
 8001ac4:	3f91df47 	.word	0x3f91df47
 8001ac8:	408f4000 	.word	0x408f4000
 8001acc:	3dcccccd 	.word	0x3dcccccd

08001ad0 <mpu_calc_y_angle>:


void mpu_calc_y_angle(mpu6050_typedef *mpu)
{
 8001ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
	mpu_get_data(mpu);
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff fdea 	bl	80016b4 <mpu_get_data>
	float delta = (HAL_GetTick() - mpu->lst_time_y_angle) / 1000.0;
 8001ae0:	f000 faaa 	bl	8002038 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fc79 	bl	80003e4 <__aeabi_ui2d>
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	4b44      	ldr	r3, [pc, #272]	; (8001c08 <mpu_calc_y_angle+0x138>)
 8001af8:	f7fe fe18 	bl	800072c <__aeabi_ddiv>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7fe ffc0 	bl	8000a88 <__aeabi_d2f>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	617b      	str	r3, [r7, #20]
	if(delta > 0.05)
 8001b0c:	6978      	ldr	r0, [r7, #20]
 8001b0e:	f7fe fc8b 	bl	8000428 <__aeabi_f2d>
 8001b12:	a339      	add	r3, pc, #228	; (adr r3, 8001bf8 <mpu_calc_y_angle+0x128>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe ff6e 	bl	80009f8 <__aeabi_dcmpgt>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <mpu_calc_y_angle+0x6a>
	{
		mpu->y_angle = mpu_get_acc_y_angle(mpu);
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f7ff ff0d 	bl	8001942 <mpu_get_acc_y_angle>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
		mpu->lst_time_y_angle = HAL_GetTick();
 8001b2e:	f000 fa83 	bl	8002038 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
		// complementary filter
		float alpha = 0.1;
		mpu->y_angle = alpha * mpu_get_acc_y_angle(mpu) + (1 - alpha) * (mpu->y_angle + (mpu->gx * DEG2RAD * delta));
		mpu->lst_time_y_angle = HAL_GetTick();
	}
}
 8001b38:	e058      	b.n	8001bec <mpu_calc_y_angle+0x11c>
		float alpha = 0.1;
 8001b3a:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <mpu_calc_y_angle+0x13c>)
 8001b3c:	613b      	str	r3, [r7, #16]
		mpu->y_angle = alpha * mpu_get_acc_y_angle(mpu) + (1 - alpha) * (mpu->y_angle + (mpu->gx * DEG2RAD * delta));
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff feff 	bl	8001942 <mpu_get_acc_y_angle>
 8001b44:	4603      	mov	r3, r0
 8001b46:	6939      	ldr	r1, [r7, #16]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff f8fb 	bl	8000d44 <__aeabi_fmul>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fc69 	bl	8000428 <__aeabi_f2d>
 8001b56:	4604      	mov	r4, r0
 8001b58:	460d      	mov	r5, r1
 8001b5a:	6939      	ldr	r1, [r7, #16]
 8001b5c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001b60:	f7fe ffe6 	bl	8000b30 <__aeabi_fsub>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fc5e 	bl	8000428 <__aeabi_f2d>
 8001b6c:	4680      	mov	r8, r0
 8001b6e:	4689      	mov	r9, r1
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fc57 	bl	8000428 <__aeabi_f2d>
 8001b7a:	4682      	mov	sl, r0
 8001b7c:	468b      	mov	fp, r1
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fc50 	bl	8000428 <__aeabi_f2d>
 8001b88:	a31d      	add	r3, pc, #116	; (adr r3, 8001c00 <mpu_calc_y_angle+0x130>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe fca3 	bl	80004d8 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	e9c7 2300 	strd	r2, r3, [r7]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7fe fc44 	bl	8000428 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ba8:	f7fe fc96 	bl	80004d8 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4650      	mov	r0, sl
 8001bb2:	4659      	mov	r1, fp
 8001bb4:	f7fe fada 	bl	800016c <__adddf3>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4640      	mov	r0, r8
 8001bbe:	4649      	mov	r1, r9
 8001bc0:	f7fe fc8a 	bl	80004d8 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4620      	mov	r0, r4
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f7fe face 	bl	800016c <__adddf3>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7fe ff56 	bl	8000a88 <__aeabi_d2f>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
		mpu->lst_time_y_angle = HAL_GetTick();
 8001be2:	f000 fa29 	bl	8002038 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf6:	bf00      	nop
 8001bf8:	9999999a 	.word	0x9999999a
 8001bfc:	3fa99999 	.word	0x3fa99999
 8001c00:	22d4405f 	.word	0x22d4405f
 8001c04:	3f91df47 	.word	0x3f91df47
 8001c08:	408f4000 	.word	0x408f4000
 8001c0c:	3dcccccd 	.word	0x3dcccccd

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6193      	str	r3, [r2, #24]
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_MspInit+0x60>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_MspInit+0x60>)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <NMI_Handler+0x4>

08001c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <HardFault_Handler+0x4>

08001c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <MemManage_Handler+0x4>

08001c86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <BusFault_Handler+0x4>

08001c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <UsageFault_Handler+0x4>

08001c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr

08001caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cba:	f000 f9ab 	bl	8002014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  return 1;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <_kill>:

int _kill(int pid, int sig)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cda:	f003 f93b 	bl	8004f54 <__errno>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2216      	movs	r2, #22
 8001ce2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_exit>:

void _exit (int status)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ffe7 	bl	8001cd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d02:	e7fe      	b.n	8001d02 <_exit+0x12>

08001d04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	e00a      	b.n	8001d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d16:	f3af 8000 	nop.w
 8001d1a:	4601      	mov	r1, r0
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	60ba      	str	r2, [r7, #8]
 8001d22:	b2ca      	uxtb	r2, r1
 8001d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbf0      	blt.n	8001d16 <_read+0x12>
  }

  return len;
 8001d34:	687b      	ldr	r3, [r7, #4]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e009      	b.n	8001d64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	60ba      	str	r2, [r7, #8]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fa07 	bl	800116c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbf1      	blt.n	8001d50 <_write+0x12>
  }
  return len;
 8001d6c:	687b      	ldr	r3, [r7, #4]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_close>:

int _close(int file)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <_isatty>:

int _isatty(int file)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
	...

08001dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <_sbrk+0x5c>)
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <_sbrk+0x60>)
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <_sbrk+0x64>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <_sbrk+0x68>)
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d207      	bcs.n	8001e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e08:	f003 f8a4 	bl	8004f54 <__errno>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	220c      	movs	r2, #12
 8001e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	e009      	b.n	8001e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <_sbrk+0x64>)
 8001e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20005000 	.word	0x20005000
 8001e38:	00000400 	.word	0x00000400
 8001e3c:	20000244 	.word	0x20000244
 8001e40:	200003e0 	.word	0x200003e0

08001e44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_USART1_UART_Init+0x50>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e88:	f001 ffee 	bl	8003e68 <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e92:	f7ff fa70 	bl	8001376 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000248 	.word	0x20000248
 8001ea0:	40013800 	.word	0x40013800

08001ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_UART_MspInit+0x8c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d131      	bne.n	8001f28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_UART_MspInit+0x90>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <HAL_UART_MspInit+0x90>)
 8001eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_UART_MspInit+0x90>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_UART_MspInit+0x90>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <HAL_UART_MspInit+0x90>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_UART_MspInit+0x90>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	4619      	mov	r1, r3
 8001f08:	480b      	ldr	r0, [pc, #44]	; (8001f38 <HAL_UART_MspInit+0x94>)
 8001f0a:	f000 f9a7 	bl	800225c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	4619      	mov	r1, r3
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <HAL_UART_MspInit+0x94>)
 8001f24:	f000 f99a 	bl	800225c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010800 	.word	0x40010800

08001f3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f3c:	f7ff ff82 	bl	8001e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f40:	480b      	ldr	r0, [pc, #44]	; (8001f70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f42:	490c      	ldr	r1, [pc, #48]	; (8001f74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f48:	e002      	b.n	8001f50 <LoopCopyDataInit>

08001f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4e:	3304      	adds	r3, #4

08001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f54:	d3f9      	bcc.n	8001f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f58:	4c09      	ldr	r4, [pc, #36]	; (8001f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f5c:	e001      	b.n	8001f62 <LoopFillZerobss>

08001f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f60:	3204      	adds	r2, #4

08001f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f64:	d3fb      	bcc.n	8001f5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f66:	f002 fffb 	bl	8004f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f6a:	f7ff f919 	bl	80011a0 <main>
  bx lr
 8001f6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f74:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f78:	08007568 	.word	0x08007568
  ldr r2, =_sbss
 8001f7c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001f80:	200003e0 	.word	0x200003e0

08001f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f84:	e7fe      	b.n	8001f84 <ADC1_2_IRQHandler>
	...

08001f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_Init+0x28>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_Init+0x28>)
 8001f92:	f043 0310 	orr.w	r3, r3, #16
 8001f96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f000 f92b 	bl	80021f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f000 f808 	bl	8001fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa4:	f7ff fe34 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40022000 	.word	0x40022000

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_InitTick+0x54>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_InitTick+0x58>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f935 	bl	8002242 <HAL_SYSTICK_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00e      	b.n	8002000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d80a      	bhi.n	8001ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f000 f90b 	bl	800220a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff4:	4a06      	ldr	r2, [pc, #24]	; (8002010 <HAL_InitTick+0x5c>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e000      	b.n	8002000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000000 	.word	0x20000000
 800200c:	20000008 	.word	0x20000008
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_IncTick+0x1c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_IncTick+0x20>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	4a03      	ldr	r2, [pc, #12]	; (8002034 <HAL_IncTick+0x20>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000008 	.word	0x20000008
 8002034:	20000290 	.word	0x20000290

08002038 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b02      	ldr	r3, [pc, #8]	; (8002048 <HAL_GetTick+0x10>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000290 	.word	0x20000290

0800204c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff fff0 	bl	8002038 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d005      	beq.n	8002072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_Delay+0x44>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002072:	bf00      	nop
 8002074:	f7ff ffe0 	bl	8002038 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d8f7      	bhi.n	8002074 <HAL_Delay+0x28>
  {
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000008 	.word	0x20000008

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	db0a      	blt.n	8002122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	490c      	ldr	r1, [pc, #48]	; (8002144 <__NVIC_SetPriority+0x4c>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	0112      	lsls	r2, r2, #4
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	440b      	add	r3, r1
 800211c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002120:	e00a      	b.n	8002138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4908      	ldr	r1, [pc, #32]	; (8002148 <__NVIC_SetPriority+0x50>)
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	3b04      	subs	r3, #4
 8002130:	0112      	lsls	r2, r2, #4
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	440b      	add	r3, r1
 8002136:	761a      	strb	r2, [r3, #24]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f1c3 0307 	rsb	r3, r3, #7
 8002166:	2b04      	cmp	r3, #4
 8002168:	bf28      	it	cs
 800216a:	2304      	movcs	r3, #4
 800216c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3304      	adds	r3, #4
 8002172:	2b06      	cmp	r3, #6
 8002174:	d902      	bls.n	800217c <NVIC_EncodePriority+0x30>
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3b03      	subs	r3, #3
 800217a:	e000      	b.n	800217e <NVIC_EncodePriority+0x32>
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	401a      	ands	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43d9      	mvns	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	4313      	orrs	r3, r2
         );
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c0:	d301      	bcc.n	80021c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00f      	b.n	80021e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <SysTick_Config+0x40>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ce:	210f      	movs	r1, #15
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f7ff ff90 	bl	80020f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <SysTick_Config+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <SysTick_Config+0x40>)
 80021e0:	2207      	movs	r2, #7
 80021e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	e000e010 	.word	0xe000e010

080021f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff49 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800221c:	f7ff ff5e 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f7ff ff90 	bl	800214c <NVIC_EncodePriority>
 800222c:	4602      	mov	r2, r0
 800222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff5f 	bl	80020f8 <__NVIC_SetPriority>
}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ffb0 	bl	80021b0 <SysTick_Config>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800225c:	b480      	push	{r7}
 800225e:	b08b      	sub	sp, #44	; 0x2c
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226e:	e169      	b.n	8002544 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002270:	2201      	movs	r2, #1
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	429a      	cmp	r2, r3
 800228a:	f040 8158 	bne.w	800253e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4a9a      	ldr	r2, [pc, #616]	; (80024fc <HAL_GPIO_Init+0x2a0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d05e      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 8002298:	4a98      	ldr	r2, [pc, #608]	; (80024fc <HAL_GPIO_Init+0x2a0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d875      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 800229e:	4a98      	ldr	r2, [pc, #608]	; (8002500 <HAL_GPIO_Init+0x2a4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d058      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022a4:	4a96      	ldr	r2, [pc, #600]	; (8002500 <HAL_GPIO_Init+0x2a4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d86f      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022aa:	4a96      	ldr	r2, [pc, #600]	; (8002504 <HAL_GPIO_Init+0x2a8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d052      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022b0:	4a94      	ldr	r2, [pc, #592]	; (8002504 <HAL_GPIO_Init+0x2a8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d869      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022b6:	4a94      	ldr	r2, [pc, #592]	; (8002508 <HAL_GPIO_Init+0x2ac>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d04c      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022bc:	4a92      	ldr	r2, [pc, #584]	; (8002508 <HAL_GPIO_Init+0x2ac>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d863      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022c2:	4a92      	ldr	r2, [pc, #584]	; (800250c <HAL_GPIO_Init+0x2b0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d046      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
 80022c8:	4a90      	ldr	r2, [pc, #576]	; (800250c <HAL_GPIO_Init+0x2b0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d85d      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022ce:	2b12      	cmp	r3, #18
 80022d0:	d82a      	bhi.n	8002328 <HAL_GPIO_Init+0xcc>
 80022d2:	2b12      	cmp	r3, #18
 80022d4:	d859      	bhi.n	800238a <HAL_GPIO_Init+0x12e>
 80022d6:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <HAL_GPIO_Init+0x80>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	08002357 	.word	0x08002357
 80022e0:	08002331 	.word	0x08002331
 80022e4:	08002343 	.word	0x08002343
 80022e8:	08002385 	.word	0x08002385
 80022ec:	0800238b 	.word	0x0800238b
 80022f0:	0800238b 	.word	0x0800238b
 80022f4:	0800238b 	.word	0x0800238b
 80022f8:	0800238b 	.word	0x0800238b
 80022fc:	0800238b 	.word	0x0800238b
 8002300:	0800238b 	.word	0x0800238b
 8002304:	0800238b 	.word	0x0800238b
 8002308:	0800238b 	.word	0x0800238b
 800230c:	0800238b 	.word	0x0800238b
 8002310:	0800238b 	.word	0x0800238b
 8002314:	0800238b 	.word	0x0800238b
 8002318:	0800238b 	.word	0x0800238b
 800231c:	0800238b 	.word	0x0800238b
 8002320:	08002339 	.word	0x08002339
 8002324:	0800234d 	.word	0x0800234d
 8002328:	4a79      	ldr	r2, [pc, #484]	; (8002510 <HAL_GPIO_Init+0x2b4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800232e:	e02c      	b.n	800238a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	623b      	str	r3, [r7, #32]
          break;
 8002336:	e029      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	3304      	adds	r3, #4
 800233e:	623b      	str	r3, [r7, #32]
          break;
 8002340:	e024      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	3308      	adds	r3, #8
 8002348:	623b      	str	r3, [r7, #32]
          break;
 800234a:	e01f      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	330c      	adds	r3, #12
 8002352:	623b      	str	r3, [r7, #32]
          break;
 8002354:	e01a      	b.n	800238c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800235e:	2304      	movs	r3, #4
 8002360:	623b      	str	r3, [r7, #32]
          break;
 8002362:	e013      	b.n	800238c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800236c:	2308      	movs	r3, #8
 800236e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	611a      	str	r2, [r3, #16]
          break;
 8002376:	e009      	b.n	800238c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002378:	2308      	movs	r3, #8
 800237a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	615a      	str	r2, [r3, #20]
          break;
 8002382:	e003      	b.n	800238c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
          break;
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x130>
          break;
 800238a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2bff      	cmp	r3, #255	; 0xff
 8002390:	d801      	bhi.n	8002396 <HAL_GPIO_Init+0x13a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	e001      	b.n	800239a <HAL_GPIO_Init+0x13e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2bff      	cmp	r3, #255	; 0xff
 80023a0:	d802      	bhi.n	80023a8 <HAL_GPIO_Init+0x14c>
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	e002      	b.n	80023ae <HAL_GPIO_Init+0x152>
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	3b08      	subs	r3, #8
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	210f      	movs	r1, #15
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	6a39      	ldr	r1, [r7, #32]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	431a      	orrs	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80b1 	beq.w	800253e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023dc:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <HAL_GPIO_Init+0x2b8>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <HAL_GPIO_Init+0x2b8>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6193      	str	r3, [r2, #24]
 80023e8:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_GPIO_Init+0x2b8>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023f4:	4a48      	ldr	r2, [pc, #288]	; (8002518 <HAL_GPIO_Init+0x2bc>)
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002400:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4013      	ands	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a40      	ldr	r2, [pc, #256]	; (800251c <HAL_GPIO_Init+0x2c0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d013      	beq.n	8002448 <HAL_GPIO_Init+0x1ec>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3f      	ldr	r2, [pc, #252]	; (8002520 <HAL_GPIO_Init+0x2c4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00d      	beq.n	8002444 <HAL_GPIO_Init+0x1e8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a3e      	ldr	r2, [pc, #248]	; (8002524 <HAL_GPIO_Init+0x2c8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d007      	beq.n	8002440 <HAL_GPIO_Init+0x1e4>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a3d      	ldr	r2, [pc, #244]	; (8002528 <HAL_GPIO_Init+0x2cc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <HAL_GPIO_Init+0x1e0>
 8002438:	2303      	movs	r3, #3
 800243a:	e006      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 800243c:	2304      	movs	r3, #4
 800243e:	e004      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 8002440:	2302      	movs	r3, #2
 8002442:	e002      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_GPIO_Init+0x1ee>
 8002448:	2300      	movs	r3, #0
 800244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244c:	f002 0203 	and.w	r2, r2, #3
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	4093      	lsls	r3, r2
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800245a:	492f      	ldr	r1, [pc, #188]	; (8002518 <HAL_GPIO_Init+0x2bc>)
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_GPIO_Init+0x2d0>)
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	492c      	ldr	r1, [pc, #176]	; (800252c <HAL_GPIO_Init+0x2d0>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_GPIO_Init+0x2d0>)
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	43db      	mvns	r3, r3
 800248a:	4928      	ldr	r1, [pc, #160]	; (800252c <HAL_GPIO_Init+0x2d0>)
 800248c:	4013      	ands	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_GPIO_Init+0x2d0>)
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	4922      	ldr	r1, [pc, #136]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60cb      	str	r3, [r1, #12]
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	491e      	ldr	r1, [pc, #120]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4918      	ldr	r1, [pc, #96]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	43db      	mvns	r3, r3
 80024da:	4914      	ldr	r1, [pc, #80]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d021      	beq.n	8002530 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_GPIO_Init+0x2d0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
 80024f8:	e021      	b.n	800253e <HAL_GPIO_Init+0x2e2>
 80024fa:	bf00      	nop
 80024fc:	10320000 	.word	0x10320000
 8002500:	10310000 	.word	0x10310000
 8002504:	10220000 	.word	0x10220000
 8002508:	10210000 	.word	0x10210000
 800250c:	10120000 	.word	0x10120000
 8002510:	10110000 	.word	0x10110000
 8002514:	40021000 	.word	0x40021000
 8002518:	40010000 	.word	0x40010000
 800251c:	40010800 	.word	0x40010800
 8002520:	40010c00 	.word	0x40010c00
 8002524:	40011000 	.word	0x40011000
 8002528:	40011400 	.word	0x40011400
 800252c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_GPIO_Init+0x304>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	43db      	mvns	r3, r3
 8002538:	4909      	ldr	r1, [pc, #36]	; (8002560 <HAL_GPIO_Init+0x304>)
 800253a:	4013      	ands	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	3301      	adds	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	f47f ae8e 	bne.w	8002270 <HAL_GPIO_Init+0x14>
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	372c      	adds	r7, #44	; 0x2c
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40010400 	.word	0x40010400

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	611a      	str	r2, [r3, #16]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e12b      	b.n	80027fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe fd98 	bl	80010f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2224      	movs	r2, #36	; 0x24
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025f8:	f001 fbf0 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 80025fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4a81      	ldr	r2, [pc, #516]	; (8002808 <HAL_I2C_Init+0x274>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d807      	bhi.n	8002618 <HAL_I2C_Init+0x84>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a80      	ldr	r2, [pc, #512]	; (800280c <HAL_I2C_Init+0x278>)
 800260c:	4293      	cmp	r3, r2
 800260e:	bf94      	ite	ls
 8002610:	2301      	movls	r3, #1
 8002612:	2300      	movhi	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e006      	b.n	8002626 <HAL_I2C_Init+0x92>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4a7d      	ldr	r2, [pc, #500]	; (8002810 <HAL_I2C_Init+0x27c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	bf94      	ite	ls
 8002620:	2301      	movls	r3, #1
 8002622:	2300      	movhi	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0e7      	b.n	80027fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a78      	ldr	r2, [pc, #480]	; (8002814 <HAL_I2C_Init+0x280>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0c9b      	lsrs	r3, r3, #18
 8002638:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a6a      	ldr	r2, [pc, #424]	; (8002808 <HAL_I2C_Init+0x274>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d802      	bhi.n	8002668 <HAL_I2C_Init+0xd4>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3301      	adds	r3, #1
 8002666:	e009      	b.n	800267c <HAL_I2C_Init+0xe8>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	4a69      	ldr	r2, [pc, #420]	; (8002818 <HAL_I2C_Init+0x284>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	3301      	adds	r3, #1
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	430b      	orrs	r3, r1
 8002682:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800268e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	495c      	ldr	r1, [pc, #368]	; (8002808 <HAL_I2C_Init+0x274>)
 8002698:	428b      	cmp	r3, r1
 800269a:	d819      	bhi.n	80026d0 <HAL_I2C_Init+0x13c>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1e59      	subs	r1, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026aa:	1c59      	adds	r1, r3, #1
 80026ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026b0:	400b      	ands	r3, r1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_I2C_Init+0x138>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1e59      	subs	r1, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ca:	e051      	b.n	8002770 <HAL_I2C_Init+0x1dc>
 80026cc:	2304      	movs	r3, #4
 80026ce:	e04f      	b.n	8002770 <HAL_I2C_Init+0x1dc>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <HAL_I2C_Init+0x168>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1e58      	subs	r0, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	440b      	add	r3, r1
 80026e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e012      	b.n	8002722 <HAL_I2C_Init+0x18e>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1e58      	subs	r0, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	0099      	lsls	r1, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002712:	3301      	adds	r3, #1
 8002714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Init+0x196>
 8002726:	2301      	movs	r3, #1
 8002728:	e022      	b.n	8002770 <HAL_I2C_Init+0x1dc>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10e      	bne.n	8002750 <HAL_I2C_Init+0x1bc>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1e58      	subs	r0, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6859      	ldr	r1, [r3, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	440b      	add	r3, r1
 8002740:	fbb0 f3f3 	udiv	r3, r0, r3
 8002744:	3301      	adds	r3, #1
 8002746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800274e:	e00f      	b.n	8002770 <HAL_I2C_Init+0x1dc>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1e58      	subs	r0, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	0099      	lsls	r1, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	fbb0 f3f3 	udiv	r3, r0, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	6809      	ldr	r1, [r1, #0]
 8002774:	4313      	orrs	r3, r2
 8002776:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800279e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6911      	ldr	r1, [r2, #16]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68d2      	ldr	r2, [r2, #12]
 80027aa:	4311      	orrs	r1, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	430b      	orrs	r3, r1
 80027b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	000186a0 	.word	0x000186a0
 800280c:	001e847f 	.word	0x001e847f
 8002810:	003d08ff 	.word	0x003d08ff
 8002814:	431bde83 	.word	0x431bde83
 8002818:	10624dd3 	.word	0x10624dd3

0800281c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4603      	mov	r3, r0
 800282c:	817b      	strh	r3, [r7, #10]
 800282e:	460b      	mov	r3, r1
 8002830:	813b      	strh	r3, [r7, #8]
 8002832:	4613      	mov	r3, r2
 8002834:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002836:	f7ff fbff 	bl	8002038 <HAL_GetTick>
 800283a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b20      	cmp	r3, #32
 8002846:	f040 80d9 	bne.w	80029fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2319      	movs	r3, #25
 8002850:	2201      	movs	r2, #1
 8002852:	496d      	ldr	r1, [pc, #436]	; (8002a08 <HAL_I2C_Mem_Write+0x1ec>)
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fcc1 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002860:	2302      	movs	r3, #2
 8002862:	e0cc      	b.n	80029fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_I2C_Mem_Write+0x56>
 800286e:	2302      	movs	r3, #2
 8002870:	e0c5      	b.n	80029fe <HAL_I2C_Mem_Write+0x1e2>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d007      	beq.n	8002898 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2221      	movs	r2, #33	; 0x21
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2240      	movs	r2, #64	; 0x40
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a3a      	ldr	r2, [r7, #32]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a4d      	ldr	r2, [pc, #308]	; (8002a0c <HAL_I2C_Mem_Write+0x1f0>)
 80028d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028da:	88f8      	ldrh	r0, [r7, #6]
 80028dc:	893a      	ldrh	r2, [r7, #8]
 80028de:	8979      	ldrh	r1, [r7, #10]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	4603      	mov	r3, r0
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 faf8 	bl	8002ee0 <I2C_RequestMemoryWrite>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d052      	beq.n	800299c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e081      	b.n	80029fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fd86 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00d      	beq.n	8002926 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	2b04      	cmp	r3, #4
 8002910:	d107      	bne.n	8002922 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002920:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e06b      	b.n	80029fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b04      	cmp	r3, #4
 8002962:	d11b      	bne.n	800299c <HAL_I2C_Mem_Write+0x180>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	2b00      	cmp	r3, #0
 800296a:	d017      	beq.n	800299c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1aa      	bne.n	80028fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fd79 	bl	80034a0 <I2C_WaitOnBTFFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00d      	beq.n	80029d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d107      	bne.n	80029cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e016      	b.n	80029fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	00100002 	.word	0x00100002
 8002a0c:	ffff0000 	.word	0xffff0000

08002a10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	; 0x30
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	4608      	mov	r0, r1
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	817b      	strh	r3, [r7, #10]
 8002a22:	460b      	mov	r3, r1
 8002a24:	813b      	strh	r3, [r7, #8]
 8002a26:	4613      	mov	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a2e:	f7ff fb03 	bl	8002038 <HAL_GetTick>
 8002a32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	f040 8244 	bne.w	8002eca <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2319      	movs	r3, #25
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4982      	ldr	r1, [pc, #520]	; (8002c54 <HAL_I2C_Mem_Read+0x244>)
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fbc5 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e237      	b.n	8002ecc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_I2C_Mem_Read+0x5a>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e230      	b.n	8002ecc <HAL_I2C_Mem_Read+0x4bc>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d007      	beq.n	8002a90 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2222      	movs	r2, #34	; 0x22
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2240      	movs	r2, #64	; 0x40
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4a62      	ldr	r2, [pc, #392]	; (8002c58 <HAL_I2C_Mem_Read+0x248>)
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ad2:	88f8      	ldrh	r0, [r7, #6]
 8002ad4:	893a      	ldrh	r2, [r7, #8]
 8002ad6:	8979      	ldrh	r1, [r7, #10]
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fa92 	bl	800300c <I2C_RequestMemoryRead>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e1ec      	b.n	8002ecc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d113      	bne.n	8002b22 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e1c0      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d11e      	bne.n	8002b68 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b3a:	b672      	cpsid	i
}
 8002b3c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b64:	b662      	cpsie	i
}
 8002b66:	e035      	b.n	8002bd4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d11e      	bne.n	8002bae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b80:	b672      	cpsid	i
}
 8002b82:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002baa:	b662      	cpsie	i
}
 8002bac:	e012      	b.n	8002bd4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bbc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002bd4:	e166      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	f200 811f 	bhi.w	8002e1e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d123      	bne.n	8002c30 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fc9f 	bl	8003530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e167      	b.n	8002ecc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c2e:	e139      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d152      	bne.n	8002cde <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3e:	2200      	movs	r2, #0
 8002c40:	4906      	ldr	r1, [pc, #24]	; (8002c5c <HAL_I2C_Mem_Read+0x24c>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 faca 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e13c      	b.n	8002ecc <HAL_I2C_Mem_Read+0x4bc>
 8002c52:	bf00      	nop
 8002c54:	00100002 	.word	0x00100002
 8002c58:	ffff0000 	.word	0xffff0000
 8002c5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002c60:	b672      	cpsid	i
}
 8002c62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ca6:	b662      	cpsie	i
}
 8002ca8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cdc:	e0e2      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	497b      	ldr	r1, [pc, #492]	; (8002ed4 <HAL_I2C_Mem_Read+0x4c4>)
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fa77 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0e9      	b.n	8002ecc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d08:	b672      	cpsid	i
}
 8002d0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d3e:	4b66      	ldr	r3, [pc, #408]	; (8002ed8 <HAL_I2C_Mem_Read+0x4c8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	08db      	lsrs	r3, r3, #3
 8002d44:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_I2C_Mem_Read+0x4cc>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	0a1a      	lsrs	r2, r3, #8
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	00da      	lsls	r2, r3, #3
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d118      	bne.n	8002d96 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002d86:	b662      	cpsie	i
}
 8002d88:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e09a      	b.n	8002ecc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d1d9      	bne.n	8002d58 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002de6:	b662      	cpsie	i
}
 8002de8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e1c:	e042      	b.n	8002ea4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fb84 	bl	8003530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e04c      	b.n	8002ecc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d118      	bne.n	8002ea4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f47f ae94 	bne.w	8002bd6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e000      	b.n	8002ecc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002eca:	2302      	movs	r3, #2
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3728      	adds	r7, #40	; 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	00010004 	.word	0x00010004
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	14f8b589 	.word	0x14f8b589

08002ee0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	4608      	mov	r0, r1
 8002eea:	4611      	mov	r1, r2
 8002eec:	461a      	mov	r2, r3
 8002eee:	4603      	mov	r3, r0
 8002ef0:	817b      	strh	r3, [r7, #10]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	813b      	strh	r3, [r7, #8]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f960 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00d      	beq.n	8002f3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f30:	d103      	bne.n	8002f3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e05f      	b.n	8002ffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f3e:	897b      	ldrh	r3, [r7, #10]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	6a3a      	ldr	r2, [r7, #32]
 8002f52:	492d      	ldr	r1, [pc, #180]	; (8003008 <I2C_RequestMemoryWrite+0x128>)
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f9bb 	bl	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e04c      	b.n	8002ffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7c:	6a39      	ldr	r1, [r7, #32]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fa46 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d107      	bne.n	8002fa2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e02b      	b.n	8002ffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fac:	893b      	ldrh	r3, [r7, #8]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	611a      	str	r2, [r3, #16]
 8002fb6:	e021      	b.n	8002ffc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fb8:	893b      	ldrh	r3, [r7, #8]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc8:	6a39      	ldr	r1, [r7, #32]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fa20 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d107      	bne.n	8002fee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e005      	b.n	8002ffe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff2:	893b      	ldrh	r3, [r7, #8]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	00010002 	.word	0x00010002

0800300c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	4608      	mov	r0, r1
 8003016:	4611      	mov	r1, r2
 8003018:	461a      	mov	r2, r3
 800301a:	4603      	mov	r3, r0
 800301c:	817b      	strh	r3, [r7, #10]
 800301e:	460b      	mov	r3, r1
 8003020:	813b      	strh	r3, [r7, #8]
 8003022:	4613      	mov	r3, r2
 8003024:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003034:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003044:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	2200      	movs	r2, #0
 800304e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f8c2 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00d      	beq.n	800307a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800306c:	d103      	bne.n	8003076 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0aa      	b.n	80031d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003088:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	6a3a      	ldr	r2, [r7, #32]
 800308e:	4952      	ldr	r1, [pc, #328]	; (80031d8 <I2C_RequestMemoryRead+0x1cc>)
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f91d 	bl	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e097      	b.n	80031d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b8:	6a39      	ldr	r1, [r7, #32]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f9a8 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d107      	bne.n	80030de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e076      	b.n	80031d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030e8:	893b      	ldrh	r3, [r7, #8]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	611a      	str	r2, [r3, #16]
 80030f2:	e021      	b.n	8003138 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030f4:	893b      	ldrh	r3, [r7, #8]
 80030f6:	0a1b      	lsrs	r3, r3, #8
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	6a39      	ldr	r1, [r7, #32]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f982 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b04      	cmp	r3, #4
 8003118:	d107      	bne.n	800312a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003128:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e050      	b.n	80031d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800312e:	893b      	ldrh	r3, [r7, #8]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313a:	6a39      	ldr	r1, [r7, #32]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f967 	bl	8003410 <I2C_WaitOnTXEFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00d      	beq.n	8003164 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	2b04      	cmp	r3, #4
 800314e:	d107      	bne.n	8003160 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e035      	b.n	80031d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003172:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	2200      	movs	r2, #0
 800317c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f82b 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00d      	beq.n	80031a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319a:	d103      	bne.n	80031a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e013      	b.n	80031d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031a8:	897b      	ldrh	r3, [r7, #10]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	6a3a      	ldr	r2, [r7, #32]
 80031bc:	4906      	ldr	r1, [pc, #24]	; (80031d8 <I2C_RequestMemoryRead+0x1cc>)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f886 	bl	80032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	00010002 	.word	0x00010002

080031dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ec:	e048      	b.n	8003280 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d044      	beq.n	8003280 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f6:	f7fe ff1f 	bl	8002038 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d302      	bcc.n	800320c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d139      	bne.n	8003280 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d10d      	bne.n	8003232 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	43da      	mvns	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	e00c      	b.n	800324c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	43da      	mvns	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4013      	ands	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	429a      	cmp	r2, r3
 8003250:	d116      	bne.n	8003280 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e023      	b.n	80032c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d10d      	bne.n	80032a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	43da      	mvns	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4013      	ands	r3, r2
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	e00c      	b.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d093      	beq.n	80031ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032de:	e071      	b.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ee:	d123      	bne.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003308:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e067      	b.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333e:	d041      	beq.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003340:	f7fe fe7a 	bl	8002038 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	d302      	bcc.n	8003356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d136      	bne.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d10c      	bne.n	800337a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	43da      	mvns	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4013      	ands	r3, r2
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	bf14      	ite	ne
 8003372:	2301      	movne	r3, #1
 8003374:	2300      	moveq	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	e00b      	b.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	43da      	mvns	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4013      	ands	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf14      	ite	ne
 800338c:	2301      	movne	r3, #1
 800338e:	2300      	moveq	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e021      	b.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	0c1b      	lsrs	r3, r3, #16
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d10c      	bne.n	80033e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	43da      	mvns	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e00b      	b.n	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4013      	ands	r3, r2
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf14      	ite	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	2300      	moveq	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	f47f af6d 	bne.w	80032e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800341c:	e034      	b.n	8003488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f8e3 	bl	80035ea <I2C_IsAcknowledgeFailed>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e034      	b.n	8003498 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d028      	beq.n	8003488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fe fdff 	bl	8002038 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d11d      	bne.n	8003488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	2b80      	cmp	r3, #128	; 0x80
 8003458:	d016      	beq.n	8003488 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e007      	b.n	8003498 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d1c3      	bne.n	800341e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ac:	e034      	b.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f89b 	bl	80035ea <I2C_IsAcknowledgeFailed>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e034      	b.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d028      	beq.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c6:	f7fe fdb7 	bl	8002038 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d11d      	bne.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d016      	beq.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e007      	b.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d1c3      	bne.n	80034ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800353c:	e049      	b.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b10      	cmp	r3, #16
 800354a:	d119      	bne.n	8003580 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0210 	mvn.w	r2, #16
 8003554:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e030      	b.n	80035e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003580:	f7fe fd5a 	bl	8002038 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	429a      	cmp	r2, r3
 800358e:	d302      	bcc.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d11d      	bne.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d016      	beq.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f043 0220 	orr.w	r2, r3, #32
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e007      	b.n	80035e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	d1ae      	bne.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003600:	d11b      	bne.n	800363a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800360a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f043 0204 	orr.w	r2, r3, #4
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
	...

08003648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e272      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8087 	beq.w	8003776 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003668:	4b92      	ldr	r3, [pc, #584]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b04      	cmp	r3, #4
 8003672:	d00c      	beq.n	800368e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003674:	4b8f      	ldr	r3, [pc, #572]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b08      	cmp	r3, #8
 800367e:	d112      	bne.n	80036a6 <HAL_RCC_OscConfig+0x5e>
 8003680:	4b8c      	ldr	r3, [pc, #560]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368c:	d10b      	bne.n	80036a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368e:	4b89      	ldr	r3, [pc, #548]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d06c      	beq.n	8003774 <HAL_RCC_OscConfig+0x12c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d168      	bne.n	8003774 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e24c      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x76>
 80036b0:	4b80      	ldr	r3, [pc, #512]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a7f      	ldr	r2, [pc, #508]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e02e      	b.n	800371c <HAL_RCC_OscConfig+0xd4>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x98>
 80036c6:	4b7b      	ldr	r3, [pc, #492]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a7a      	ldr	r2, [pc, #488]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b78      	ldr	r3, [pc, #480]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a77      	ldr	r2, [pc, #476]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e01d      	b.n	800371c <HAL_RCC_OscConfig+0xd4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0xbc>
 80036ea:	4b72      	ldr	r3, [pc, #456]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a71      	ldr	r2, [pc, #452]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b6f      	ldr	r3, [pc, #444]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6e      	ldr	r2, [pc, #440]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0xd4>
 8003704:	4b6b      	ldr	r3, [pc, #428]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a6a      	ldr	r2, [pc, #424]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 800370a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	4b68      	ldr	r3, [pc, #416]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a67      	ldr	r2, [pc, #412]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d013      	beq.n	800374c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fe fc88 	bl	8002038 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800372c:	f7fe fc84 	bl	8002038 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e200      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b5d      	ldr	r3, [pc, #372]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0xe4>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fe fc74 	bl	8002038 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003754:	f7fe fc70 	bl	8002038 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e1ec      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003766:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x10c>
 8003772:	e000      	b.n	8003776 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d063      	beq.n	800384a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003782:	4b4c      	ldr	r3, [pc, #304]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b08      	cmp	r3, #8
 8003798:	d11c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x18c>
 800379a:	4b46      	ldr	r3, [pc, #280]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d116      	bne.n	80037d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a6:	4b43      	ldr	r3, [pc, #268]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_RCC_OscConfig+0x176>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e1c0      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037be:	4b3d      	ldr	r3, [pc, #244]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4939      	ldr	r1, [pc, #228]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d2:	e03a      	b.n	800384a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037dc:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_RCC_OscConfig+0x270>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fe fc29 	bl	8002038 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ea:	f7fe fc25 	bl	8002038 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e1a1      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fc:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003808:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4927      	ldr	r1, [pc, #156]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]
 800381c:	e015      	b.n	800384a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381e:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <HAL_RCC_OscConfig+0x270>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe fc08 	bl	8002038 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800382c:	f7fe fc04 	bl	8002038 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e180      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d03a      	beq.n	80038cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d019      	beq.n	8003892 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385e:	4b17      	ldr	r3, [pc, #92]	; (80038bc <HAL_RCC_OscConfig+0x274>)
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7fe fbe8 	bl	8002038 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386c:	f7fe fbe4 	bl	8002038 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e160      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <HAL_RCC_OscConfig+0x26c>)
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800388a:	2001      	movs	r0, #1
 800388c:	f000 face 	bl	8003e2c <RCC_Delay>
 8003890:	e01c      	b.n	80038cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_OscConfig+0x274>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003898:	f7fe fbce 	bl	8002038 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389e:	e00f      	b.n	80038c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a0:	f7fe fbca 	bl	8002038 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d908      	bls.n	80038c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e146      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	42420000 	.word	0x42420000
 80038bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c0:	4b92      	ldr	r3, [pc, #584]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e9      	bne.n	80038a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80a6 	beq.w	8003a26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038de:	4b8b      	ldr	r3, [pc, #556]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ea:	4b88      	ldr	r3, [pc, #544]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	4a87      	ldr	r2, [pc, #540]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f4:	61d3      	str	r3, [r2, #28]
 80038f6:	4b85      	ldr	r3, [pc, #532]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b82      	ldr	r3, [pc, #520]	; (8003b10 <HAL_RCC_OscConfig+0x4c8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d118      	bne.n	8003944 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003912:	4b7f      	ldr	r3, [pc, #508]	; (8003b10 <HAL_RCC_OscConfig+0x4c8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a7e      	ldr	r2, [pc, #504]	; (8003b10 <HAL_RCC_OscConfig+0x4c8>)
 8003918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391e:	f7fe fb8b 	bl	8002038 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003926:	f7fe fb87 	bl	8002038 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b64      	cmp	r3, #100	; 0x64
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e103      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	4b75      	ldr	r3, [pc, #468]	; (8003b10 <HAL_RCC_OscConfig+0x4c8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x312>
 800394c:	4b6f      	ldr	r3, [pc, #444]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4a6e      	ldr	r2, [pc, #440]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6213      	str	r3, [r2, #32]
 8003958:	e02d      	b.n	80039b6 <HAL_RCC_OscConfig+0x36e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_RCC_OscConfig+0x334>
 8003962:	4b6a      	ldr	r3, [pc, #424]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4a69      	ldr	r2, [pc, #420]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	6213      	str	r3, [r2, #32]
 800396e:	4b67      	ldr	r3, [pc, #412]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	4a66      	ldr	r2, [pc, #408]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003974:	f023 0304 	bic.w	r3, r3, #4
 8003978:	6213      	str	r3, [r2, #32]
 800397a:	e01c      	b.n	80039b6 <HAL_RCC_OscConfig+0x36e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b05      	cmp	r3, #5
 8003982:	d10c      	bne.n	800399e <HAL_RCC_OscConfig+0x356>
 8003984:	4b61      	ldr	r3, [pc, #388]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4a60      	ldr	r2, [pc, #384]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 800398a:	f043 0304 	orr.w	r3, r3, #4
 800398e:	6213      	str	r3, [r2, #32]
 8003990:	4b5e      	ldr	r3, [pc, #376]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a5d      	ldr	r2, [pc, #372]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6213      	str	r3, [r2, #32]
 800399c:	e00b      	b.n	80039b6 <HAL_RCC_OscConfig+0x36e>
 800399e:	4b5b      	ldr	r3, [pc, #364]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4a5a      	ldr	r2, [pc, #360]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	6213      	str	r3, [r2, #32]
 80039aa:	4b58      	ldr	r3, [pc, #352]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4a57      	ldr	r2, [pc, #348]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	f023 0304 	bic.w	r3, r3, #4
 80039b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d015      	beq.n	80039ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fe fb3b 	bl	8002038 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c6:	f7fe fb37 	bl	8002038 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0b1      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039dc:	4b4b      	ldr	r3, [pc, #300]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0ee      	beq.n	80039c6 <HAL_RCC_OscConfig+0x37e>
 80039e8:	e014      	b.n	8003a14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ea:	f7fe fb25 	bl	8002038 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fe fb21 	bl	8002038 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e09b      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a08:	4b40      	ldr	r3, [pc, #256]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1ee      	bne.n	80039f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1a:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	4a3b      	ldr	r2, [pc, #236]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8087 	beq.w	8003b3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a30:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 030c 	and.w	r3, r3, #12
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d061      	beq.n	8003b00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d146      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a44:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fe faf5 	bl	8002038 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fe faf1 	bl	8002038 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e06d      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a64:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a78:	d108      	bne.n	8003a8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4921      	ldr	r1, [pc, #132]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a8c:	4b1f      	ldr	r3, [pc, #124]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a19      	ldr	r1, [r3, #32]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	491b      	ldr	r1, [pc, #108]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe fac5 	bl	8002038 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fe fac1 	bl	8002038 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e03d      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x46a>
 8003ad0:	e035      	b.n	8003b3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <HAL_RCC_OscConfig+0x4cc>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fe faae 	bl	8002038 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fe faaa 	bl	8002038 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e026      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x498>
 8003afe:	e01e      	b.n	8003b3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d107      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e019      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40007000 	.word	0x40007000
 8003b14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x500>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d106      	bne.n	8003b3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d001      	beq.n	8003b3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000

08003b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0d0      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b60:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <HAL_RCC_ClockConfig+0x1c0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d910      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b67      	ldr	r3, [pc, #412]	; (8003d0c <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 0207 	bic.w	r2, r3, #7
 8003b76:	4965      	ldr	r1, [pc, #404]	; (8003d0c <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0b8      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba8:	4b59      	ldr	r3, [pc, #356]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4a58      	ldr	r2, [pc, #352]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc0:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a52      	ldr	r2, [pc, #328]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bcc:	4b50      	ldr	r3, [pc, #320]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	494d      	ldr	r1, [pc, #308]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d040      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d115      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e07f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0a:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e073      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1a:	4b3d      	ldr	r3, [pc, #244]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06b      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2a:	4b39      	ldr	r3, [pc, #228]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f023 0203 	bic.w	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4936      	ldr	r1, [pc, #216]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c3c:	f7fe f9fc 	bl	8002038 <HAL_GetTick>
 8003c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	e00a      	b.n	8003c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c44:	f7fe f9f8 	bl	8002038 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e053      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 020c 	and.w	r2, r3, #12
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d1eb      	bne.n	8003c44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <HAL_RCC_ClockConfig+0x1c0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d210      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <HAL_RCC_ClockConfig+0x1c0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 0207 	bic.w	r2, r3, #7
 8003c82:	4922      	ldr	r1, [pc, #136]	; (8003d0c <HAL_RCC_ClockConfig+0x1c0>)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e032      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca8:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4916      	ldr	r1, [pc, #88]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	490e      	ldr	r1, [pc, #56]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cda:	f000 f821 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	490a      	ldr	r1, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	5ccb      	ldrb	r3, [r1, r3]
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <HAL_RCC_ClockConfig+0x1cc>)
 8003cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_RCC_ClockConfig+0x1d0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe f95a 	bl	8001fb4 <HAL_InitTick>

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40022000 	.word	0x40022000
 8003d10:	40021000 	.word	0x40021000
 8003d14:	08007150 	.word	0x08007150
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	20000004 	.word	0x20000004

08003d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d3a:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d002      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x30>
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_GetSysClockFreq+0x36>
 8003d4e:	e027      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d52:	613b      	str	r3, [r7, #16]
      break;
 8003d54:	e027      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	0c9b      	lsrs	r3, r3, #18
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d60:	5cd3      	ldrb	r3, [r2, r3]
 8003d62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d010      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d6e:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	0c5b      	lsrs	r3, r3, #17
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	4a11      	ldr	r2, [pc, #68]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d7a:	5cd3      	ldrb	r3, [r2, r3]
 8003d7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d82:	fb03 f202 	mul.w	r2, r3, r2
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e004      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d94:	fb02 f303 	mul.w	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	613b      	str	r3, [r7, #16]
      break;
 8003d9e:	e002      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003da2:	613b      	str	r3, [r7, #16]
      break;
 8003da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da6:	693b      	ldr	r3, [r7, #16]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	007a1200 	.word	0x007a1200
 8003dbc:	08007168 	.word	0x08007168
 8003dc0:	08007178 	.word	0x08007178
 8003dc4:	003d0900 	.word	0x003d0900

08003dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dcc:	4b02      	ldr	r3, [pc, #8]	; (8003dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dce:	681b      	ldr	r3, [r3, #0]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	20000000 	.word	0x20000000

08003ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003de0:	f7ff fff2 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4903      	ldr	r1, [pc, #12]	; (8003e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	08007160 	.word	0x08007160

08003e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e08:	f7ff ffde 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	0adb      	lsrs	r3, r3, #11
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	4903      	ldr	r1, [pc, #12]	; (8003e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000
 8003e28:	08007160 	.word	0x08007160

08003e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <RCC_Delay+0x34>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <RCC_Delay+0x38>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	0a5b      	lsrs	r3, r3, #9
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e48:	bf00      	nop
  }
  while (Delay --);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1e5a      	subs	r2, r3, #1
 8003e4e:	60fa      	str	r2, [r7, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f9      	bne.n	8003e48 <RCC_Delay+0x1c>
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	20000000 	.word	0x20000000
 8003e64:	10624dd3 	.word	0x10624dd3

08003e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e042      	b.n	8003f00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fe f808 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2224      	movs	r2, #36	; 0x24
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f91d 	bl	80040ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d16d      	bne.n	8004004 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_UART_Transmit+0x2c>
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e066      	b.n	8004006 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2221      	movs	r2, #33	; 0x21
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f46:	f7fe f877 	bl	8002038 <HAL_GetTick>
 8003f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	88fa      	ldrh	r2, [r7, #6]
 8003f50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	88fa      	ldrh	r2, [r7, #6]
 8003f56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f60:	d108      	bne.n	8003f74 <HAL_UART_Transmit+0x6c>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d104      	bne.n	8003f74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	e003      	b.n	8003f7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f7c:	e02a      	b.n	8003fd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2200      	movs	r2, #0
 8003f86:	2180      	movs	r1, #128	; 0x80
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f840 	bl	800400e <UART_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e036      	b.n	8004006 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	e007      	b.n	8003fc6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1cf      	bne.n	8003f7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2140      	movs	r1, #64	; 0x40
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f810 	bl	800400e <UART_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e006      	b.n	8004006 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
  }
}
 8004006:	4618      	mov	r0, r3
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b090      	sub	sp, #64	; 0x40
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401e:	e050      	b.n	80040c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d04c      	beq.n	80040c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0x30>
 800402e:	f7fe f803 	bl	8002038 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800403a:	429a      	cmp	r2, r3
 800403c:	d241      	bcs.n	80040c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800405e:	637a      	str	r2, [r7, #52]	; 0x34
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800406c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e5      	bne.n	800403e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	613b      	str	r3, [r7, #16]
   return(result);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	63bb      	str	r3, [r7, #56]	; 0x38
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004092:	623a      	str	r2, [r7, #32]
 8004094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	69f9      	ldr	r1, [r7, #28]
 8004098:	6a3a      	ldr	r2, [r7, #32]
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e5      	bne.n	8004072 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e00f      	b.n	80040e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4013      	ands	r3, r2
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	bf0c      	ite	eq
 80040d2:	2301      	moveq	r3, #1
 80040d4:	2300      	movne	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d09f      	beq.n	8004020 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3740      	adds	r7, #64	; 0x40
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004126:	f023 030c 	bic.w	r3, r3, #12
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	430b      	orrs	r3, r1
 8004132:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2c      	ldr	r2, [pc, #176]	; (8004200 <UART_SetConfig+0x114>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d103      	bne.n	800415c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004154:	f7ff fe56 	bl	8003e04 <HAL_RCC_GetPCLK2Freq>
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	e002      	b.n	8004162 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800415c:	f7ff fe3e 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8004160:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009a      	lsls	r2, r3, #2
 800416c:	441a      	add	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	4a22      	ldr	r2, [pc, #136]	; (8004204 <UART_SetConfig+0x118>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	0119      	lsls	r1, r3, #4
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009a      	lsls	r2, r3, #2
 800418c:	441a      	add	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fbb2 f2f3 	udiv	r2, r2, r3
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <UART_SetConfig+0x118>)
 800419a:	fba3 0302 	umull	r0, r3, r3, r2
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2064      	movs	r0, #100	; 0x64
 80041a2:	fb00 f303 	mul.w	r3, r0, r3
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	3332      	adds	r3, #50	; 0x32
 80041ac:	4a15      	ldr	r2, [pc, #84]	; (8004204 <UART_SetConfig+0x118>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b8:	4419      	add	r1, r3
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	009a      	lsls	r2, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <UART_SetConfig+0x118>)
 80041d2:	fba3 0302 	umull	r0, r3, r3, r2
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2064      	movs	r0, #100	; 0x64
 80041da:	fb00 f303 	mul.w	r3, r0, r3
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	3332      	adds	r3, #50	; 0x32
 80041e4:	4a07      	ldr	r2, [pc, #28]	; (8004204 <UART_SetConfig+0x118>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	f003 020f 	and.w	r2, r3, #15
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	440a      	add	r2, r1
 80041f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40013800 	.word	0x40013800
 8004204:	51eb851f 	.word	0x51eb851f

08004208 <__cvt>:
 8004208:	2b00      	cmp	r3, #0
 800420a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420e:	461f      	mov	r7, r3
 8004210:	bfbb      	ittet	lt
 8004212:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004216:	461f      	movlt	r7, r3
 8004218:	2300      	movge	r3, #0
 800421a:	232d      	movlt	r3, #45	; 0x2d
 800421c:	b088      	sub	sp, #32
 800421e:	4614      	mov	r4, r2
 8004220:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004222:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004224:	7013      	strb	r3, [r2, #0]
 8004226:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004228:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800422c:	f023 0820 	bic.w	r8, r3, #32
 8004230:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004234:	d005      	beq.n	8004242 <__cvt+0x3a>
 8004236:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800423a:	d100      	bne.n	800423e <__cvt+0x36>
 800423c:	3501      	adds	r5, #1
 800423e:	2302      	movs	r3, #2
 8004240:	e000      	b.n	8004244 <__cvt+0x3c>
 8004242:	2303      	movs	r3, #3
 8004244:	aa07      	add	r2, sp, #28
 8004246:	9204      	str	r2, [sp, #16]
 8004248:	aa06      	add	r2, sp, #24
 800424a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800424e:	e9cd 3500 	strd	r3, r5, [sp]
 8004252:	4622      	mov	r2, r4
 8004254:	463b      	mov	r3, r7
 8004256:	f000 ff4f 	bl	80050f8 <_dtoa_r>
 800425a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800425e:	4606      	mov	r6, r0
 8004260:	d102      	bne.n	8004268 <__cvt+0x60>
 8004262:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004264:	07db      	lsls	r3, r3, #31
 8004266:	d522      	bpl.n	80042ae <__cvt+0xa6>
 8004268:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800426c:	eb06 0905 	add.w	r9, r6, r5
 8004270:	d110      	bne.n	8004294 <__cvt+0x8c>
 8004272:	7833      	ldrb	r3, [r6, #0]
 8004274:	2b30      	cmp	r3, #48	; 0x30
 8004276:	d10a      	bne.n	800428e <__cvt+0x86>
 8004278:	2200      	movs	r2, #0
 800427a:	2300      	movs	r3, #0
 800427c:	4620      	mov	r0, r4
 800427e:	4639      	mov	r1, r7
 8004280:	f7fc fb92 	bl	80009a8 <__aeabi_dcmpeq>
 8004284:	b918      	cbnz	r0, 800428e <__cvt+0x86>
 8004286:	f1c5 0501 	rsb	r5, r5, #1
 800428a:	f8ca 5000 	str.w	r5, [sl]
 800428e:	f8da 3000 	ldr.w	r3, [sl]
 8004292:	4499      	add	r9, r3
 8004294:	2200      	movs	r2, #0
 8004296:	2300      	movs	r3, #0
 8004298:	4620      	mov	r0, r4
 800429a:	4639      	mov	r1, r7
 800429c:	f7fc fb84 	bl	80009a8 <__aeabi_dcmpeq>
 80042a0:	b108      	cbz	r0, 80042a6 <__cvt+0x9e>
 80042a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80042a6:	2230      	movs	r2, #48	; 0x30
 80042a8:	9b07      	ldr	r3, [sp, #28]
 80042aa:	454b      	cmp	r3, r9
 80042ac:	d307      	bcc.n	80042be <__cvt+0xb6>
 80042ae:	4630      	mov	r0, r6
 80042b0:	9b07      	ldr	r3, [sp, #28]
 80042b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042b4:	1b9b      	subs	r3, r3, r6
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	b008      	add	sp, #32
 80042ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042be:	1c59      	adds	r1, r3, #1
 80042c0:	9107      	str	r1, [sp, #28]
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	e7f0      	b.n	80042a8 <__cvt+0xa0>

080042c6 <__exponent>:
 80042c6:	4603      	mov	r3, r0
 80042c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042ca:	2900      	cmp	r1, #0
 80042cc:	f803 2b02 	strb.w	r2, [r3], #2
 80042d0:	bfb6      	itet	lt
 80042d2:	222d      	movlt	r2, #45	; 0x2d
 80042d4:	222b      	movge	r2, #43	; 0x2b
 80042d6:	4249      	neglt	r1, r1
 80042d8:	2909      	cmp	r1, #9
 80042da:	7042      	strb	r2, [r0, #1]
 80042dc:	dd2a      	ble.n	8004334 <__exponent+0x6e>
 80042de:	f10d 0207 	add.w	r2, sp, #7
 80042e2:	4617      	mov	r7, r2
 80042e4:	260a      	movs	r6, #10
 80042e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80042ea:	4694      	mov	ip, r2
 80042ec:	fb06 1415 	mls	r4, r6, r5, r1
 80042f0:	3430      	adds	r4, #48	; 0x30
 80042f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80042f6:	460c      	mov	r4, r1
 80042f8:	2c63      	cmp	r4, #99	; 0x63
 80042fa:	4629      	mov	r1, r5
 80042fc:	f102 32ff 	add.w	r2, r2, #4294967295
 8004300:	dcf1      	bgt.n	80042e6 <__exponent+0x20>
 8004302:	3130      	adds	r1, #48	; 0x30
 8004304:	f1ac 0402 	sub.w	r4, ip, #2
 8004308:	f802 1c01 	strb.w	r1, [r2, #-1]
 800430c:	4622      	mov	r2, r4
 800430e:	1c41      	adds	r1, r0, #1
 8004310:	42ba      	cmp	r2, r7
 8004312:	d30a      	bcc.n	800432a <__exponent+0x64>
 8004314:	f10d 0209 	add.w	r2, sp, #9
 8004318:	eba2 020c 	sub.w	r2, r2, ip
 800431c:	42bc      	cmp	r4, r7
 800431e:	bf88      	it	hi
 8004320:	2200      	movhi	r2, #0
 8004322:	4413      	add	r3, r2
 8004324:	1a18      	subs	r0, r3, r0
 8004326:	b003      	add	sp, #12
 8004328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800432a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800432e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004332:	e7ed      	b.n	8004310 <__exponent+0x4a>
 8004334:	2330      	movs	r3, #48	; 0x30
 8004336:	3130      	adds	r1, #48	; 0x30
 8004338:	7083      	strb	r3, [r0, #2]
 800433a:	70c1      	strb	r1, [r0, #3]
 800433c:	1d03      	adds	r3, r0, #4
 800433e:	e7f1      	b.n	8004324 <__exponent+0x5e>

08004340 <_printf_float>:
 8004340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004344:	b091      	sub	sp, #68	; 0x44
 8004346:	460c      	mov	r4, r1
 8004348:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800434c:	4616      	mov	r6, r2
 800434e:	461f      	mov	r7, r3
 8004350:	4605      	mov	r5, r0
 8004352:	f000 fdb5 	bl	8004ec0 <_localeconv_r>
 8004356:	6803      	ldr	r3, [r0, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	9309      	str	r3, [sp, #36]	; 0x24
 800435c:	f7fb fef8 	bl	8000150 <strlen>
 8004360:	2300      	movs	r3, #0
 8004362:	930e      	str	r3, [sp, #56]	; 0x38
 8004364:	f8d8 3000 	ldr.w	r3, [r8]
 8004368:	900a      	str	r0, [sp, #40]	; 0x28
 800436a:	3307      	adds	r3, #7
 800436c:	f023 0307 	bic.w	r3, r3, #7
 8004370:	f103 0208 	add.w	r2, r3, #8
 8004374:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004378:	f8d4 b000 	ldr.w	fp, [r4]
 800437c:	f8c8 2000 	str.w	r2, [r8]
 8004380:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004384:	4652      	mov	r2, sl
 8004386:	4643      	mov	r3, r8
 8004388:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800438c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004390:	930b      	str	r3, [sp, #44]	; 0x2c
 8004392:	f04f 32ff 	mov.w	r2, #4294967295
 8004396:	4650      	mov	r0, sl
 8004398:	4b9c      	ldr	r3, [pc, #624]	; (800460c <_printf_float+0x2cc>)
 800439a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800439c:	f7fc fb36 	bl	8000a0c <__aeabi_dcmpun>
 80043a0:	bb70      	cbnz	r0, 8004400 <_printf_float+0xc0>
 80043a2:	f04f 32ff 	mov.w	r2, #4294967295
 80043a6:	4650      	mov	r0, sl
 80043a8:	4b98      	ldr	r3, [pc, #608]	; (800460c <_printf_float+0x2cc>)
 80043aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043ac:	f7fc fb10 	bl	80009d0 <__aeabi_dcmple>
 80043b0:	bb30      	cbnz	r0, 8004400 <_printf_float+0xc0>
 80043b2:	2200      	movs	r2, #0
 80043b4:	2300      	movs	r3, #0
 80043b6:	4650      	mov	r0, sl
 80043b8:	4641      	mov	r1, r8
 80043ba:	f7fc faff 	bl	80009bc <__aeabi_dcmplt>
 80043be:	b110      	cbz	r0, 80043c6 <_printf_float+0x86>
 80043c0:	232d      	movs	r3, #45	; 0x2d
 80043c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c6:	4a92      	ldr	r2, [pc, #584]	; (8004610 <_printf_float+0x2d0>)
 80043c8:	4b92      	ldr	r3, [pc, #584]	; (8004614 <_printf_float+0x2d4>)
 80043ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80043ce:	bf94      	ite	ls
 80043d0:	4690      	movls	r8, r2
 80043d2:	4698      	movhi	r8, r3
 80043d4:	2303      	movs	r3, #3
 80043d6:	f04f 0a00 	mov.w	sl, #0
 80043da:	6123      	str	r3, [r4, #16]
 80043dc:	f02b 0304 	bic.w	r3, fp, #4
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	4633      	mov	r3, r6
 80043e4:	4621      	mov	r1, r4
 80043e6:	4628      	mov	r0, r5
 80043e8:	9700      	str	r7, [sp, #0]
 80043ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80043ec:	f000 f9d6 	bl	800479c <_printf_common>
 80043f0:	3001      	adds	r0, #1
 80043f2:	f040 8090 	bne.w	8004516 <_printf_float+0x1d6>
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295
 80043fa:	b011      	add	sp, #68	; 0x44
 80043fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004400:	4652      	mov	r2, sl
 8004402:	4643      	mov	r3, r8
 8004404:	4650      	mov	r0, sl
 8004406:	4641      	mov	r1, r8
 8004408:	f7fc fb00 	bl	8000a0c <__aeabi_dcmpun>
 800440c:	b148      	cbz	r0, 8004422 <_printf_float+0xe2>
 800440e:	f1b8 0f00 	cmp.w	r8, #0
 8004412:	bfb8      	it	lt
 8004414:	232d      	movlt	r3, #45	; 0x2d
 8004416:	4a80      	ldr	r2, [pc, #512]	; (8004618 <_printf_float+0x2d8>)
 8004418:	bfb8      	it	lt
 800441a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800441e:	4b7f      	ldr	r3, [pc, #508]	; (800461c <_printf_float+0x2dc>)
 8004420:	e7d3      	b.n	80043ca <_printf_float+0x8a>
 8004422:	6863      	ldr	r3, [r4, #4]
 8004424:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	d142      	bne.n	80044b2 <_printf_float+0x172>
 800442c:	2306      	movs	r3, #6
 800442e:	6063      	str	r3, [r4, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	9206      	str	r2, [sp, #24]
 8004434:	aa0e      	add	r2, sp, #56	; 0x38
 8004436:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800443a:	aa0d      	add	r2, sp, #52	; 0x34
 800443c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004440:	9203      	str	r2, [sp, #12]
 8004442:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004446:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800444a:	6023      	str	r3, [r4, #0]
 800444c:	6863      	ldr	r3, [r4, #4]
 800444e:	4652      	mov	r2, sl
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	4628      	mov	r0, r5
 8004454:	4643      	mov	r3, r8
 8004456:	910b      	str	r1, [sp, #44]	; 0x2c
 8004458:	f7ff fed6 	bl	8004208 <__cvt>
 800445c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800445e:	4680      	mov	r8, r0
 8004460:	2947      	cmp	r1, #71	; 0x47
 8004462:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004464:	d108      	bne.n	8004478 <_printf_float+0x138>
 8004466:	1cc8      	adds	r0, r1, #3
 8004468:	db02      	blt.n	8004470 <_printf_float+0x130>
 800446a:	6863      	ldr	r3, [r4, #4]
 800446c:	4299      	cmp	r1, r3
 800446e:	dd40      	ble.n	80044f2 <_printf_float+0x1b2>
 8004470:	f1a9 0902 	sub.w	r9, r9, #2
 8004474:	fa5f f989 	uxtb.w	r9, r9
 8004478:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800447c:	d81f      	bhi.n	80044be <_printf_float+0x17e>
 800447e:	464a      	mov	r2, r9
 8004480:	3901      	subs	r1, #1
 8004482:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004486:	910d      	str	r1, [sp, #52]	; 0x34
 8004488:	f7ff ff1d 	bl	80042c6 <__exponent>
 800448c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800448e:	4682      	mov	sl, r0
 8004490:	1813      	adds	r3, r2, r0
 8004492:	2a01      	cmp	r2, #1
 8004494:	6123      	str	r3, [r4, #16]
 8004496:	dc02      	bgt.n	800449e <_printf_float+0x15e>
 8004498:	6822      	ldr	r2, [r4, #0]
 800449a:	07d2      	lsls	r2, r2, #31
 800449c:	d501      	bpl.n	80044a2 <_printf_float+0x162>
 800449e:	3301      	adds	r3, #1
 80044a0:	6123      	str	r3, [r4, #16]
 80044a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d09b      	beq.n	80043e2 <_printf_float+0xa2>
 80044aa:	232d      	movs	r3, #45	; 0x2d
 80044ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b0:	e797      	b.n	80043e2 <_printf_float+0xa2>
 80044b2:	2947      	cmp	r1, #71	; 0x47
 80044b4:	d1bc      	bne.n	8004430 <_printf_float+0xf0>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1ba      	bne.n	8004430 <_printf_float+0xf0>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e7b7      	b.n	800442e <_printf_float+0xee>
 80044be:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80044c2:	d118      	bne.n	80044f6 <_printf_float+0x1b6>
 80044c4:	2900      	cmp	r1, #0
 80044c6:	6863      	ldr	r3, [r4, #4]
 80044c8:	dd0b      	ble.n	80044e2 <_printf_float+0x1a2>
 80044ca:	6121      	str	r1, [r4, #16]
 80044cc:	b913      	cbnz	r3, 80044d4 <_printf_float+0x194>
 80044ce:	6822      	ldr	r2, [r4, #0]
 80044d0:	07d0      	lsls	r0, r2, #31
 80044d2:	d502      	bpl.n	80044da <_printf_float+0x19a>
 80044d4:	3301      	adds	r3, #1
 80044d6:	440b      	add	r3, r1
 80044d8:	6123      	str	r3, [r4, #16]
 80044da:	f04f 0a00 	mov.w	sl, #0
 80044de:	65a1      	str	r1, [r4, #88]	; 0x58
 80044e0:	e7df      	b.n	80044a2 <_printf_float+0x162>
 80044e2:	b913      	cbnz	r3, 80044ea <_printf_float+0x1aa>
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	07d2      	lsls	r2, r2, #31
 80044e8:	d501      	bpl.n	80044ee <_printf_float+0x1ae>
 80044ea:	3302      	adds	r3, #2
 80044ec:	e7f4      	b.n	80044d8 <_printf_float+0x198>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e7f2      	b.n	80044d8 <_printf_float+0x198>
 80044f2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80044f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044f8:	4299      	cmp	r1, r3
 80044fa:	db05      	blt.n	8004508 <_printf_float+0x1c8>
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	6121      	str	r1, [r4, #16]
 8004500:	07d8      	lsls	r0, r3, #31
 8004502:	d5ea      	bpl.n	80044da <_printf_float+0x19a>
 8004504:	1c4b      	adds	r3, r1, #1
 8004506:	e7e7      	b.n	80044d8 <_printf_float+0x198>
 8004508:	2900      	cmp	r1, #0
 800450a:	bfcc      	ite	gt
 800450c:	2201      	movgt	r2, #1
 800450e:	f1c1 0202 	rsble	r2, r1, #2
 8004512:	4413      	add	r3, r2
 8004514:	e7e0      	b.n	80044d8 <_printf_float+0x198>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	055a      	lsls	r2, r3, #21
 800451a:	d407      	bmi.n	800452c <_printf_float+0x1ec>
 800451c:	6923      	ldr	r3, [r4, #16]
 800451e:	4642      	mov	r2, r8
 8004520:	4631      	mov	r1, r6
 8004522:	4628      	mov	r0, r5
 8004524:	47b8      	blx	r7
 8004526:	3001      	adds	r0, #1
 8004528:	d12b      	bne.n	8004582 <_printf_float+0x242>
 800452a:	e764      	b.n	80043f6 <_printf_float+0xb6>
 800452c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004530:	f240 80dd 	bls.w	80046ee <_printf_float+0x3ae>
 8004534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004538:	2200      	movs	r2, #0
 800453a:	2300      	movs	r3, #0
 800453c:	f7fc fa34 	bl	80009a8 <__aeabi_dcmpeq>
 8004540:	2800      	cmp	r0, #0
 8004542:	d033      	beq.n	80045ac <_printf_float+0x26c>
 8004544:	2301      	movs	r3, #1
 8004546:	4631      	mov	r1, r6
 8004548:	4628      	mov	r0, r5
 800454a:	4a35      	ldr	r2, [pc, #212]	; (8004620 <_printf_float+0x2e0>)
 800454c:	47b8      	blx	r7
 800454e:	3001      	adds	r0, #1
 8004550:	f43f af51 	beq.w	80043f6 <_printf_float+0xb6>
 8004554:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004558:	429a      	cmp	r2, r3
 800455a:	db02      	blt.n	8004562 <_printf_float+0x222>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	07d8      	lsls	r0, r3, #31
 8004560:	d50f      	bpl.n	8004582 <_printf_float+0x242>
 8004562:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f af42 	beq.w	80043f6 <_printf_float+0xb6>
 8004572:	f04f 0800 	mov.w	r8, #0
 8004576:	f104 091a 	add.w	r9, r4, #26
 800457a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800457c:	3b01      	subs	r3, #1
 800457e:	4543      	cmp	r3, r8
 8004580:	dc09      	bgt.n	8004596 <_printf_float+0x256>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	079b      	lsls	r3, r3, #30
 8004586:	f100 8104 	bmi.w	8004792 <_printf_float+0x452>
 800458a:	68e0      	ldr	r0, [r4, #12]
 800458c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800458e:	4298      	cmp	r0, r3
 8004590:	bfb8      	it	lt
 8004592:	4618      	movlt	r0, r3
 8004594:	e731      	b.n	80043fa <_printf_float+0xba>
 8004596:	2301      	movs	r3, #1
 8004598:	464a      	mov	r2, r9
 800459a:	4631      	mov	r1, r6
 800459c:	4628      	mov	r0, r5
 800459e:	47b8      	blx	r7
 80045a0:	3001      	adds	r0, #1
 80045a2:	f43f af28 	beq.w	80043f6 <_printf_float+0xb6>
 80045a6:	f108 0801 	add.w	r8, r8, #1
 80045aa:	e7e6      	b.n	800457a <_printf_float+0x23a>
 80045ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	dc38      	bgt.n	8004624 <_printf_float+0x2e4>
 80045b2:	2301      	movs	r3, #1
 80045b4:	4631      	mov	r1, r6
 80045b6:	4628      	mov	r0, r5
 80045b8:	4a19      	ldr	r2, [pc, #100]	; (8004620 <_printf_float+0x2e0>)
 80045ba:	47b8      	blx	r7
 80045bc:	3001      	adds	r0, #1
 80045be:	f43f af1a 	beq.w	80043f6 <_printf_float+0xb6>
 80045c2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d102      	bne.n	80045d0 <_printf_float+0x290>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	07d9      	lsls	r1, r3, #31
 80045ce:	d5d8      	bpl.n	8004582 <_printf_float+0x242>
 80045d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045d4:	4631      	mov	r1, r6
 80045d6:	4628      	mov	r0, r5
 80045d8:	47b8      	blx	r7
 80045da:	3001      	adds	r0, #1
 80045dc:	f43f af0b 	beq.w	80043f6 <_printf_float+0xb6>
 80045e0:	f04f 0900 	mov.w	r9, #0
 80045e4:	f104 0a1a 	add.w	sl, r4, #26
 80045e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045ea:	425b      	negs	r3, r3
 80045ec:	454b      	cmp	r3, r9
 80045ee:	dc01      	bgt.n	80045f4 <_printf_float+0x2b4>
 80045f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045f2:	e794      	b.n	800451e <_printf_float+0x1de>
 80045f4:	2301      	movs	r3, #1
 80045f6:	4652      	mov	r2, sl
 80045f8:	4631      	mov	r1, r6
 80045fa:	4628      	mov	r0, r5
 80045fc:	47b8      	blx	r7
 80045fe:	3001      	adds	r0, #1
 8004600:	f43f aef9 	beq.w	80043f6 <_printf_float+0xb6>
 8004604:	f109 0901 	add.w	r9, r9, #1
 8004608:	e7ee      	b.n	80045e8 <_printf_float+0x2a8>
 800460a:	bf00      	nop
 800460c:	7fefffff 	.word	0x7fefffff
 8004610:	0800717a 	.word	0x0800717a
 8004614:	0800717e 	.word	0x0800717e
 8004618:	08007182 	.word	0x08007182
 800461c:	08007186 	.word	0x08007186
 8004620:	0800718a 	.word	0x0800718a
 8004624:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004626:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004628:	429a      	cmp	r2, r3
 800462a:	bfa8      	it	ge
 800462c:	461a      	movge	r2, r3
 800462e:	2a00      	cmp	r2, #0
 8004630:	4691      	mov	r9, r2
 8004632:	dc37      	bgt.n	80046a4 <_printf_float+0x364>
 8004634:	f04f 0b00 	mov.w	fp, #0
 8004638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800463c:	f104 021a 	add.w	r2, r4, #26
 8004640:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004644:	ebaa 0309 	sub.w	r3, sl, r9
 8004648:	455b      	cmp	r3, fp
 800464a:	dc33      	bgt.n	80046b4 <_printf_float+0x374>
 800464c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004650:	429a      	cmp	r2, r3
 8004652:	db3b      	blt.n	80046cc <_printf_float+0x38c>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	07da      	lsls	r2, r3, #31
 8004658:	d438      	bmi.n	80046cc <_printf_float+0x38c>
 800465a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800465e:	eba2 0903 	sub.w	r9, r2, r3
 8004662:	eba2 020a 	sub.w	r2, r2, sl
 8004666:	4591      	cmp	r9, r2
 8004668:	bfa8      	it	ge
 800466a:	4691      	movge	r9, r2
 800466c:	f1b9 0f00 	cmp.w	r9, #0
 8004670:	dc34      	bgt.n	80046dc <_printf_float+0x39c>
 8004672:	f04f 0800 	mov.w	r8, #0
 8004676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800467a:	f104 0a1a 	add.w	sl, r4, #26
 800467e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	eba3 0309 	sub.w	r3, r3, r9
 8004688:	4543      	cmp	r3, r8
 800468a:	f77f af7a 	ble.w	8004582 <_printf_float+0x242>
 800468e:	2301      	movs	r3, #1
 8004690:	4652      	mov	r2, sl
 8004692:	4631      	mov	r1, r6
 8004694:	4628      	mov	r0, r5
 8004696:	47b8      	blx	r7
 8004698:	3001      	adds	r0, #1
 800469a:	f43f aeac 	beq.w	80043f6 <_printf_float+0xb6>
 800469e:	f108 0801 	add.w	r8, r8, #1
 80046a2:	e7ec      	b.n	800467e <_printf_float+0x33e>
 80046a4:	4613      	mov	r3, r2
 80046a6:	4631      	mov	r1, r6
 80046a8:	4642      	mov	r2, r8
 80046aa:	4628      	mov	r0, r5
 80046ac:	47b8      	blx	r7
 80046ae:	3001      	adds	r0, #1
 80046b0:	d1c0      	bne.n	8004634 <_printf_float+0x2f4>
 80046b2:	e6a0      	b.n	80043f6 <_printf_float+0xb6>
 80046b4:	2301      	movs	r3, #1
 80046b6:	4631      	mov	r1, r6
 80046b8:	4628      	mov	r0, r5
 80046ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80046bc:	47b8      	blx	r7
 80046be:	3001      	adds	r0, #1
 80046c0:	f43f ae99 	beq.w	80043f6 <_printf_float+0xb6>
 80046c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046c6:	f10b 0b01 	add.w	fp, fp, #1
 80046ca:	e7b9      	b.n	8004640 <_printf_float+0x300>
 80046cc:	4631      	mov	r1, r6
 80046ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046d2:	4628      	mov	r0, r5
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	d1bf      	bne.n	800465a <_printf_float+0x31a>
 80046da:	e68c      	b.n	80043f6 <_printf_float+0xb6>
 80046dc:	464b      	mov	r3, r9
 80046de:	4631      	mov	r1, r6
 80046e0:	4628      	mov	r0, r5
 80046e2:	eb08 020a 	add.w	r2, r8, sl
 80046e6:	47b8      	blx	r7
 80046e8:	3001      	adds	r0, #1
 80046ea:	d1c2      	bne.n	8004672 <_printf_float+0x332>
 80046ec:	e683      	b.n	80043f6 <_printf_float+0xb6>
 80046ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046f0:	2a01      	cmp	r2, #1
 80046f2:	dc01      	bgt.n	80046f8 <_printf_float+0x3b8>
 80046f4:	07db      	lsls	r3, r3, #31
 80046f6:	d539      	bpl.n	800476c <_printf_float+0x42c>
 80046f8:	2301      	movs	r3, #1
 80046fa:	4642      	mov	r2, r8
 80046fc:	4631      	mov	r1, r6
 80046fe:	4628      	mov	r0, r5
 8004700:	47b8      	blx	r7
 8004702:	3001      	adds	r0, #1
 8004704:	f43f ae77 	beq.w	80043f6 <_printf_float+0xb6>
 8004708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800470c:	4631      	mov	r1, r6
 800470e:	4628      	mov	r0, r5
 8004710:	47b8      	blx	r7
 8004712:	3001      	adds	r0, #1
 8004714:	f43f ae6f 	beq.w	80043f6 <_printf_float+0xb6>
 8004718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800471c:	2200      	movs	r2, #0
 800471e:	2300      	movs	r3, #0
 8004720:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004724:	f7fc f940 	bl	80009a8 <__aeabi_dcmpeq>
 8004728:	b9d8      	cbnz	r0, 8004762 <_printf_float+0x422>
 800472a:	f109 33ff 	add.w	r3, r9, #4294967295
 800472e:	f108 0201 	add.w	r2, r8, #1
 8004732:	4631      	mov	r1, r6
 8004734:	4628      	mov	r0, r5
 8004736:	47b8      	blx	r7
 8004738:	3001      	adds	r0, #1
 800473a:	d10e      	bne.n	800475a <_printf_float+0x41a>
 800473c:	e65b      	b.n	80043f6 <_printf_float+0xb6>
 800473e:	2301      	movs	r3, #1
 8004740:	464a      	mov	r2, r9
 8004742:	4631      	mov	r1, r6
 8004744:	4628      	mov	r0, r5
 8004746:	47b8      	blx	r7
 8004748:	3001      	adds	r0, #1
 800474a:	f43f ae54 	beq.w	80043f6 <_printf_float+0xb6>
 800474e:	f108 0801 	add.w	r8, r8, #1
 8004752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004754:	3b01      	subs	r3, #1
 8004756:	4543      	cmp	r3, r8
 8004758:	dcf1      	bgt.n	800473e <_printf_float+0x3fe>
 800475a:	4653      	mov	r3, sl
 800475c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004760:	e6de      	b.n	8004520 <_printf_float+0x1e0>
 8004762:	f04f 0800 	mov.w	r8, #0
 8004766:	f104 091a 	add.w	r9, r4, #26
 800476a:	e7f2      	b.n	8004752 <_printf_float+0x412>
 800476c:	2301      	movs	r3, #1
 800476e:	4642      	mov	r2, r8
 8004770:	e7df      	b.n	8004732 <_printf_float+0x3f2>
 8004772:	2301      	movs	r3, #1
 8004774:	464a      	mov	r2, r9
 8004776:	4631      	mov	r1, r6
 8004778:	4628      	mov	r0, r5
 800477a:	47b8      	blx	r7
 800477c:	3001      	adds	r0, #1
 800477e:	f43f ae3a 	beq.w	80043f6 <_printf_float+0xb6>
 8004782:	f108 0801 	add.w	r8, r8, #1
 8004786:	68e3      	ldr	r3, [r4, #12]
 8004788:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800478a:	1a5b      	subs	r3, r3, r1
 800478c:	4543      	cmp	r3, r8
 800478e:	dcf0      	bgt.n	8004772 <_printf_float+0x432>
 8004790:	e6fb      	b.n	800458a <_printf_float+0x24a>
 8004792:	f04f 0800 	mov.w	r8, #0
 8004796:	f104 0919 	add.w	r9, r4, #25
 800479a:	e7f4      	b.n	8004786 <_printf_float+0x446>

0800479c <_printf_common>:
 800479c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a0:	4616      	mov	r6, r2
 80047a2:	4699      	mov	r9, r3
 80047a4:	688a      	ldr	r2, [r1, #8]
 80047a6:	690b      	ldr	r3, [r1, #16]
 80047a8:	4607      	mov	r7, r0
 80047aa:	4293      	cmp	r3, r2
 80047ac:	bfb8      	it	lt
 80047ae:	4613      	movlt	r3, r2
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047b6:	460c      	mov	r4, r1
 80047b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047bc:	b10a      	cbz	r2, 80047c2 <_printf_common+0x26>
 80047be:	3301      	adds	r3, #1
 80047c0:	6033      	str	r3, [r6, #0]
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	0699      	lsls	r1, r3, #26
 80047c6:	bf42      	ittt	mi
 80047c8:	6833      	ldrmi	r3, [r6, #0]
 80047ca:	3302      	addmi	r3, #2
 80047cc:	6033      	strmi	r3, [r6, #0]
 80047ce:	6825      	ldr	r5, [r4, #0]
 80047d0:	f015 0506 	ands.w	r5, r5, #6
 80047d4:	d106      	bne.n	80047e4 <_printf_common+0x48>
 80047d6:	f104 0a19 	add.w	sl, r4, #25
 80047da:	68e3      	ldr	r3, [r4, #12]
 80047dc:	6832      	ldr	r2, [r6, #0]
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	42ab      	cmp	r3, r5
 80047e2:	dc2b      	bgt.n	800483c <_printf_common+0xa0>
 80047e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047e8:	1e13      	subs	r3, r2, #0
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	bf18      	it	ne
 80047ee:	2301      	movne	r3, #1
 80047f0:	0692      	lsls	r2, r2, #26
 80047f2:	d430      	bmi.n	8004856 <_printf_common+0xba>
 80047f4:	4649      	mov	r1, r9
 80047f6:	4638      	mov	r0, r7
 80047f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047fc:	47c0      	blx	r8
 80047fe:	3001      	adds	r0, #1
 8004800:	d023      	beq.n	800484a <_printf_common+0xae>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	6922      	ldr	r2, [r4, #16]
 8004806:	f003 0306 	and.w	r3, r3, #6
 800480a:	2b04      	cmp	r3, #4
 800480c:	bf14      	ite	ne
 800480e:	2500      	movne	r5, #0
 8004810:	6833      	ldreq	r3, [r6, #0]
 8004812:	f04f 0600 	mov.w	r6, #0
 8004816:	bf08      	it	eq
 8004818:	68e5      	ldreq	r5, [r4, #12]
 800481a:	f104 041a 	add.w	r4, r4, #26
 800481e:	bf08      	it	eq
 8004820:	1aed      	subeq	r5, r5, r3
 8004822:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004826:	bf08      	it	eq
 8004828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800482c:	4293      	cmp	r3, r2
 800482e:	bfc4      	itt	gt
 8004830:	1a9b      	subgt	r3, r3, r2
 8004832:	18ed      	addgt	r5, r5, r3
 8004834:	42b5      	cmp	r5, r6
 8004836:	d11a      	bne.n	800486e <_printf_common+0xd2>
 8004838:	2000      	movs	r0, #0
 800483a:	e008      	b.n	800484e <_printf_common+0xb2>
 800483c:	2301      	movs	r3, #1
 800483e:	4652      	mov	r2, sl
 8004840:	4649      	mov	r1, r9
 8004842:	4638      	mov	r0, r7
 8004844:	47c0      	blx	r8
 8004846:	3001      	adds	r0, #1
 8004848:	d103      	bne.n	8004852 <_printf_common+0xb6>
 800484a:	f04f 30ff 	mov.w	r0, #4294967295
 800484e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004852:	3501      	adds	r5, #1
 8004854:	e7c1      	b.n	80047da <_printf_common+0x3e>
 8004856:	2030      	movs	r0, #48	; 0x30
 8004858:	18e1      	adds	r1, r4, r3
 800485a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004864:	4422      	add	r2, r4
 8004866:	3302      	adds	r3, #2
 8004868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800486c:	e7c2      	b.n	80047f4 <_printf_common+0x58>
 800486e:	2301      	movs	r3, #1
 8004870:	4622      	mov	r2, r4
 8004872:	4649      	mov	r1, r9
 8004874:	4638      	mov	r0, r7
 8004876:	47c0      	blx	r8
 8004878:	3001      	adds	r0, #1
 800487a:	d0e6      	beq.n	800484a <_printf_common+0xae>
 800487c:	3601      	adds	r6, #1
 800487e:	e7d9      	b.n	8004834 <_printf_common+0x98>

08004880 <_printf_i>:
 8004880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004884:	7e0f      	ldrb	r7, [r1, #24]
 8004886:	4691      	mov	r9, r2
 8004888:	2f78      	cmp	r7, #120	; 0x78
 800488a:	4680      	mov	r8, r0
 800488c:	460c      	mov	r4, r1
 800488e:	469a      	mov	sl, r3
 8004890:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004892:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004896:	d807      	bhi.n	80048a8 <_printf_i+0x28>
 8004898:	2f62      	cmp	r7, #98	; 0x62
 800489a:	d80a      	bhi.n	80048b2 <_printf_i+0x32>
 800489c:	2f00      	cmp	r7, #0
 800489e:	f000 80d5 	beq.w	8004a4c <_printf_i+0x1cc>
 80048a2:	2f58      	cmp	r7, #88	; 0x58
 80048a4:	f000 80c1 	beq.w	8004a2a <_printf_i+0x1aa>
 80048a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048b0:	e03a      	b.n	8004928 <_printf_i+0xa8>
 80048b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048b6:	2b15      	cmp	r3, #21
 80048b8:	d8f6      	bhi.n	80048a8 <_printf_i+0x28>
 80048ba:	a101      	add	r1, pc, #4	; (adr r1, 80048c0 <_printf_i+0x40>)
 80048bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048c0:	08004919 	.word	0x08004919
 80048c4:	0800492d 	.word	0x0800492d
 80048c8:	080048a9 	.word	0x080048a9
 80048cc:	080048a9 	.word	0x080048a9
 80048d0:	080048a9 	.word	0x080048a9
 80048d4:	080048a9 	.word	0x080048a9
 80048d8:	0800492d 	.word	0x0800492d
 80048dc:	080048a9 	.word	0x080048a9
 80048e0:	080048a9 	.word	0x080048a9
 80048e4:	080048a9 	.word	0x080048a9
 80048e8:	080048a9 	.word	0x080048a9
 80048ec:	08004a33 	.word	0x08004a33
 80048f0:	08004959 	.word	0x08004959
 80048f4:	080049ed 	.word	0x080049ed
 80048f8:	080048a9 	.word	0x080048a9
 80048fc:	080048a9 	.word	0x080048a9
 8004900:	08004a55 	.word	0x08004a55
 8004904:	080048a9 	.word	0x080048a9
 8004908:	08004959 	.word	0x08004959
 800490c:	080048a9 	.word	0x080048a9
 8004910:	080048a9 	.word	0x080048a9
 8004914:	080049f5 	.word	0x080049f5
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	1d1a      	adds	r2, r3, #4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	602a      	str	r2, [r5, #0]
 8004920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004928:	2301      	movs	r3, #1
 800492a:	e0a0      	b.n	8004a6e <_printf_i+0x1ee>
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	682b      	ldr	r3, [r5, #0]
 8004930:	0607      	lsls	r7, r0, #24
 8004932:	f103 0104 	add.w	r1, r3, #4
 8004936:	6029      	str	r1, [r5, #0]
 8004938:	d501      	bpl.n	800493e <_printf_i+0xbe>
 800493a:	681e      	ldr	r6, [r3, #0]
 800493c:	e003      	b.n	8004946 <_printf_i+0xc6>
 800493e:	0646      	lsls	r6, r0, #25
 8004940:	d5fb      	bpl.n	800493a <_printf_i+0xba>
 8004942:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004946:	2e00      	cmp	r6, #0
 8004948:	da03      	bge.n	8004952 <_printf_i+0xd2>
 800494a:	232d      	movs	r3, #45	; 0x2d
 800494c:	4276      	negs	r6, r6
 800494e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004952:	230a      	movs	r3, #10
 8004954:	4859      	ldr	r0, [pc, #356]	; (8004abc <_printf_i+0x23c>)
 8004956:	e012      	b.n	800497e <_printf_i+0xfe>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	6820      	ldr	r0, [r4, #0]
 800495c:	1d19      	adds	r1, r3, #4
 800495e:	6029      	str	r1, [r5, #0]
 8004960:	0605      	lsls	r5, r0, #24
 8004962:	d501      	bpl.n	8004968 <_printf_i+0xe8>
 8004964:	681e      	ldr	r6, [r3, #0]
 8004966:	e002      	b.n	800496e <_printf_i+0xee>
 8004968:	0641      	lsls	r1, r0, #25
 800496a:	d5fb      	bpl.n	8004964 <_printf_i+0xe4>
 800496c:	881e      	ldrh	r6, [r3, #0]
 800496e:	2f6f      	cmp	r7, #111	; 0x6f
 8004970:	bf0c      	ite	eq
 8004972:	2308      	moveq	r3, #8
 8004974:	230a      	movne	r3, #10
 8004976:	4851      	ldr	r0, [pc, #324]	; (8004abc <_printf_i+0x23c>)
 8004978:	2100      	movs	r1, #0
 800497a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800497e:	6865      	ldr	r5, [r4, #4]
 8004980:	2d00      	cmp	r5, #0
 8004982:	bfa8      	it	ge
 8004984:	6821      	ldrge	r1, [r4, #0]
 8004986:	60a5      	str	r5, [r4, #8]
 8004988:	bfa4      	itt	ge
 800498a:	f021 0104 	bicge.w	r1, r1, #4
 800498e:	6021      	strge	r1, [r4, #0]
 8004990:	b90e      	cbnz	r6, 8004996 <_printf_i+0x116>
 8004992:	2d00      	cmp	r5, #0
 8004994:	d04b      	beq.n	8004a2e <_printf_i+0x1ae>
 8004996:	4615      	mov	r5, r2
 8004998:	fbb6 f1f3 	udiv	r1, r6, r3
 800499c:	fb03 6711 	mls	r7, r3, r1, r6
 80049a0:	5dc7      	ldrb	r7, [r0, r7]
 80049a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049a6:	4637      	mov	r7, r6
 80049a8:	42bb      	cmp	r3, r7
 80049aa:	460e      	mov	r6, r1
 80049ac:	d9f4      	bls.n	8004998 <_printf_i+0x118>
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d10b      	bne.n	80049ca <_printf_i+0x14a>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	07de      	lsls	r6, r3, #31
 80049b6:	d508      	bpl.n	80049ca <_printf_i+0x14a>
 80049b8:	6923      	ldr	r3, [r4, #16]
 80049ba:	6861      	ldr	r1, [r4, #4]
 80049bc:	4299      	cmp	r1, r3
 80049be:	bfde      	ittt	le
 80049c0:	2330      	movle	r3, #48	; 0x30
 80049c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049ca:	1b52      	subs	r2, r2, r5
 80049cc:	6122      	str	r2, [r4, #16]
 80049ce:	464b      	mov	r3, r9
 80049d0:	4621      	mov	r1, r4
 80049d2:	4640      	mov	r0, r8
 80049d4:	f8cd a000 	str.w	sl, [sp]
 80049d8:	aa03      	add	r2, sp, #12
 80049da:	f7ff fedf 	bl	800479c <_printf_common>
 80049de:	3001      	adds	r0, #1
 80049e0:	d14a      	bne.n	8004a78 <_printf_i+0x1f8>
 80049e2:	f04f 30ff 	mov.w	r0, #4294967295
 80049e6:	b004      	add	sp, #16
 80049e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	f043 0320 	orr.w	r3, r3, #32
 80049f2:	6023      	str	r3, [r4, #0]
 80049f4:	2778      	movs	r7, #120	; 0x78
 80049f6:	4832      	ldr	r0, [pc, #200]	; (8004ac0 <_printf_i+0x240>)
 80049f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	6829      	ldr	r1, [r5, #0]
 8004a00:	061f      	lsls	r7, r3, #24
 8004a02:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a06:	d402      	bmi.n	8004a0e <_printf_i+0x18e>
 8004a08:	065f      	lsls	r7, r3, #25
 8004a0a:	bf48      	it	mi
 8004a0c:	b2b6      	uxthmi	r6, r6
 8004a0e:	07df      	lsls	r7, r3, #31
 8004a10:	bf48      	it	mi
 8004a12:	f043 0320 	orrmi.w	r3, r3, #32
 8004a16:	6029      	str	r1, [r5, #0]
 8004a18:	bf48      	it	mi
 8004a1a:	6023      	strmi	r3, [r4, #0]
 8004a1c:	b91e      	cbnz	r6, 8004a26 <_printf_i+0x1a6>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	f023 0320 	bic.w	r3, r3, #32
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	2310      	movs	r3, #16
 8004a28:	e7a6      	b.n	8004978 <_printf_i+0xf8>
 8004a2a:	4824      	ldr	r0, [pc, #144]	; (8004abc <_printf_i+0x23c>)
 8004a2c:	e7e4      	b.n	80049f8 <_printf_i+0x178>
 8004a2e:	4615      	mov	r5, r2
 8004a30:	e7bd      	b.n	80049ae <_printf_i+0x12e>
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	6826      	ldr	r6, [r4, #0]
 8004a36:	1d18      	adds	r0, r3, #4
 8004a38:	6961      	ldr	r1, [r4, #20]
 8004a3a:	6028      	str	r0, [r5, #0]
 8004a3c:	0635      	lsls	r5, r6, #24
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	d501      	bpl.n	8004a46 <_printf_i+0x1c6>
 8004a42:	6019      	str	r1, [r3, #0]
 8004a44:	e002      	b.n	8004a4c <_printf_i+0x1cc>
 8004a46:	0670      	lsls	r0, r6, #25
 8004a48:	d5fb      	bpl.n	8004a42 <_printf_i+0x1c2>
 8004a4a:	8019      	strh	r1, [r3, #0]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4615      	mov	r5, r2
 8004a50:	6123      	str	r3, [r4, #16]
 8004a52:	e7bc      	b.n	80049ce <_printf_i+0x14e>
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	2100      	movs	r1, #0
 8004a58:	1d1a      	adds	r2, r3, #4
 8004a5a:	602a      	str	r2, [r5, #0]
 8004a5c:	681d      	ldr	r5, [r3, #0]
 8004a5e:	6862      	ldr	r2, [r4, #4]
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 faa3 	bl	8004fac <memchr>
 8004a66:	b108      	cbz	r0, 8004a6c <_printf_i+0x1ec>
 8004a68:	1b40      	subs	r0, r0, r5
 8004a6a:	6060      	str	r0, [r4, #4]
 8004a6c:	6863      	ldr	r3, [r4, #4]
 8004a6e:	6123      	str	r3, [r4, #16]
 8004a70:	2300      	movs	r3, #0
 8004a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a76:	e7aa      	b.n	80049ce <_printf_i+0x14e>
 8004a78:	462a      	mov	r2, r5
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	6923      	ldr	r3, [r4, #16]
 8004a80:	47d0      	blx	sl
 8004a82:	3001      	adds	r0, #1
 8004a84:	d0ad      	beq.n	80049e2 <_printf_i+0x162>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	079b      	lsls	r3, r3, #30
 8004a8a:	d413      	bmi.n	8004ab4 <_printf_i+0x234>
 8004a8c:	68e0      	ldr	r0, [r4, #12]
 8004a8e:	9b03      	ldr	r3, [sp, #12]
 8004a90:	4298      	cmp	r0, r3
 8004a92:	bfb8      	it	lt
 8004a94:	4618      	movlt	r0, r3
 8004a96:	e7a6      	b.n	80049e6 <_printf_i+0x166>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	4632      	mov	r2, r6
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	47d0      	blx	sl
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d09d      	beq.n	80049e2 <_printf_i+0x162>
 8004aa6:	3501      	adds	r5, #1
 8004aa8:	68e3      	ldr	r3, [r4, #12]
 8004aaa:	9903      	ldr	r1, [sp, #12]
 8004aac:	1a5b      	subs	r3, r3, r1
 8004aae:	42ab      	cmp	r3, r5
 8004ab0:	dcf2      	bgt.n	8004a98 <_printf_i+0x218>
 8004ab2:	e7eb      	b.n	8004a8c <_printf_i+0x20c>
 8004ab4:	2500      	movs	r5, #0
 8004ab6:	f104 0619 	add.w	r6, r4, #25
 8004aba:	e7f5      	b.n	8004aa8 <_printf_i+0x228>
 8004abc:	0800718c 	.word	0x0800718c
 8004ac0:	0800719d 	.word	0x0800719d

08004ac4 <std>:
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	4604      	mov	r4, r0
 8004aca:	e9c0 3300 	strd	r3, r3, [r0]
 8004ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ad2:	6083      	str	r3, [r0, #8]
 8004ad4:	8181      	strh	r1, [r0, #12]
 8004ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ad8:	81c2      	strh	r2, [r0, #14]
 8004ada:	6183      	str	r3, [r0, #24]
 8004adc:	4619      	mov	r1, r3
 8004ade:	2208      	movs	r2, #8
 8004ae0:	305c      	adds	r0, #92	; 0x5c
 8004ae2:	f000 f9e5 	bl	8004eb0 <memset>
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <std+0x38>)
 8004ae8:	6224      	str	r4, [r4, #32]
 8004aea:	6263      	str	r3, [r4, #36]	; 0x24
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <std+0x3c>)
 8004aee:	62a3      	str	r3, [r4, #40]	; 0x28
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <std+0x40>)
 8004af2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <std+0x44>)
 8004af6:	6323      	str	r3, [r4, #48]	; 0x30
 8004af8:	bd10      	pop	{r4, pc}
 8004afa:	bf00      	nop
 8004afc:	08004d01 	.word	0x08004d01
 8004b00:	08004d23 	.word	0x08004d23
 8004b04:	08004d5b 	.word	0x08004d5b
 8004b08:	08004d7f 	.word	0x08004d7f

08004b0c <stdio_exit_handler>:
 8004b0c:	4a02      	ldr	r2, [pc, #8]	; (8004b18 <stdio_exit_handler+0xc>)
 8004b0e:	4903      	ldr	r1, [pc, #12]	; (8004b1c <stdio_exit_handler+0x10>)
 8004b10:	4803      	ldr	r0, [pc, #12]	; (8004b20 <stdio_exit_handler+0x14>)
 8004b12:	f000 b869 	b.w	8004be8 <_fwalk_sglue>
 8004b16:	bf00      	nop
 8004b18:	2000000c 	.word	0x2000000c
 8004b1c:	08006931 	.word	0x08006931
 8004b20:	20000018 	.word	0x20000018

08004b24 <cleanup_stdio>:
 8004b24:	6841      	ldr	r1, [r0, #4]
 8004b26:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <cleanup_stdio+0x34>)
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	d001      	beq.n	8004b34 <cleanup_stdio+0x10>
 8004b30:	f001 fefe 	bl	8006930 <_fflush_r>
 8004b34:	68a1      	ldr	r1, [r4, #8]
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <cleanup_stdio+0x38>)
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	d002      	beq.n	8004b42 <cleanup_stdio+0x1e>
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f001 fef7 	bl	8006930 <_fflush_r>
 8004b42:	68e1      	ldr	r1, [r4, #12]
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <cleanup_stdio+0x3c>)
 8004b46:	4299      	cmp	r1, r3
 8004b48:	d004      	beq.n	8004b54 <cleanup_stdio+0x30>
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b50:	f001 beee 	b.w	8006930 <_fflush_r>
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	20000294 	.word	0x20000294
 8004b5c:	200002fc 	.word	0x200002fc
 8004b60:	20000364 	.word	0x20000364

08004b64 <global_stdio_init.part.0>:
 8004b64:	b510      	push	{r4, lr}
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <global_stdio_init.part.0+0x30>)
 8004b68:	4c0b      	ldr	r4, [pc, #44]	; (8004b98 <global_stdio_init.part.0+0x34>)
 8004b6a:	4a0c      	ldr	r2, [pc, #48]	; (8004b9c <global_stdio_init.part.0+0x38>)
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	2104      	movs	r1, #4
 8004b72:	2200      	movs	r2, #0
 8004b74:	f7ff ffa6 	bl	8004ac4 <std>
 8004b78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	2109      	movs	r1, #9
 8004b80:	f7ff ffa0 	bl	8004ac4 <std>
 8004b84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b88:	2202      	movs	r2, #2
 8004b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b8e:	2112      	movs	r1, #18
 8004b90:	f7ff bf98 	b.w	8004ac4 <std>
 8004b94:	200003cc 	.word	0x200003cc
 8004b98:	20000294 	.word	0x20000294
 8004b9c:	08004b0d 	.word	0x08004b0d

08004ba0 <__sfp_lock_acquire>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	; (8004ba8 <__sfp_lock_acquire+0x8>)
 8004ba2:	f000 ba01 	b.w	8004fa8 <__retarget_lock_acquire_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	200003d5 	.word	0x200003d5

08004bac <__sfp_lock_release>:
 8004bac:	4801      	ldr	r0, [pc, #4]	; (8004bb4 <__sfp_lock_release+0x8>)
 8004bae:	f000 b9fc 	b.w	8004faa <__retarget_lock_release_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	200003d5 	.word	0x200003d5

08004bb8 <__sinit>:
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	4604      	mov	r4, r0
 8004bbc:	f7ff fff0 	bl	8004ba0 <__sfp_lock_acquire>
 8004bc0:	6a23      	ldr	r3, [r4, #32]
 8004bc2:	b11b      	cbz	r3, 8004bcc <__sinit+0x14>
 8004bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc8:	f7ff bff0 	b.w	8004bac <__sfp_lock_release>
 8004bcc:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <__sinit+0x28>)
 8004bce:	6223      	str	r3, [r4, #32]
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <__sinit+0x2c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f5      	bne.n	8004bc4 <__sinit+0xc>
 8004bd8:	f7ff ffc4 	bl	8004b64 <global_stdio_init.part.0>
 8004bdc:	e7f2      	b.n	8004bc4 <__sinit+0xc>
 8004bde:	bf00      	nop
 8004be0:	08004b25 	.word	0x08004b25
 8004be4:	200003cc 	.word	0x200003cc

08004be8 <_fwalk_sglue>:
 8004be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bec:	4607      	mov	r7, r0
 8004bee:	4688      	mov	r8, r1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8004bfc:	d505      	bpl.n	8004c0a <_fwalk_sglue+0x22>
 8004bfe:	6824      	ldr	r4, [r4, #0]
 8004c00:	2c00      	cmp	r4, #0
 8004c02:	d1f7      	bne.n	8004bf4 <_fwalk_sglue+0xc>
 8004c04:	4630      	mov	r0, r6
 8004c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0a:	89ab      	ldrh	r3, [r5, #12]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d907      	bls.n	8004c20 <_fwalk_sglue+0x38>
 8004c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c14:	3301      	adds	r3, #1
 8004c16:	d003      	beq.n	8004c20 <_fwalk_sglue+0x38>
 8004c18:	4629      	mov	r1, r5
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	47c0      	blx	r8
 8004c1e:	4306      	orrs	r6, r0
 8004c20:	3568      	adds	r5, #104	; 0x68
 8004c22:	e7e9      	b.n	8004bf8 <_fwalk_sglue+0x10>

08004c24 <iprintf>:
 8004c24:	b40f      	push	{r0, r1, r2, r3}
 8004c26:	b507      	push	{r0, r1, r2, lr}
 8004c28:	4906      	ldr	r1, [pc, #24]	; (8004c44 <iprintf+0x20>)
 8004c2a:	ab04      	add	r3, sp, #16
 8004c2c:	6808      	ldr	r0, [r1, #0]
 8004c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c32:	6881      	ldr	r1, [r0, #8]
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	f001 fcdf 	bl	80065f8 <_vfiprintf_r>
 8004c3a:	b003      	add	sp, #12
 8004c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c40:	b004      	add	sp, #16
 8004c42:	4770      	bx	lr
 8004c44:	20000064 	.word	0x20000064

08004c48 <_puts_r>:
 8004c48:	6a03      	ldr	r3, [r0, #32]
 8004c4a:	b570      	push	{r4, r5, r6, lr}
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	460e      	mov	r6, r1
 8004c50:	6884      	ldr	r4, [r0, #8]
 8004c52:	b90b      	cbnz	r3, 8004c58 <_puts_r+0x10>
 8004c54:	f7ff ffb0 	bl	8004bb8 <__sinit>
 8004c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c5a:	07db      	lsls	r3, r3, #31
 8004c5c:	d405      	bmi.n	8004c6a <_puts_r+0x22>
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	0598      	lsls	r0, r3, #22
 8004c62:	d402      	bmi.n	8004c6a <_puts_r+0x22>
 8004c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c66:	f000 f99f 	bl	8004fa8 <__retarget_lock_acquire_recursive>
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	0719      	lsls	r1, r3, #28
 8004c6e:	d513      	bpl.n	8004c98 <_puts_r+0x50>
 8004c70:	6923      	ldr	r3, [r4, #16]
 8004c72:	b18b      	cbz	r3, 8004c98 <_puts_r+0x50>
 8004c74:	3e01      	subs	r6, #1
 8004c76:	68a3      	ldr	r3, [r4, #8]
 8004c78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	60a3      	str	r3, [r4, #8]
 8004c80:	b9e9      	cbnz	r1, 8004cbe <_puts_r+0x76>
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	da2e      	bge.n	8004ce4 <_puts_r+0x9c>
 8004c86:	4622      	mov	r2, r4
 8004c88:	210a      	movs	r1, #10
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f000 f87b 	bl	8004d86 <__swbuf_r>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d007      	beq.n	8004ca4 <_puts_r+0x5c>
 8004c94:	250a      	movs	r5, #10
 8004c96:	e007      	b.n	8004ca8 <_puts_r+0x60>
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 f8b0 	bl	8004e00 <__swsetup_r>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d0e7      	beq.n	8004c74 <_puts_r+0x2c>
 8004ca4:	f04f 35ff 	mov.w	r5, #4294967295
 8004ca8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004caa:	07da      	lsls	r2, r3, #31
 8004cac:	d405      	bmi.n	8004cba <_puts_r+0x72>
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	059b      	lsls	r3, r3, #22
 8004cb2:	d402      	bmi.n	8004cba <_puts_r+0x72>
 8004cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cb6:	f000 f978 	bl	8004faa <__retarget_lock_release_recursive>
 8004cba:	4628      	mov	r0, r5
 8004cbc:	bd70      	pop	{r4, r5, r6, pc}
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	da04      	bge.n	8004ccc <_puts_r+0x84>
 8004cc2:	69a2      	ldr	r2, [r4, #24]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	dc06      	bgt.n	8004cd6 <_puts_r+0x8e>
 8004cc8:	290a      	cmp	r1, #10
 8004cca:	d004      	beq.n	8004cd6 <_puts_r+0x8e>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	6022      	str	r2, [r4, #0]
 8004cd2:	7019      	strb	r1, [r3, #0]
 8004cd4:	e7cf      	b.n	8004c76 <_puts_r+0x2e>
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f000 f854 	bl	8004d86 <__swbuf_r>
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d1c9      	bne.n	8004c76 <_puts_r+0x2e>
 8004ce2:	e7df      	b.n	8004ca4 <_puts_r+0x5c>
 8004ce4:	250a      	movs	r5, #10
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	6022      	str	r2, [r4, #0]
 8004cec:	701d      	strb	r5, [r3, #0]
 8004cee:	e7db      	b.n	8004ca8 <_puts_r+0x60>

08004cf0 <puts>:
 8004cf0:	4b02      	ldr	r3, [pc, #8]	; (8004cfc <puts+0xc>)
 8004cf2:	4601      	mov	r1, r0
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	f7ff bfa7 	b.w	8004c48 <_puts_r>
 8004cfa:	bf00      	nop
 8004cfc:	20000064 	.word	0x20000064

08004d00 <__sread>:
 8004d00:	b510      	push	{r4, lr}
 8004d02:	460c      	mov	r4, r1
 8004d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d08:	f000 f900 	bl	8004f0c <_read_r>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	bfab      	itete	ge
 8004d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d12:	89a3      	ldrhlt	r3, [r4, #12]
 8004d14:	181b      	addge	r3, r3, r0
 8004d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d1a:	bfac      	ite	ge
 8004d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d1e:	81a3      	strhlt	r3, [r4, #12]
 8004d20:	bd10      	pop	{r4, pc}

08004d22 <__swrite>:
 8004d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d26:	461f      	mov	r7, r3
 8004d28:	898b      	ldrh	r3, [r1, #12]
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	05db      	lsls	r3, r3, #23
 8004d2e:	460c      	mov	r4, r1
 8004d30:	4616      	mov	r6, r2
 8004d32:	d505      	bpl.n	8004d40 <__swrite+0x1e>
 8004d34:	2302      	movs	r3, #2
 8004d36:	2200      	movs	r2, #0
 8004d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3c:	f000 f8d4 	bl	8004ee8 <_lseek_r>
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	4632      	mov	r2, r6
 8004d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d56:	f000 b8eb 	b.w	8004f30 <_write_r>

08004d5a <__sseek>:
 8004d5a:	b510      	push	{r4, lr}
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d62:	f000 f8c1 	bl	8004ee8 <_lseek_r>
 8004d66:	1c43      	adds	r3, r0, #1
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	bf15      	itete	ne
 8004d6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d76:	81a3      	strheq	r3, [r4, #12]
 8004d78:	bf18      	it	ne
 8004d7a:	81a3      	strhne	r3, [r4, #12]
 8004d7c:	bd10      	pop	{r4, pc}

08004d7e <__sclose>:
 8004d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d82:	f000 b8a1 	b.w	8004ec8 <_close_r>

08004d86 <__swbuf_r>:
 8004d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d88:	460e      	mov	r6, r1
 8004d8a:	4614      	mov	r4, r2
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	b118      	cbz	r0, 8004d98 <__swbuf_r+0x12>
 8004d90:	6a03      	ldr	r3, [r0, #32]
 8004d92:	b90b      	cbnz	r3, 8004d98 <__swbuf_r+0x12>
 8004d94:	f7ff ff10 	bl	8004bb8 <__sinit>
 8004d98:	69a3      	ldr	r3, [r4, #24]
 8004d9a:	60a3      	str	r3, [r4, #8]
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	071a      	lsls	r2, r3, #28
 8004da0:	d525      	bpl.n	8004dee <__swbuf_r+0x68>
 8004da2:	6923      	ldr	r3, [r4, #16]
 8004da4:	b31b      	cbz	r3, 8004dee <__swbuf_r+0x68>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	6922      	ldr	r2, [r4, #16]
 8004daa:	b2f6      	uxtb	r6, r6
 8004dac:	1a98      	subs	r0, r3, r2
 8004dae:	6963      	ldr	r3, [r4, #20]
 8004db0:	4637      	mov	r7, r6
 8004db2:	4283      	cmp	r3, r0
 8004db4:	dc04      	bgt.n	8004dc0 <__swbuf_r+0x3a>
 8004db6:	4621      	mov	r1, r4
 8004db8:	4628      	mov	r0, r5
 8004dba:	f001 fdb9 	bl	8006930 <_fflush_r>
 8004dbe:	b9e0      	cbnz	r0, 8004dfa <__swbuf_r+0x74>
 8004dc0:	68a3      	ldr	r3, [r4, #8]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	60a3      	str	r3, [r4, #8]
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	6022      	str	r2, [r4, #0]
 8004dcc:	701e      	strb	r6, [r3, #0]
 8004dce:	6962      	ldr	r2, [r4, #20]
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d004      	beq.n	8004de0 <__swbuf_r+0x5a>
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	07db      	lsls	r3, r3, #31
 8004dda:	d506      	bpl.n	8004dea <__swbuf_r+0x64>
 8004ddc:	2e0a      	cmp	r6, #10
 8004dde:	d104      	bne.n	8004dea <__swbuf_r+0x64>
 8004de0:	4621      	mov	r1, r4
 8004de2:	4628      	mov	r0, r5
 8004de4:	f001 fda4 	bl	8006930 <_fflush_r>
 8004de8:	b938      	cbnz	r0, 8004dfa <__swbuf_r+0x74>
 8004dea:	4638      	mov	r0, r7
 8004dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dee:	4621      	mov	r1, r4
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 f805 	bl	8004e00 <__swsetup_r>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d0d5      	beq.n	8004da6 <__swbuf_r+0x20>
 8004dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8004dfe:	e7f4      	b.n	8004dea <__swbuf_r+0x64>

08004e00 <__swsetup_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4b2a      	ldr	r3, [pc, #168]	; (8004eac <__swsetup_r+0xac>)
 8004e04:	4605      	mov	r5, r0
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	460c      	mov	r4, r1
 8004e0a:	b118      	cbz	r0, 8004e14 <__swsetup_r+0x14>
 8004e0c:	6a03      	ldr	r3, [r0, #32]
 8004e0e:	b90b      	cbnz	r3, 8004e14 <__swsetup_r+0x14>
 8004e10:	f7ff fed2 	bl	8004bb8 <__sinit>
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e1a:	0718      	lsls	r0, r3, #28
 8004e1c:	d422      	bmi.n	8004e64 <__swsetup_r+0x64>
 8004e1e:	06d9      	lsls	r1, r3, #27
 8004e20:	d407      	bmi.n	8004e32 <__swsetup_r+0x32>
 8004e22:	2309      	movs	r3, #9
 8004e24:	602b      	str	r3, [r5, #0]
 8004e26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2e:	81a3      	strh	r3, [r4, #12]
 8004e30:	e034      	b.n	8004e9c <__swsetup_r+0x9c>
 8004e32:	0758      	lsls	r0, r3, #29
 8004e34:	d512      	bpl.n	8004e5c <__swsetup_r+0x5c>
 8004e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e38:	b141      	cbz	r1, 8004e4c <__swsetup_r+0x4c>
 8004e3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e3e:	4299      	cmp	r1, r3
 8004e40:	d002      	beq.n	8004e48 <__swsetup_r+0x48>
 8004e42:	4628      	mov	r0, r5
 8004e44:	f000 ff3c 	bl	8005cc0 <_free_r>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6363      	str	r3, [r4, #52]	; 0x34
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	2300      	movs	r3, #0
 8004e56:	6063      	str	r3, [r4, #4]
 8004e58:	6923      	ldr	r3, [r4, #16]
 8004e5a:	6023      	str	r3, [r4, #0]
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f043 0308 	orr.w	r3, r3, #8
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	b94b      	cbnz	r3, 8004e7c <__swsetup_r+0x7c>
 8004e68:	89a3      	ldrh	r3, [r4, #12]
 8004e6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e72:	d003      	beq.n	8004e7c <__swsetup_r+0x7c>
 8004e74:	4621      	mov	r1, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	f001 fda7 	bl	80069ca <__smakebuf_r>
 8004e7c:	89a0      	ldrh	r0, [r4, #12]
 8004e7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e82:	f010 0301 	ands.w	r3, r0, #1
 8004e86:	d00a      	beq.n	8004e9e <__swsetup_r+0x9e>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60a3      	str	r3, [r4, #8]
 8004e8c:	6963      	ldr	r3, [r4, #20]
 8004e8e:	425b      	negs	r3, r3
 8004e90:	61a3      	str	r3, [r4, #24]
 8004e92:	6923      	ldr	r3, [r4, #16]
 8004e94:	b943      	cbnz	r3, 8004ea8 <__swsetup_r+0xa8>
 8004e96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e9a:	d1c4      	bne.n	8004e26 <__swsetup_r+0x26>
 8004e9c:	bd38      	pop	{r3, r4, r5, pc}
 8004e9e:	0781      	lsls	r1, r0, #30
 8004ea0:	bf58      	it	pl
 8004ea2:	6963      	ldrpl	r3, [r4, #20]
 8004ea4:	60a3      	str	r3, [r4, #8]
 8004ea6:	e7f4      	b.n	8004e92 <__swsetup_r+0x92>
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	e7f7      	b.n	8004e9c <__swsetup_r+0x9c>
 8004eac:	20000064 	.word	0x20000064

08004eb0 <memset>:
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4402      	add	r2, r0
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d100      	bne.n	8004eba <memset+0xa>
 8004eb8:	4770      	bx	lr
 8004eba:	f803 1b01 	strb.w	r1, [r3], #1
 8004ebe:	e7f9      	b.n	8004eb4 <memset+0x4>

08004ec0 <_localeconv_r>:
 8004ec0:	4800      	ldr	r0, [pc, #0]	; (8004ec4 <_localeconv_r+0x4>)
 8004ec2:	4770      	bx	lr
 8004ec4:	20000158 	.word	0x20000158

08004ec8 <_close_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	2300      	movs	r3, #0
 8004ecc:	4d05      	ldr	r5, [pc, #20]	; (8004ee4 <_close_r+0x1c>)
 8004ece:	4604      	mov	r4, r0
 8004ed0:	4608      	mov	r0, r1
 8004ed2:	602b      	str	r3, [r5, #0]
 8004ed4:	f7fc ff4f 	bl	8001d76 <_close>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d102      	bne.n	8004ee2 <_close_r+0x1a>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	b103      	cbz	r3, 8004ee2 <_close_r+0x1a>
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	200003d0 	.word	0x200003d0

08004ee8 <_lseek_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4604      	mov	r4, r0
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4d05      	ldr	r5, [pc, #20]	; (8004f08 <_lseek_r+0x20>)
 8004ef4:	602a      	str	r2, [r5, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f7fc ff61 	bl	8001dbe <_lseek>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_lseek_r+0x1e>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_lseek_r+0x1e>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	200003d0 	.word	0x200003d0

08004f0c <_read_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	4604      	mov	r4, r0
 8004f10:	4608      	mov	r0, r1
 8004f12:	4611      	mov	r1, r2
 8004f14:	2200      	movs	r2, #0
 8004f16:	4d05      	ldr	r5, [pc, #20]	; (8004f2c <_read_r+0x20>)
 8004f18:	602a      	str	r2, [r5, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f7fc fef2 	bl	8001d04 <_read>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d102      	bne.n	8004f2a <_read_r+0x1e>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	b103      	cbz	r3, 8004f2a <_read_r+0x1e>
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	200003d0 	.word	0x200003d0

08004f30 <_write_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4604      	mov	r4, r0
 8004f34:	4608      	mov	r0, r1
 8004f36:	4611      	mov	r1, r2
 8004f38:	2200      	movs	r2, #0
 8004f3a:	4d05      	ldr	r5, [pc, #20]	; (8004f50 <_write_r+0x20>)
 8004f3c:	602a      	str	r2, [r5, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f7fc fefd 	bl	8001d3e <_write>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d102      	bne.n	8004f4e <_write_r+0x1e>
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	b103      	cbz	r3, 8004f4e <_write_r+0x1e>
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	200003d0 	.word	0x200003d0

08004f54 <__errno>:
 8004f54:	4b01      	ldr	r3, [pc, #4]	; (8004f5c <__errno+0x8>)
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	20000064 	.word	0x20000064

08004f60 <__libc_init_array>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	2600      	movs	r6, #0
 8004f64:	4d0c      	ldr	r5, [pc, #48]	; (8004f98 <__libc_init_array+0x38>)
 8004f66:	4c0d      	ldr	r4, [pc, #52]	; (8004f9c <__libc_init_array+0x3c>)
 8004f68:	1b64      	subs	r4, r4, r5
 8004f6a:	10a4      	asrs	r4, r4, #2
 8004f6c:	42a6      	cmp	r6, r4
 8004f6e:	d109      	bne.n	8004f84 <__libc_init_array+0x24>
 8004f70:	f002 f8ac 	bl	80070cc <_init>
 8004f74:	2600      	movs	r6, #0
 8004f76:	4d0a      	ldr	r5, [pc, #40]	; (8004fa0 <__libc_init_array+0x40>)
 8004f78:	4c0a      	ldr	r4, [pc, #40]	; (8004fa4 <__libc_init_array+0x44>)
 8004f7a:	1b64      	subs	r4, r4, r5
 8004f7c:	10a4      	asrs	r4, r4, #2
 8004f7e:	42a6      	cmp	r6, r4
 8004f80:	d105      	bne.n	8004f8e <__libc_init_array+0x2e>
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
 8004f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f88:	4798      	blx	r3
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7ee      	b.n	8004f6c <__libc_init_array+0xc>
 8004f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f92:	4798      	blx	r3
 8004f94:	3601      	adds	r6, #1
 8004f96:	e7f2      	b.n	8004f7e <__libc_init_array+0x1e>
 8004f98:	08007560 	.word	0x08007560
 8004f9c:	08007560 	.word	0x08007560
 8004fa0:	08007560 	.word	0x08007560
 8004fa4:	08007564 	.word	0x08007564

08004fa8 <__retarget_lock_acquire_recursive>:
 8004fa8:	4770      	bx	lr

08004faa <__retarget_lock_release_recursive>:
 8004faa:	4770      	bx	lr

08004fac <memchr>:
 8004fac:	4603      	mov	r3, r0
 8004fae:	b510      	push	{r4, lr}
 8004fb0:	b2c9      	uxtb	r1, r1
 8004fb2:	4402      	add	r2, r0
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	d101      	bne.n	8004fbe <memchr+0x12>
 8004fba:	2000      	movs	r0, #0
 8004fbc:	e003      	b.n	8004fc6 <memchr+0x1a>
 8004fbe:	7804      	ldrb	r4, [r0, #0]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	428c      	cmp	r4, r1
 8004fc4:	d1f6      	bne.n	8004fb4 <memchr+0x8>
 8004fc6:	bd10      	pop	{r4, pc}

08004fc8 <memcpy>:
 8004fc8:	440a      	add	r2, r1
 8004fca:	4291      	cmp	r1, r2
 8004fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fd0:	d100      	bne.n	8004fd4 <memcpy+0xc>
 8004fd2:	4770      	bx	lr
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fda:	4291      	cmp	r1, r2
 8004fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe0:	d1f9      	bne.n	8004fd6 <memcpy+0xe>
 8004fe2:	bd10      	pop	{r4, pc}

08004fe4 <quorem>:
 8004fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe8:	6903      	ldr	r3, [r0, #16]
 8004fea:	690c      	ldr	r4, [r1, #16]
 8004fec:	4607      	mov	r7, r0
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	db7f      	blt.n	80050f2 <quorem+0x10e>
 8004ff2:	3c01      	subs	r4, #1
 8004ff4:	f100 0514 	add.w	r5, r0, #20
 8004ff8:	f101 0814 	add.w	r8, r1, #20
 8004ffc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005006:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800500a:	3301      	adds	r3, #1
 800500c:	429a      	cmp	r2, r3
 800500e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005012:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005016:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800501a:	d331      	bcc.n	8005080 <quorem+0x9c>
 800501c:	f04f 0e00 	mov.w	lr, #0
 8005020:	4640      	mov	r0, r8
 8005022:	46ac      	mov	ip, r5
 8005024:	46f2      	mov	sl, lr
 8005026:	f850 2b04 	ldr.w	r2, [r0], #4
 800502a:	b293      	uxth	r3, r2
 800502c:	fb06 e303 	mla	r3, r6, r3, lr
 8005030:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005034:	0c1a      	lsrs	r2, r3, #16
 8005036:	b29b      	uxth	r3, r3
 8005038:	fb06 220e 	mla	r2, r6, lr, r2
 800503c:	ebaa 0303 	sub.w	r3, sl, r3
 8005040:	f8dc a000 	ldr.w	sl, [ip]
 8005044:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005048:	fa1f fa8a 	uxth.w	sl, sl
 800504c:	4453      	add	r3, sl
 800504e:	f8dc a000 	ldr.w	sl, [ip]
 8005052:	b292      	uxth	r2, r2
 8005054:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005058:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800505c:	b29b      	uxth	r3, r3
 800505e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005062:	4581      	cmp	r9, r0
 8005064:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005068:	f84c 3b04 	str.w	r3, [ip], #4
 800506c:	d2db      	bcs.n	8005026 <quorem+0x42>
 800506e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005072:	b92b      	cbnz	r3, 8005080 <quorem+0x9c>
 8005074:	9b01      	ldr	r3, [sp, #4]
 8005076:	3b04      	subs	r3, #4
 8005078:	429d      	cmp	r5, r3
 800507a:	461a      	mov	r2, r3
 800507c:	d32d      	bcc.n	80050da <quorem+0xf6>
 800507e:	613c      	str	r4, [r7, #16]
 8005080:	4638      	mov	r0, r7
 8005082:	f001 f993 	bl	80063ac <__mcmp>
 8005086:	2800      	cmp	r0, #0
 8005088:	db23      	blt.n	80050d2 <quorem+0xee>
 800508a:	4629      	mov	r1, r5
 800508c:	2000      	movs	r0, #0
 800508e:	3601      	adds	r6, #1
 8005090:	f858 2b04 	ldr.w	r2, [r8], #4
 8005094:	f8d1 c000 	ldr.w	ip, [r1]
 8005098:	b293      	uxth	r3, r2
 800509a:	1ac3      	subs	r3, r0, r3
 800509c:	0c12      	lsrs	r2, r2, #16
 800509e:	fa1f f08c 	uxth.w	r0, ip
 80050a2:	4403      	add	r3, r0
 80050a4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80050a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050b2:	45c1      	cmp	r9, r8
 80050b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80050b8:	f841 3b04 	str.w	r3, [r1], #4
 80050bc:	d2e8      	bcs.n	8005090 <quorem+0xac>
 80050be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050c6:	b922      	cbnz	r2, 80050d2 <quorem+0xee>
 80050c8:	3b04      	subs	r3, #4
 80050ca:	429d      	cmp	r5, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	d30a      	bcc.n	80050e6 <quorem+0x102>
 80050d0:	613c      	str	r4, [r7, #16]
 80050d2:	4630      	mov	r0, r6
 80050d4:	b003      	add	sp, #12
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	3b04      	subs	r3, #4
 80050de:	2a00      	cmp	r2, #0
 80050e0:	d1cd      	bne.n	800507e <quorem+0x9a>
 80050e2:	3c01      	subs	r4, #1
 80050e4:	e7c8      	b.n	8005078 <quorem+0x94>
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	3b04      	subs	r3, #4
 80050ea:	2a00      	cmp	r2, #0
 80050ec:	d1f0      	bne.n	80050d0 <quorem+0xec>
 80050ee:	3c01      	subs	r4, #1
 80050f0:	e7eb      	b.n	80050ca <quorem+0xe6>
 80050f2:	2000      	movs	r0, #0
 80050f4:	e7ee      	b.n	80050d4 <quorem+0xf0>
	...

080050f8 <_dtoa_r>:
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	4616      	mov	r6, r2
 80050fe:	461f      	mov	r7, r3
 8005100:	69c4      	ldr	r4, [r0, #28]
 8005102:	b099      	sub	sp, #100	; 0x64
 8005104:	4605      	mov	r5, r0
 8005106:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800510a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800510e:	b974      	cbnz	r4, 800512e <_dtoa_r+0x36>
 8005110:	2010      	movs	r0, #16
 8005112:	f000 fe1d 	bl	8005d50 <malloc>
 8005116:	4602      	mov	r2, r0
 8005118:	61e8      	str	r0, [r5, #28]
 800511a:	b920      	cbnz	r0, 8005126 <_dtoa_r+0x2e>
 800511c:	21ef      	movs	r1, #239	; 0xef
 800511e:	4bac      	ldr	r3, [pc, #688]	; (80053d0 <_dtoa_r+0x2d8>)
 8005120:	48ac      	ldr	r0, [pc, #688]	; (80053d4 <_dtoa_r+0x2dc>)
 8005122:	f001 fcc1 	bl	8006aa8 <__assert_func>
 8005126:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800512a:	6004      	str	r4, [r0, #0]
 800512c:	60c4      	str	r4, [r0, #12]
 800512e:	69eb      	ldr	r3, [r5, #28]
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	b151      	cbz	r1, 800514a <_dtoa_r+0x52>
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	2301      	movs	r3, #1
 8005138:	4093      	lsls	r3, r2
 800513a:	604a      	str	r2, [r1, #4]
 800513c:	608b      	str	r3, [r1, #8]
 800513e:	4628      	mov	r0, r5
 8005140:	f000 fefa 	bl	8005f38 <_Bfree>
 8005144:	2200      	movs	r2, #0
 8005146:	69eb      	ldr	r3, [r5, #28]
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	1e3b      	subs	r3, r7, #0
 800514c:	bfaf      	iteee	ge
 800514e:	2300      	movge	r3, #0
 8005150:	2201      	movlt	r2, #1
 8005152:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005156:	9305      	strlt	r3, [sp, #20]
 8005158:	bfa8      	it	ge
 800515a:	f8c8 3000 	strge.w	r3, [r8]
 800515e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005162:	4b9d      	ldr	r3, [pc, #628]	; (80053d8 <_dtoa_r+0x2e0>)
 8005164:	bfb8      	it	lt
 8005166:	f8c8 2000 	strlt.w	r2, [r8]
 800516a:	ea33 0309 	bics.w	r3, r3, r9
 800516e:	d119      	bne.n	80051a4 <_dtoa_r+0xac>
 8005170:	f242 730f 	movw	r3, #9999	; 0x270f
 8005174:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800517c:	4333      	orrs	r3, r6
 800517e:	f000 8589 	beq.w	8005c94 <_dtoa_r+0xb9c>
 8005182:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005184:	b953      	cbnz	r3, 800519c <_dtoa_r+0xa4>
 8005186:	4b95      	ldr	r3, [pc, #596]	; (80053dc <_dtoa_r+0x2e4>)
 8005188:	e023      	b.n	80051d2 <_dtoa_r+0xda>
 800518a:	4b95      	ldr	r3, [pc, #596]	; (80053e0 <_dtoa_r+0x2e8>)
 800518c:	9303      	str	r3, [sp, #12]
 800518e:	3308      	adds	r3, #8
 8005190:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	9803      	ldr	r0, [sp, #12]
 8005196:	b019      	add	sp, #100	; 0x64
 8005198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519c:	4b8f      	ldr	r3, [pc, #572]	; (80053dc <_dtoa_r+0x2e4>)
 800519e:	9303      	str	r3, [sp, #12]
 80051a0:	3303      	adds	r3, #3
 80051a2:	e7f5      	b.n	8005190 <_dtoa_r+0x98>
 80051a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80051a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80051ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051b0:	2200      	movs	r2, #0
 80051b2:	2300      	movs	r3, #0
 80051b4:	f7fb fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80051b8:	4680      	mov	r8, r0
 80051ba:	b160      	cbz	r0, 80051d6 <_dtoa_r+0xde>
 80051bc:	2301      	movs	r3, #1
 80051be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8562 	beq.w	8005c8e <_dtoa_r+0xb96>
 80051ca:	4b86      	ldr	r3, [pc, #536]	; (80053e4 <_dtoa_r+0x2ec>)
 80051cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	9303      	str	r3, [sp, #12]
 80051d4:	e7de      	b.n	8005194 <_dtoa_r+0x9c>
 80051d6:	ab16      	add	r3, sp, #88	; 0x58
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	ab17      	add	r3, sp, #92	; 0x5c
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	4628      	mov	r0, r5
 80051e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051e4:	f001 f98a 	bl	80064fc <__d2b>
 80051e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80051ec:	4682      	mov	sl, r0
 80051ee:	2c00      	cmp	r4, #0
 80051f0:	d07e      	beq.n	80052f0 <_dtoa_r+0x1f8>
 80051f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80051fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005200:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005204:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005208:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800520c:	4619      	mov	r1, r3
 800520e:	2200      	movs	r2, #0
 8005210:	4b75      	ldr	r3, [pc, #468]	; (80053e8 <_dtoa_r+0x2f0>)
 8005212:	f7fa ffa9 	bl	8000168 <__aeabi_dsub>
 8005216:	a368      	add	r3, pc, #416	; (adr r3, 80053b8 <_dtoa_r+0x2c0>)
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f7fb f95c 	bl	80004d8 <__aeabi_dmul>
 8005220:	a367      	add	r3, pc, #412	; (adr r3, 80053c0 <_dtoa_r+0x2c8>)
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	f7fa ffa1 	bl	800016c <__adddf3>
 800522a:	4606      	mov	r6, r0
 800522c:	4620      	mov	r0, r4
 800522e:	460f      	mov	r7, r1
 8005230:	f7fb f8e8 	bl	8000404 <__aeabi_i2d>
 8005234:	a364      	add	r3, pc, #400	; (adr r3, 80053c8 <_dtoa_r+0x2d0>)
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f7fb f94d 	bl	80004d8 <__aeabi_dmul>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4630      	mov	r0, r6
 8005244:	4639      	mov	r1, r7
 8005246:	f7fa ff91 	bl	800016c <__adddf3>
 800524a:	4606      	mov	r6, r0
 800524c:	460f      	mov	r7, r1
 800524e:	f7fb fbf3 	bl	8000a38 <__aeabi_d2iz>
 8005252:	2200      	movs	r2, #0
 8005254:	4683      	mov	fp, r0
 8005256:	2300      	movs	r3, #0
 8005258:	4630      	mov	r0, r6
 800525a:	4639      	mov	r1, r7
 800525c:	f7fb fbae 	bl	80009bc <__aeabi_dcmplt>
 8005260:	b148      	cbz	r0, 8005276 <_dtoa_r+0x17e>
 8005262:	4658      	mov	r0, fp
 8005264:	f7fb f8ce 	bl	8000404 <__aeabi_i2d>
 8005268:	4632      	mov	r2, r6
 800526a:	463b      	mov	r3, r7
 800526c:	f7fb fb9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005270:	b908      	cbnz	r0, 8005276 <_dtoa_r+0x17e>
 8005272:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005276:	f1bb 0f16 	cmp.w	fp, #22
 800527a:	d857      	bhi.n	800532c <_dtoa_r+0x234>
 800527c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005280:	4b5a      	ldr	r3, [pc, #360]	; (80053ec <_dtoa_r+0x2f4>)
 8005282:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f7fb fb97 	bl	80009bc <__aeabi_dcmplt>
 800528e:	2800      	cmp	r0, #0
 8005290:	d04e      	beq.n	8005330 <_dtoa_r+0x238>
 8005292:	2300      	movs	r3, #0
 8005294:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005298:	930f      	str	r3, [sp, #60]	; 0x3c
 800529a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800529c:	1b1b      	subs	r3, r3, r4
 800529e:	1e5a      	subs	r2, r3, #1
 80052a0:	bf46      	itte	mi
 80052a2:	f1c3 0901 	rsbmi	r9, r3, #1
 80052a6:	2300      	movmi	r3, #0
 80052a8:	f04f 0900 	movpl.w	r9, #0
 80052ac:	9209      	str	r2, [sp, #36]	; 0x24
 80052ae:	bf48      	it	mi
 80052b0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80052b2:	f1bb 0f00 	cmp.w	fp, #0
 80052b6:	db3d      	blt.n	8005334 <_dtoa_r+0x23c>
 80052b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80052be:	445b      	add	r3, fp
 80052c0:	9309      	str	r3, [sp, #36]	; 0x24
 80052c2:	2300      	movs	r3, #0
 80052c4:	930a      	str	r3, [sp, #40]	; 0x28
 80052c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052c8:	2b09      	cmp	r3, #9
 80052ca:	d867      	bhi.n	800539c <_dtoa_r+0x2a4>
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	bfc4      	itt	gt
 80052d0:	3b04      	subgt	r3, #4
 80052d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80052d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052d6:	bfc8      	it	gt
 80052d8:	2400      	movgt	r4, #0
 80052da:	f1a3 0302 	sub.w	r3, r3, #2
 80052de:	bfd8      	it	le
 80052e0:	2401      	movle	r4, #1
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	f200 8086 	bhi.w	80053f4 <_dtoa_r+0x2fc>
 80052e8:	e8df f003 	tbb	[pc, r3]
 80052ec:	5637392c 	.word	0x5637392c
 80052f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80052f4:	441c      	add	r4, r3
 80052f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	bfc1      	itttt	gt
 80052fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005302:	fa09 f903 	lslgt.w	r9, r9, r3
 8005306:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800530a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800530e:	bfd6      	itet	le
 8005310:	f1c3 0320 	rsble	r3, r3, #32
 8005314:	ea49 0003 	orrgt.w	r0, r9, r3
 8005318:	fa06 f003 	lslle.w	r0, r6, r3
 800531c:	f7fb f862 	bl	80003e4 <__aeabi_ui2d>
 8005320:	2201      	movs	r2, #1
 8005322:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005326:	3c01      	subs	r4, #1
 8005328:	9213      	str	r2, [sp, #76]	; 0x4c
 800532a:	e76f      	b.n	800520c <_dtoa_r+0x114>
 800532c:	2301      	movs	r3, #1
 800532e:	e7b3      	b.n	8005298 <_dtoa_r+0x1a0>
 8005330:	900f      	str	r0, [sp, #60]	; 0x3c
 8005332:	e7b2      	b.n	800529a <_dtoa_r+0x1a2>
 8005334:	f1cb 0300 	rsb	r3, fp, #0
 8005338:	930a      	str	r3, [sp, #40]	; 0x28
 800533a:	2300      	movs	r3, #0
 800533c:	eba9 090b 	sub.w	r9, r9, fp
 8005340:	930e      	str	r3, [sp, #56]	; 0x38
 8005342:	e7c0      	b.n	80052c6 <_dtoa_r+0x1ce>
 8005344:	2300      	movs	r3, #0
 8005346:	930b      	str	r3, [sp, #44]	; 0x2c
 8005348:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800534a:	2b00      	cmp	r3, #0
 800534c:	dc55      	bgt.n	80053fa <_dtoa_r+0x302>
 800534e:	2301      	movs	r3, #1
 8005350:	461a      	mov	r2, r3
 8005352:	9306      	str	r3, [sp, #24]
 8005354:	9308      	str	r3, [sp, #32]
 8005356:	9223      	str	r2, [sp, #140]	; 0x8c
 8005358:	e00b      	b.n	8005372 <_dtoa_r+0x27a>
 800535a:	2301      	movs	r3, #1
 800535c:	e7f3      	b.n	8005346 <_dtoa_r+0x24e>
 800535e:	2300      	movs	r3, #0
 8005360:	930b      	str	r3, [sp, #44]	; 0x2c
 8005362:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005364:	445b      	add	r3, fp
 8005366:	9306      	str	r3, [sp, #24]
 8005368:	3301      	adds	r3, #1
 800536a:	2b01      	cmp	r3, #1
 800536c:	9308      	str	r3, [sp, #32]
 800536e:	bfb8      	it	lt
 8005370:	2301      	movlt	r3, #1
 8005372:	2100      	movs	r1, #0
 8005374:	2204      	movs	r2, #4
 8005376:	69e8      	ldr	r0, [r5, #28]
 8005378:	f102 0614 	add.w	r6, r2, #20
 800537c:	429e      	cmp	r6, r3
 800537e:	d940      	bls.n	8005402 <_dtoa_r+0x30a>
 8005380:	6041      	str	r1, [r0, #4]
 8005382:	4628      	mov	r0, r5
 8005384:	f000 fd98 	bl	8005eb8 <_Balloc>
 8005388:	9003      	str	r0, [sp, #12]
 800538a:	2800      	cmp	r0, #0
 800538c:	d13c      	bne.n	8005408 <_dtoa_r+0x310>
 800538e:	4602      	mov	r2, r0
 8005390:	f240 11af 	movw	r1, #431	; 0x1af
 8005394:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <_dtoa_r+0x2f8>)
 8005396:	e6c3      	b.n	8005120 <_dtoa_r+0x28>
 8005398:	2301      	movs	r3, #1
 800539a:	e7e1      	b.n	8005360 <_dtoa_r+0x268>
 800539c:	2401      	movs	r4, #1
 800539e:	2300      	movs	r3, #0
 80053a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80053a2:	9322      	str	r3, [sp, #136]	; 0x88
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295
 80053a8:	2200      	movs	r2, #0
 80053aa:	9306      	str	r3, [sp, #24]
 80053ac:	9308      	str	r3, [sp, #32]
 80053ae:	2312      	movs	r3, #18
 80053b0:	e7d1      	b.n	8005356 <_dtoa_r+0x25e>
 80053b2:	bf00      	nop
 80053b4:	f3af 8000 	nop.w
 80053b8:	636f4361 	.word	0x636f4361
 80053bc:	3fd287a7 	.word	0x3fd287a7
 80053c0:	8b60c8b3 	.word	0x8b60c8b3
 80053c4:	3fc68a28 	.word	0x3fc68a28
 80053c8:	509f79fb 	.word	0x509f79fb
 80053cc:	3fd34413 	.word	0x3fd34413
 80053d0:	080071bb 	.word	0x080071bb
 80053d4:	080071d2 	.word	0x080071d2
 80053d8:	7ff00000 	.word	0x7ff00000
 80053dc:	080071b7 	.word	0x080071b7
 80053e0:	080071ae 	.word	0x080071ae
 80053e4:	0800718b 	.word	0x0800718b
 80053e8:	3ff80000 	.word	0x3ff80000
 80053ec:	080072c0 	.word	0x080072c0
 80053f0:	0800722a 	.word	0x0800722a
 80053f4:	2301      	movs	r3, #1
 80053f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053f8:	e7d4      	b.n	80053a4 <_dtoa_r+0x2ac>
 80053fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053fc:	9306      	str	r3, [sp, #24]
 80053fe:	9308      	str	r3, [sp, #32]
 8005400:	e7b7      	b.n	8005372 <_dtoa_r+0x27a>
 8005402:	3101      	adds	r1, #1
 8005404:	0052      	lsls	r2, r2, #1
 8005406:	e7b7      	b.n	8005378 <_dtoa_r+0x280>
 8005408:	69eb      	ldr	r3, [r5, #28]
 800540a:	9a03      	ldr	r2, [sp, #12]
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	9b08      	ldr	r3, [sp, #32]
 8005410:	2b0e      	cmp	r3, #14
 8005412:	f200 80a8 	bhi.w	8005566 <_dtoa_r+0x46e>
 8005416:	2c00      	cmp	r4, #0
 8005418:	f000 80a5 	beq.w	8005566 <_dtoa_r+0x46e>
 800541c:	f1bb 0f00 	cmp.w	fp, #0
 8005420:	dd34      	ble.n	800548c <_dtoa_r+0x394>
 8005422:	4b9a      	ldr	r3, [pc, #616]	; (800568c <_dtoa_r+0x594>)
 8005424:	f00b 020f 	and.w	r2, fp, #15
 8005428:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800542c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005430:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005434:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005438:	ea4f 142b 	mov.w	r4, fp, asr #4
 800543c:	d016      	beq.n	800546c <_dtoa_r+0x374>
 800543e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005442:	4b93      	ldr	r3, [pc, #588]	; (8005690 <_dtoa_r+0x598>)
 8005444:	2703      	movs	r7, #3
 8005446:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800544a:	f7fb f96f 	bl	800072c <__aeabi_ddiv>
 800544e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005452:	f004 040f 	and.w	r4, r4, #15
 8005456:	4e8e      	ldr	r6, [pc, #568]	; (8005690 <_dtoa_r+0x598>)
 8005458:	b954      	cbnz	r4, 8005470 <_dtoa_r+0x378>
 800545a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800545e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005462:	f7fb f963 	bl	800072c <__aeabi_ddiv>
 8005466:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800546a:	e029      	b.n	80054c0 <_dtoa_r+0x3c8>
 800546c:	2702      	movs	r7, #2
 800546e:	e7f2      	b.n	8005456 <_dtoa_r+0x35e>
 8005470:	07e1      	lsls	r1, r4, #31
 8005472:	d508      	bpl.n	8005486 <_dtoa_r+0x38e>
 8005474:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005478:	e9d6 2300 	ldrd	r2, r3, [r6]
 800547c:	f7fb f82c 	bl	80004d8 <__aeabi_dmul>
 8005480:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005484:	3701      	adds	r7, #1
 8005486:	1064      	asrs	r4, r4, #1
 8005488:	3608      	adds	r6, #8
 800548a:	e7e5      	b.n	8005458 <_dtoa_r+0x360>
 800548c:	f000 80a5 	beq.w	80055da <_dtoa_r+0x4e2>
 8005490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005494:	f1cb 0400 	rsb	r4, fp, #0
 8005498:	4b7c      	ldr	r3, [pc, #496]	; (800568c <_dtoa_r+0x594>)
 800549a:	f004 020f 	and.w	r2, r4, #15
 800549e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f7fb f817 	bl	80004d8 <__aeabi_dmul>
 80054aa:	2702      	movs	r7, #2
 80054ac:	2300      	movs	r3, #0
 80054ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054b2:	4e77      	ldr	r6, [pc, #476]	; (8005690 <_dtoa_r+0x598>)
 80054b4:	1124      	asrs	r4, r4, #4
 80054b6:	2c00      	cmp	r4, #0
 80054b8:	f040 8084 	bne.w	80055c4 <_dtoa_r+0x4cc>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1d2      	bne.n	8005466 <_dtoa_r+0x36e>
 80054c0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80054c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80054c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 8087 	beq.w	80055de <_dtoa_r+0x4e6>
 80054d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054d4:	2200      	movs	r2, #0
 80054d6:	4b6f      	ldr	r3, [pc, #444]	; (8005694 <_dtoa_r+0x59c>)
 80054d8:	f7fb fa70 	bl	80009bc <__aeabi_dcmplt>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d07e      	beq.n	80055de <_dtoa_r+0x4e6>
 80054e0:	9b08      	ldr	r3, [sp, #32]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d07b      	beq.n	80055de <_dtoa_r+0x4e6>
 80054e6:	9b06      	ldr	r3, [sp, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	dd38      	ble.n	800555e <_dtoa_r+0x466>
 80054ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054f0:	2200      	movs	r2, #0
 80054f2:	4b69      	ldr	r3, [pc, #420]	; (8005698 <_dtoa_r+0x5a0>)
 80054f4:	f7fa fff0 	bl	80004d8 <__aeabi_dmul>
 80054f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054fc:	9c06      	ldr	r4, [sp, #24]
 80054fe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005502:	3701      	adds	r7, #1
 8005504:	4638      	mov	r0, r7
 8005506:	f7fa ff7d 	bl	8000404 <__aeabi_i2d>
 800550a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800550e:	f7fa ffe3 	bl	80004d8 <__aeabi_dmul>
 8005512:	2200      	movs	r2, #0
 8005514:	4b61      	ldr	r3, [pc, #388]	; (800569c <_dtoa_r+0x5a4>)
 8005516:	f7fa fe29 	bl	800016c <__adddf3>
 800551a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800551e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005522:	9611      	str	r6, [sp, #68]	; 0x44
 8005524:	2c00      	cmp	r4, #0
 8005526:	d15d      	bne.n	80055e4 <_dtoa_r+0x4ec>
 8005528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800552c:	2200      	movs	r2, #0
 800552e:	4b5c      	ldr	r3, [pc, #368]	; (80056a0 <_dtoa_r+0x5a8>)
 8005530:	f7fa fe1a 	bl	8000168 <__aeabi_dsub>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800553c:	4633      	mov	r3, r6
 800553e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005540:	f7fb fa5a 	bl	80009f8 <__aeabi_dcmpgt>
 8005544:	2800      	cmp	r0, #0
 8005546:	f040 8295 	bne.w	8005a74 <_dtoa_r+0x97c>
 800554a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800554e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005550:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005554:	f7fb fa32 	bl	80009bc <__aeabi_dcmplt>
 8005558:	2800      	cmp	r0, #0
 800555a:	f040 8289 	bne.w	8005a70 <_dtoa_r+0x978>
 800555e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005562:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005566:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005568:	2b00      	cmp	r3, #0
 800556a:	f2c0 8151 	blt.w	8005810 <_dtoa_r+0x718>
 800556e:	f1bb 0f0e 	cmp.w	fp, #14
 8005572:	f300 814d 	bgt.w	8005810 <_dtoa_r+0x718>
 8005576:	4b45      	ldr	r3, [pc, #276]	; (800568c <_dtoa_r+0x594>)
 8005578:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800557c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005580:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005584:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005586:	2b00      	cmp	r3, #0
 8005588:	f280 80da 	bge.w	8005740 <_dtoa_r+0x648>
 800558c:	9b08      	ldr	r3, [sp, #32]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f300 80d6 	bgt.w	8005740 <_dtoa_r+0x648>
 8005594:	f040 826b 	bne.w	8005a6e <_dtoa_r+0x976>
 8005598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800559c:	2200      	movs	r2, #0
 800559e:	4b40      	ldr	r3, [pc, #256]	; (80056a0 <_dtoa_r+0x5a8>)
 80055a0:	f7fa ff9a 	bl	80004d8 <__aeabi_dmul>
 80055a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055a8:	f7fb fa1c 	bl	80009e4 <__aeabi_dcmpge>
 80055ac:	9c08      	ldr	r4, [sp, #32]
 80055ae:	4626      	mov	r6, r4
 80055b0:	2800      	cmp	r0, #0
 80055b2:	f040 8241 	bne.w	8005a38 <_dtoa_r+0x940>
 80055b6:	2331      	movs	r3, #49	; 0x31
 80055b8:	9f03      	ldr	r7, [sp, #12]
 80055ba:	f10b 0b01 	add.w	fp, fp, #1
 80055be:	f807 3b01 	strb.w	r3, [r7], #1
 80055c2:	e23d      	b.n	8005a40 <_dtoa_r+0x948>
 80055c4:	07e2      	lsls	r2, r4, #31
 80055c6:	d505      	bpl.n	80055d4 <_dtoa_r+0x4dc>
 80055c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055cc:	f7fa ff84 	bl	80004d8 <__aeabi_dmul>
 80055d0:	2301      	movs	r3, #1
 80055d2:	3701      	adds	r7, #1
 80055d4:	1064      	asrs	r4, r4, #1
 80055d6:	3608      	adds	r6, #8
 80055d8:	e76d      	b.n	80054b6 <_dtoa_r+0x3be>
 80055da:	2702      	movs	r7, #2
 80055dc:	e770      	b.n	80054c0 <_dtoa_r+0x3c8>
 80055de:	46d8      	mov	r8, fp
 80055e0:	9c08      	ldr	r4, [sp, #32]
 80055e2:	e78f      	b.n	8005504 <_dtoa_r+0x40c>
 80055e4:	9903      	ldr	r1, [sp, #12]
 80055e6:	4b29      	ldr	r3, [pc, #164]	; (800568c <_dtoa_r+0x594>)
 80055e8:	4421      	add	r1, r4
 80055ea:	9112      	str	r1, [sp, #72]	; 0x48
 80055ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055f2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80055f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055fa:	2900      	cmp	r1, #0
 80055fc:	d054      	beq.n	80056a8 <_dtoa_r+0x5b0>
 80055fe:	2000      	movs	r0, #0
 8005600:	4928      	ldr	r1, [pc, #160]	; (80056a4 <_dtoa_r+0x5ac>)
 8005602:	f7fb f893 	bl	800072c <__aeabi_ddiv>
 8005606:	463b      	mov	r3, r7
 8005608:	4632      	mov	r2, r6
 800560a:	f7fa fdad 	bl	8000168 <__aeabi_dsub>
 800560e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005612:	9f03      	ldr	r7, [sp, #12]
 8005614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005618:	f7fb fa0e 	bl	8000a38 <__aeabi_d2iz>
 800561c:	4604      	mov	r4, r0
 800561e:	f7fa fef1 	bl	8000404 <__aeabi_i2d>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800562a:	f7fa fd9d 	bl	8000168 <__aeabi_dsub>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	3430      	adds	r4, #48	; 0x30
 8005634:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005638:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800563c:	f807 4b01 	strb.w	r4, [r7], #1
 8005640:	f7fb f9bc 	bl	80009bc <__aeabi_dcmplt>
 8005644:	2800      	cmp	r0, #0
 8005646:	d173      	bne.n	8005730 <_dtoa_r+0x638>
 8005648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800564c:	2000      	movs	r0, #0
 800564e:	4911      	ldr	r1, [pc, #68]	; (8005694 <_dtoa_r+0x59c>)
 8005650:	f7fa fd8a 	bl	8000168 <__aeabi_dsub>
 8005654:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005658:	f7fb f9b0 	bl	80009bc <__aeabi_dcmplt>
 800565c:	2800      	cmp	r0, #0
 800565e:	f040 80b6 	bne.w	80057ce <_dtoa_r+0x6d6>
 8005662:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005664:	429f      	cmp	r7, r3
 8005666:	f43f af7a 	beq.w	800555e <_dtoa_r+0x466>
 800566a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800566e:	2200      	movs	r2, #0
 8005670:	4b09      	ldr	r3, [pc, #36]	; (8005698 <_dtoa_r+0x5a0>)
 8005672:	f7fa ff31 	bl	80004d8 <__aeabi_dmul>
 8005676:	2200      	movs	r2, #0
 8005678:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800567c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <_dtoa_r+0x5a0>)
 8005682:	f7fa ff29 	bl	80004d8 <__aeabi_dmul>
 8005686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800568a:	e7c3      	b.n	8005614 <_dtoa_r+0x51c>
 800568c:	080072c0 	.word	0x080072c0
 8005690:	08007298 	.word	0x08007298
 8005694:	3ff00000 	.word	0x3ff00000
 8005698:	40240000 	.word	0x40240000
 800569c:	401c0000 	.word	0x401c0000
 80056a0:	40140000 	.word	0x40140000
 80056a4:	3fe00000 	.word	0x3fe00000
 80056a8:	4630      	mov	r0, r6
 80056aa:	4639      	mov	r1, r7
 80056ac:	f7fa ff14 	bl	80004d8 <__aeabi_dmul>
 80056b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056b6:	9c03      	ldr	r4, [sp, #12]
 80056b8:	9314      	str	r3, [sp, #80]	; 0x50
 80056ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056be:	f7fb f9bb 	bl	8000a38 <__aeabi_d2iz>
 80056c2:	9015      	str	r0, [sp, #84]	; 0x54
 80056c4:	f7fa fe9e 	bl	8000404 <__aeabi_i2d>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056d0:	f7fa fd4a 	bl	8000168 <__aeabi_dsub>
 80056d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056d6:	4606      	mov	r6, r0
 80056d8:	3330      	adds	r3, #48	; 0x30
 80056da:	f804 3b01 	strb.w	r3, [r4], #1
 80056de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056e0:	460f      	mov	r7, r1
 80056e2:	429c      	cmp	r4, r3
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	d124      	bne.n	8005734 <_dtoa_r+0x63c>
 80056ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056ee:	4baf      	ldr	r3, [pc, #700]	; (80059ac <_dtoa_r+0x8b4>)
 80056f0:	f7fa fd3c 	bl	800016c <__adddf3>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4630      	mov	r0, r6
 80056fa:	4639      	mov	r1, r7
 80056fc:	f7fb f97c 	bl	80009f8 <__aeabi_dcmpgt>
 8005700:	2800      	cmp	r0, #0
 8005702:	d163      	bne.n	80057cc <_dtoa_r+0x6d4>
 8005704:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005708:	2000      	movs	r0, #0
 800570a:	49a8      	ldr	r1, [pc, #672]	; (80059ac <_dtoa_r+0x8b4>)
 800570c:	f7fa fd2c 	bl	8000168 <__aeabi_dsub>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4630      	mov	r0, r6
 8005716:	4639      	mov	r1, r7
 8005718:	f7fb f950 	bl	80009bc <__aeabi_dcmplt>
 800571c:	2800      	cmp	r0, #0
 800571e:	f43f af1e 	beq.w	800555e <_dtoa_r+0x466>
 8005722:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005724:	1e7b      	subs	r3, r7, #1
 8005726:	9314      	str	r3, [sp, #80]	; 0x50
 8005728:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800572c:	2b30      	cmp	r3, #48	; 0x30
 800572e:	d0f8      	beq.n	8005722 <_dtoa_r+0x62a>
 8005730:	46c3      	mov	fp, r8
 8005732:	e03b      	b.n	80057ac <_dtoa_r+0x6b4>
 8005734:	4b9e      	ldr	r3, [pc, #632]	; (80059b0 <_dtoa_r+0x8b8>)
 8005736:	f7fa fecf 	bl	80004d8 <__aeabi_dmul>
 800573a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800573e:	e7bc      	b.n	80056ba <_dtoa_r+0x5c2>
 8005740:	9f03      	ldr	r7, [sp, #12]
 8005742:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005746:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800574a:	4640      	mov	r0, r8
 800574c:	4649      	mov	r1, r9
 800574e:	f7fa ffed 	bl	800072c <__aeabi_ddiv>
 8005752:	f7fb f971 	bl	8000a38 <__aeabi_d2iz>
 8005756:	4604      	mov	r4, r0
 8005758:	f7fa fe54 	bl	8000404 <__aeabi_i2d>
 800575c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005760:	f7fa feba 	bl	80004d8 <__aeabi_dmul>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4640      	mov	r0, r8
 800576a:	4649      	mov	r1, r9
 800576c:	f7fa fcfc 	bl	8000168 <__aeabi_dsub>
 8005770:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005774:	f807 6b01 	strb.w	r6, [r7], #1
 8005778:	9e03      	ldr	r6, [sp, #12]
 800577a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800577e:	1bbe      	subs	r6, r7, r6
 8005780:	45b4      	cmp	ip, r6
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	d136      	bne.n	80057f6 <_dtoa_r+0x6fe>
 8005788:	f7fa fcf0 	bl	800016c <__adddf3>
 800578c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005790:	4680      	mov	r8, r0
 8005792:	4689      	mov	r9, r1
 8005794:	f7fb f930 	bl	80009f8 <__aeabi_dcmpgt>
 8005798:	bb58      	cbnz	r0, 80057f2 <_dtoa_r+0x6fa>
 800579a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800579e:	4640      	mov	r0, r8
 80057a0:	4649      	mov	r1, r9
 80057a2:	f7fb f901 	bl	80009a8 <__aeabi_dcmpeq>
 80057a6:	b108      	cbz	r0, 80057ac <_dtoa_r+0x6b4>
 80057a8:	07e3      	lsls	r3, r4, #31
 80057aa:	d422      	bmi.n	80057f2 <_dtoa_r+0x6fa>
 80057ac:	4651      	mov	r1, sl
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 fbc2 	bl	8005f38 <_Bfree>
 80057b4:	2300      	movs	r3, #0
 80057b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057b8:	703b      	strb	r3, [r7, #0]
 80057ba:	f10b 0301 	add.w	r3, fp, #1
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f43f ace6 	beq.w	8005194 <_dtoa_r+0x9c>
 80057c8:	601f      	str	r7, [r3, #0]
 80057ca:	e4e3      	b.n	8005194 <_dtoa_r+0x9c>
 80057cc:	4627      	mov	r7, r4
 80057ce:	463b      	mov	r3, r7
 80057d0:	461f      	mov	r7, r3
 80057d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057d6:	2a39      	cmp	r2, #57	; 0x39
 80057d8:	d107      	bne.n	80057ea <_dtoa_r+0x6f2>
 80057da:	9a03      	ldr	r2, [sp, #12]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d1f7      	bne.n	80057d0 <_dtoa_r+0x6d8>
 80057e0:	2230      	movs	r2, #48	; 0x30
 80057e2:	9903      	ldr	r1, [sp, #12]
 80057e4:	f108 0801 	add.w	r8, r8, #1
 80057e8:	700a      	strb	r2, [r1, #0]
 80057ea:	781a      	ldrb	r2, [r3, #0]
 80057ec:	3201      	adds	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e79e      	b.n	8005730 <_dtoa_r+0x638>
 80057f2:	46d8      	mov	r8, fp
 80057f4:	e7eb      	b.n	80057ce <_dtoa_r+0x6d6>
 80057f6:	2200      	movs	r2, #0
 80057f8:	4b6d      	ldr	r3, [pc, #436]	; (80059b0 <_dtoa_r+0x8b8>)
 80057fa:	f7fa fe6d 	bl	80004d8 <__aeabi_dmul>
 80057fe:	2200      	movs	r2, #0
 8005800:	2300      	movs	r3, #0
 8005802:	4680      	mov	r8, r0
 8005804:	4689      	mov	r9, r1
 8005806:	f7fb f8cf 	bl	80009a8 <__aeabi_dcmpeq>
 800580a:	2800      	cmp	r0, #0
 800580c:	d09b      	beq.n	8005746 <_dtoa_r+0x64e>
 800580e:	e7cd      	b.n	80057ac <_dtoa_r+0x6b4>
 8005810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005812:	2a00      	cmp	r2, #0
 8005814:	f000 80c4 	beq.w	80059a0 <_dtoa_r+0x8a8>
 8005818:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800581a:	2a01      	cmp	r2, #1
 800581c:	f300 80a8 	bgt.w	8005970 <_dtoa_r+0x878>
 8005820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005822:	2a00      	cmp	r2, #0
 8005824:	f000 80a0 	beq.w	8005968 <_dtoa_r+0x870>
 8005828:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800582c:	464f      	mov	r7, r9
 800582e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005832:	2101      	movs	r1, #1
 8005834:	441a      	add	r2, r3
 8005836:	4628      	mov	r0, r5
 8005838:	4499      	add	r9, r3
 800583a:	9209      	str	r2, [sp, #36]	; 0x24
 800583c:	f000 fc32 	bl	80060a4 <__i2b>
 8005840:	4606      	mov	r6, r0
 8005842:	b15f      	cbz	r7, 800585c <_dtoa_r+0x764>
 8005844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	dd08      	ble.n	800585c <_dtoa_r+0x764>
 800584a:	42bb      	cmp	r3, r7
 800584c:	bfa8      	it	ge
 800584e:	463b      	movge	r3, r7
 8005850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005852:	eba9 0903 	sub.w	r9, r9, r3
 8005856:	1aff      	subs	r7, r7, r3
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	9309      	str	r3, [sp, #36]	; 0x24
 800585c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800585e:	b1f3      	cbz	r3, 800589e <_dtoa_r+0x7a6>
 8005860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80a0 	beq.w	80059a8 <_dtoa_r+0x8b0>
 8005868:	2c00      	cmp	r4, #0
 800586a:	dd10      	ble.n	800588e <_dtoa_r+0x796>
 800586c:	4631      	mov	r1, r6
 800586e:	4622      	mov	r2, r4
 8005870:	4628      	mov	r0, r5
 8005872:	f000 fcd5 	bl	8006220 <__pow5mult>
 8005876:	4652      	mov	r2, sl
 8005878:	4601      	mov	r1, r0
 800587a:	4606      	mov	r6, r0
 800587c:	4628      	mov	r0, r5
 800587e:	f000 fc27 	bl	80060d0 <__multiply>
 8005882:	4680      	mov	r8, r0
 8005884:	4651      	mov	r1, sl
 8005886:	4628      	mov	r0, r5
 8005888:	f000 fb56 	bl	8005f38 <_Bfree>
 800588c:	46c2      	mov	sl, r8
 800588e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005890:	1b1a      	subs	r2, r3, r4
 8005892:	d004      	beq.n	800589e <_dtoa_r+0x7a6>
 8005894:	4651      	mov	r1, sl
 8005896:	4628      	mov	r0, r5
 8005898:	f000 fcc2 	bl	8006220 <__pow5mult>
 800589c:	4682      	mov	sl, r0
 800589e:	2101      	movs	r1, #1
 80058a0:	4628      	mov	r0, r5
 80058a2:	f000 fbff 	bl	80060a4 <__i2b>
 80058a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058a8:	4604      	mov	r4, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f340 8082 	ble.w	80059b4 <_dtoa_r+0x8bc>
 80058b0:	461a      	mov	r2, r3
 80058b2:	4601      	mov	r1, r0
 80058b4:	4628      	mov	r0, r5
 80058b6:	f000 fcb3 	bl	8006220 <__pow5mult>
 80058ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058bc:	4604      	mov	r4, r0
 80058be:	2b01      	cmp	r3, #1
 80058c0:	dd7b      	ble.n	80059ba <_dtoa_r+0x8c2>
 80058c2:	f04f 0800 	mov.w	r8, #0
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058cc:	6918      	ldr	r0, [r3, #16]
 80058ce:	f000 fb9b 	bl	8006008 <__hi0bits>
 80058d2:	f1c0 0020 	rsb	r0, r0, #32
 80058d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d8:	4418      	add	r0, r3
 80058da:	f010 001f 	ands.w	r0, r0, #31
 80058de:	f000 8092 	beq.w	8005a06 <_dtoa_r+0x90e>
 80058e2:	f1c0 0320 	rsb	r3, r0, #32
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	f340 8085 	ble.w	80059f6 <_dtoa_r+0x8fe>
 80058ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ee:	f1c0 001c 	rsb	r0, r0, #28
 80058f2:	4403      	add	r3, r0
 80058f4:	4481      	add	r9, r0
 80058f6:	4407      	add	r7, r0
 80058f8:	9309      	str	r3, [sp, #36]	; 0x24
 80058fa:	f1b9 0f00 	cmp.w	r9, #0
 80058fe:	dd05      	ble.n	800590c <_dtoa_r+0x814>
 8005900:	4651      	mov	r1, sl
 8005902:	464a      	mov	r2, r9
 8005904:	4628      	mov	r0, r5
 8005906:	f000 fce5 	bl	80062d4 <__lshift>
 800590a:	4682      	mov	sl, r0
 800590c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	dd05      	ble.n	800591e <_dtoa_r+0x826>
 8005912:	4621      	mov	r1, r4
 8005914:	461a      	mov	r2, r3
 8005916:	4628      	mov	r0, r5
 8005918:	f000 fcdc 	bl	80062d4 <__lshift>
 800591c:	4604      	mov	r4, r0
 800591e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005920:	2b00      	cmp	r3, #0
 8005922:	d072      	beq.n	8005a0a <_dtoa_r+0x912>
 8005924:	4621      	mov	r1, r4
 8005926:	4650      	mov	r0, sl
 8005928:	f000 fd40 	bl	80063ac <__mcmp>
 800592c:	2800      	cmp	r0, #0
 800592e:	da6c      	bge.n	8005a0a <_dtoa_r+0x912>
 8005930:	2300      	movs	r3, #0
 8005932:	4651      	mov	r1, sl
 8005934:	220a      	movs	r2, #10
 8005936:	4628      	mov	r0, r5
 8005938:	f000 fb20 	bl	8005f7c <__multadd>
 800593c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800593e:	4682      	mov	sl, r0
 8005940:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 81ac 	beq.w	8005ca2 <_dtoa_r+0xbaa>
 800594a:	2300      	movs	r3, #0
 800594c:	4631      	mov	r1, r6
 800594e:	220a      	movs	r2, #10
 8005950:	4628      	mov	r0, r5
 8005952:	f000 fb13 	bl	8005f7c <__multadd>
 8005956:	9b06      	ldr	r3, [sp, #24]
 8005958:	4606      	mov	r6, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	f300 8093 	bgt.w	8005a86 <_dtoa_r+0x98e>
 8005960:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005962:	2b02      	cmp	r3, #2
 8005964:	dc59      	bgt.n	8005a1a <_dtoa_r+0x922>
 8005966:	e08e      	b.n	8005a86 <_dtoa_r+0x98e>
 8005968:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800596a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800596e:	e75d      	b.n	800582c <_dtoa_r+0x734>
 8005970:	9b08      	ldr	r3, [sp, #32]
 8005972:	1e5c      	subs	r4, r3, #1
 8005974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005976:	42a3      	cmp	r3, r4
 8005978:	bfbf      	itttt	lt
 800597a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800597c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800597e:	1ae3      	sublt	r3, r4, r3
 8005980:	18d2      	addlt	r2, r2, r3
 8005982:	bfa8      	it	ge
 8005984:	1b1c      	subge	r4, r3, r4
 8005986:	9b08      	ldr	r3, [sp, #32]
 8005988:	bfbe      	ittt	lt
 800598a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800598c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800598e:	2400      	movlt	r4, #0
 8005990:	2b00      	cmp	r3, #0
 8005992:	bfb5      	itete	lt
 8005994:	eba9 0703 	sublt.w	r7, r9, r3
 8005998:	464f      	movge	r7, r9
 800599a:	2300      	movlt	r3, #0
 800599c:	9b08      	ldrge	r3, [sp, #32]
 800599e:	e747      	b.n	8005830 <_dtoa_r+0x738>
 80059a0:	464f      	mov	r7, r9
 80059a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80059a6:	e74c      	b.n	8005842 <_dtoa_r+0x74a>
 80059a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059aa:	e773      	b.n	8005894 <_dtoa_r+0x79c>
 80059ac:	3fe00000 	.word	0x3fe00000
 80059b0:	40240000 	.word	0x40240000
 80059b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	dc18      	bgt.n	80059ec <_dtoa_r+0x8f4>
 80059ba:	9b04      	ldr	r3, [sp, #16]
 80059bc:	b9b3      	cbnz	r3, 80059ec <_dtoa_r+0x8f4>
 80059be:	9b05      	ldr	r3, [sp, #20]
 80059c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059c4:	b993      	cbnz	r3, 80059ec <_dtoa_r+0x8f4>
 80059c6:	9b05      	ldr	r3, [sp, #20]
 80059c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059cc:	0d1b      	lsrs	r3, r3, #20
 80059ce:	051b      	lsls	r3, r3, #20
 80059d0:	b17b      	cbz	r3, 80059f2 <_dtoa_r+0x8fa>
 80059d2:	f04f 0801 	mov.w	r8, #1
 80059d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d8:	f109 0901 	add.w	r9, r9, #1
 80059dc:	3301      	adds	r3, #1
 80059de:	9309      	str	r3, [sp, #36]	; 0x24
 80059e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f47f af6f 	bne.w	80058c6 <_dtoa_r+0x7ce>
 80059e8:	2001      	movs	r0, #1
 80059ea:	e774      	b.n	80058d6 <_dtoa_r+0x7de>
 80059ec:	f04f 0800 	mov.w	r8, #0
 80059f0:	e7f6      	b.n	80059e0 <_dtoa_r+0x8e8>
 80059f2:	4698      	mov	r8, r3
 80059f4:	e7f4      	b.n	80059e0 <_dtoa_r+0x8e8>
 80059f6:	d080      	beq.n	80058fa <_dtoa_r+0x802>
 80059f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059fa:	331c      	adds	r3, #28
 80059fc:	441a      	add	r2, r3
 80059fe:	4499      	add	r9, r3
 8005a00:	441f      	add	r7, r3
 8005a02:	9209      	str	r2, [sp, #36]	; 0x24
 8005a04:	e779      	b.n	80058fa <_dtoa_r+0x802>
 8005a06:	4603      	mov	r3, r0
 8005a08:	e7f6      	b.n	80059f8 <_dtoa_r+0x900>
 8005a0a:	9b08      	ldr	r3, [sp, #32]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	dc34      	bgt.n	8005a7a <_dtoa_r+0x982>
 8005a10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	dd31      	ble.n	8005a7a <_dtoa_r+0x982>
 8005a16:	9b08      	ldr	r3, [sp, #32]
 8005a18:	9306      	str	r3, [sp, #24]
 8005a1a:	9b06      	ldr	r3, [sp, #24]
 8005a1c:	b963      	cbnz	r3, 8005a38 <_dtoa_r+0x940>
 8005a1e:	4621      	mov	r1, r4
 8005a20:	2205      	movs	r2, #5
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 faaa 	bl	8005f7c <__multadd>
 8005a28:	4601      	mov	r1, r0
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	4650      	mov	r0, sl
 8005a2e:	f000 fcbd 	bl	80063ac <__mcmp>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	f73f adbf 	bgt.w	80055b6 <_dtoa_r+0x4be>
 8005a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a3a:	9f03      	ldr	r7, [sp, #12]
 8005a3c:	ea6f 0b03 	mvn.w	fp, r3
 8005a40:	f04f 0800 	mov.w	r8, #0
 8005a44:	4621      	mov	r1, r4
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 fa76 	bl	8005f38 <_Bfree>
 8005a4c:	2e00      	cmp	r6, #0
 8005a4e:	f43f aead 	beq.w	80057ac <_dtoa_r+0x6b4>
 8005a52:	f1b8 0f00 	cmp.w	r8, #0
 8005a56:	d005      	beq.n	8005a64 <_dtoa_r+0x96c>
 8005a58:	45b0      	cmp	r8, r6
 8005a5a:	d003      	beq.n	8005a64 <_dtoa_r+0x96c>
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 fa6a 	bl	8005f38 <_Bfree>
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	f000 fa66 	bl	8005f38 <_Bfree>
 8005a6c:	e69e      	b.n	80057ac <_dtoa_r+0x6b4>
 8005a6e:	2400      	movs	r4, #0
 8005a70:	4626      	mov	r6, r4
 8005a72:	e7e1      	b.n	8005a38 <_dtoa_r+0x940>
 8005a74:	46c3      	mov	fp, r8
 8005a76:	4626      	mov	r6, r4
 8005a78:	e59d      	b.n	80055b6 <_dtoa_r+0x4be>
 8005a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80c8 	beq.w	8005c12 <_dtoa_r+0xb1a>
 8005a82:	9b08      	ldr	r3, [sp, #32]
 8005a84:	9306      	str	r3, [sp, #24]
 8005a86:	2f00      	cmp	r7, #0
 8005a88:	dd05      	ble.n	8005a96 <_dtoa_r+0x99e>
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	463a      	mov	r2, r7
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 fc20 	bl	80062d4 <__lshift>
 8005a94:	4606      	mov	r6, r0
 8005a96:	f1b8 0f00 	cmp.w	r8, #0
 8005a9a:	d05b      	beq.n	8005b54 <_dtoa_r+0xa5c>
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	6871      	ldr	r1, [r6, #4]
 8005aa0:	f000 fa0a 	bl	8005eb8 <_Balloc>
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	b928      	cbnz	r0, 8005ab4 <_dtoa_r+0x9bc>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005aae:	4b81      	ldr	r3, [pc, #516]	; (8005cb4 <_dtoa_r+0xbbc>)
 8005ab0:	f7ff bb36 	b.w	8005120 <_dtoa_r+0x28>
 8005ab4:	6932      	ldr	r2, [r6, #16]
 8005ab6:	f106 010c 	add.w	r1, r6, #12
 8005aba:	3202      	adds	r2, #2
 8005abc:	0092      	lsls	r2, r2, #2
 8005abe:	300c      	adds	r0, #12
 8005ac0:	f7ff fa82 	bl	8004fc8 <memcpy>
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f000 fc03 	bl	80062d4 <__lshift>
 8005ace:	46b0      	mov	r8, r6
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	9a03      	ldr	r2, [sp, #12]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	9308      	str	r3, [sp, #32]
 8005ada:	9b06      	ldr	r3, [sp, #24]
 8005adc:	4413      	add	r3, r2
 8005ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ae0:	9b04      	ldr	r3, [sp, #16]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ae8:	9b08      	ldr	r3, [sp, #32]
 8005aea:	4621      	mov	r1, r4
 8005aec:	3b01      	subs	r3, #1
 8005aee:	4650      	mov	r0, sl
 8005af0:	9304      	str	r3, [sp, #16]
 8005af2:	f7ff fa77 	bl	8004fe4 <quorem>
 8005af6:	4641      	mov	r1, r8
 8005af8:	9006      	str	r0, [sp, #24]
 8005afa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005afe:	4650      	mov	r0, sl
 8005b00:	f000 fc54 	bl	80063ac <__mcmp>
 8005b04:	4632      	mov	r2, r6
 8005b06:	9009      	str	r0, [sp, #36]	; 0x24
 8005b08:	4621      	mov	r1, r4
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f000 fc6a 	bl	80063e4 <__mdiff>
 8005b10:	68c2      	ldr	r2, [r0, #12]
 8005b12:	4607      	mov	r7, r0
 8005b14:	bb02      	cbnz	r2, 8005b58 <_dtoa_r+0xa60>
 8005b16:	4601      	mov	r1, r0
 8005b18:	4650      	mov	r0, sl
 8005b1a:	f000 fc47 	bl	80063ac <__mcmp>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	4639      	mov	r1, r7
 8005b22:	4628      	mov	r0, r5
 8005b24:	920c      	str	r2, [sp, #48]	; 0x30
 8005b26:	f000 fa07 	bl	8005f38 <_Bfree>
 8005b2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b2e:	9f08      	ldr	r7, [sp, #32]
 8005b30:	ea43 0102 	orr.w	r1, r3, r2
 8005b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b36:	4319      	orrs	r1, r3
 8005b38:	d110      	bne.n	8005b5c <_dtoa_r+0xa64>
 8005b3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b3e:	d029      	beq.n	8005b94 <_dtoa_r+0xa9c>
 8005b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	dd02      	ble.n	8005b4c <_dtoa_r+0xa54>
 8005b46:	9b06      	ldr	r3, [sp, #24]
 8005b48:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005b4c:	9b04      	ldr	r3, [sp, #16]
 8005b4e:	f883 9000 	strb.w	r9, [r3]
 8005b52:	e777      	b.n	8005a44 <_dtoa_r+0x94c>
 8005b54:	4630      	mov	r0, r6
 8005b56:	e7ba      	b.n	8005ace <_dtoa_r+0x9d6>
 8005b58:	2201      	movs	r2, #1
 8005b5a:	e7e1      	b.n	8005b20 <_dtoa_r+0xa28>
 8005b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	db04      	blt.n	8005b6c <_dtoa_r+0xa74>
 8005b62:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005b64:	430b      	orrs	r3, r1
 8005b66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	d120      	bne.n	8005bae <_dtoa_r+0xab6>
 8005b6c:	2a00      	cmp	r2, #0
 8005b6e:	dded      	ble.n	8005b4c <_dtoa_r+0xa54>
 8005b70:	4651      	mov	r1, sl
 8005b72:	2201      	movs	r2, #1
 8005b74:	4628      	mov	r0, r5
 8005b76:	f000 fbad 	bl	80062d4 <__lshift>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4682      	mov	sl, r0
 8005b7e:	f000 fc15 	bl	80063ac <__mcmp>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	dc03      	bgt.n	8005b8e <_dtoa_r+0xa96>
 8005b86:	d1e1      	bne.n	8005b4c <_dtoa_r+0xa54>
 8005b88:	f019 0f01 	tst.w	r9, #1
 8005b8c:	d0de      	beq.n	8005b4c <_dtoa_r+0xa54>
 8005b8e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b92:	d1d8      	bne.n	8005b46 <_dtoa_r+0xa4e>
 8005b94:	2339      	movs	r3, #57	; 0x39
 8005b96:	9a04      	ldr	r2, [sp, #16]
 8005b98:	7013      	strb	r3, [r2, #0]
 8005b9a:	463b      	mov	r3, r7
 8005b9c:	461f      	mov	r7, r3
 8005b9e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	2a39      	cmp	r2, #57	; 0x39
 8005ba6:	d06b      	beq.n	8005c80 <_dtoa_r+0xb88>
 8005ba8:	3201      	adds	r2, #1
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	e74a      	b.n	8005a44 <_dtoa_r+0x94c>
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	dd07      	ble.n	8005bc2 <_dtoa_r+0xaca>
 8005bb2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bb6:	d0ed      	beq.n	8005b94 <_dtoa_r+0xa9c>
 8005bb8:	9a04      	ldr	r2, [sp, #16]
 8005bba:	f109 0301 	add.w	r3, r9, #1
 8005bbe:	7013      	strb	r3, [r2, #0]
 8005bc0:	e740      	b.n	8005a44 <_dtoa_r+0x94c>
 8005bc2:	9b08      	ldr	r3, [sp, #32]
 8005bc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bc6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d042      	beq.n	8005c54 <_dtoa_r+0xb5c>
 8005bce:	4651      	mov	r1, sl
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	220a      	movs	r2, #10
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	f000 f9d1 	bl	8005f7c <__multadd>
 8005bda:	45b0      	cmp	r8, r6
 8005bdc:	4682      	mov	sl, r0
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	f04f 020a 	mov.w	r2, #10
 8005be6:	4641      	mov	r1, r8
 8005be8:	4628      	mov	r0, r5
 8005bea:	d107      	bne.n	8005bfc <_dtoa_r+0xb04>
 8005bec:	f000 f9c6 	bl	8005f7c <__multadd>
 8005bf0:	4680      	mov	r8, r0
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	9b08      	ldr	r3, [sp, #32]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	9308      	str	r3, [sp, #32]
 8005bfa:	e775      	b.n	8005ae8 <_dtoa_r+0x9f0>
 8005bfc:	f000 f9be 	bl	8005f7c <__multadd>
 8005c00:	4631      	mov	r1, r6
 8005c02:	4680      	mov	r8, r0
 8005c04:	2300      	movs	r3, #0
 8005c06:	220a      	movs	r2, #10
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f000 f9b7 	bl	8005f7c <__multadd>
 8005c0e:	4606      	mov	r6, r0
 8005c10:	e7f0      	b.n	8005bf4 <_dtoa_r+0xafc>
 8005c12:	9b08      	ldr	r3, [sp, #32]
 8005c14:	9306      	str	r3, [sp, #24]
 8005c16:	9f03      	ldr	r7, [sp, #12]
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	f7ff f9e2 	bl	8004fe4 <quorem>
 8005c20:	9b03      	ldr	r3, [sp, #12]
 8005c22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c26:	f807 9b01 	strb.w	r9, [r7], #1
 8005c2a:	1afa      	subs	r2, r7, r3
 8005c2c:	9b06      	ldr	r3, [sp, #24]
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	dd07      	ble.n	8005c42 <_dtoa_r+0xb4a>
 8005c32:	4651      	mov	r1, sl
 8005c34:	2300      	movs	r3, #0
 8005c36:	220a      	movs	r2, #10
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f000 f99f 	bl	8005f7c <__multadd>
 8005c3e:	4682      	mov	sl, r0
 8005c40:	e7ea      	b.n	8005c18 <_dtoa_r+0xb20>
 8005c42:	9b06      	ldr	r3, [sp, #24]
 8005c44:	f04f 0800 	mov.w	r8, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	bfcc      	ite	gt
 8005c4c:	461f      	movgt	r7, r3
 8005c4e:	2701      	movle	r7, #1
 8005c50:	9b03      	ldr	r3, [sp, #12]
 8005c52:	441f      	add	r7, r3
 8005c54:	4651      	mov	r1, sl
 8005c56:	2201      	movs	r2, #1
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 fb3b 	bl	80062d4 <__lshift>
 8005c5e:	4621      	mov	r1, r4
 8005c60:	4682      	mov	sl, r0
 8005c62:	f000 fba3 	bl	80063ac <__mcmp>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	dc97      	bgt.n	8005b9a <_dtoa_r+0xaa2>
 8005c6a:	d102      	bne.n	8005c72 <_dtoa_r+0xb7a>
 8005c6c:	f019 0f01 	tst.w	r9, #1
 8005c70:	d193      	bne.n	8005b9a <_dtoa_r+0xaa2>
 8005c72:	463b      	mov	r3, r7
 8005c74:	461f      	mov	r7, r3
 8005c76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c7a:	2a30      	cmp	r2, #48	; 0x30
 8005c7c:	d0fa      	beq.n	8005c74 <_dtoa_r+0xb7c>
 8005c7e:	e6e1      	b.n	8005a44 <_dtoa_r+0x94c>
 8005c80:	9a03      	ldr	r2, [sp, #12]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d18a      	bne.n	8005b9c <_dtoa_r+0xaa4>
 8005c86:	2331      	movs	r3, #49	; 0x31
 8005c88:	f10b 0b01 	add.w	fp, fp, #1
 8005c8c:	e797      	b.n	8005bbe <_dtoa_r+0xac6>
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <_dtoa_r+0xbc0>)
 8005c90:	f7ff ba9f 	b.w	80051d2 <_dtoa_r+0xda>
 8005c94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f47f aa77 	bne.w	800518a <_dtoa_r+0x92>
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <_dtoa_r+0xbc4>)
 8005c9e:	f7ff ba98 	b.w	80051d2 <_dtoa_r+0xda>
 8005ca2:	9b06      	ldr	r3, [sp, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dcb6      	bgt.n	8005c16 <_dtoa_r+0xb1e>
 8005ca8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	f73f aeb5 	bgt.w	8005a1a <_dtoa_r+0x922>
 8005cb0:	e7b1      	b.n	8005c16 <_dtoa_r+0xb1e>
 8005cb2:	bf00      	nop
 8005cb4:	0800722a 	.word	0x0800722a
 8005cb8:	0800718a 	.word	0x0800718a
 8005cbc:	080071ae 	.word	0x080071ae

08005cc0 <_free_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	d040      	beq.n	8005d4a <_free_r+0x8a>
 8005cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ccc:	1f0c      	subs	r4, r1, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	bfb8      	it	lt
 8005cd2:	18e4      	addlt	r4, r4, r3
 8005cd4:	f000 f8e4 	bl	8005ea0 <__malloc_lock>
 8005cd8:	4a1c      	ldr	r2, [pc, #112]	; (8005d4c <_free_r+0x8c>)
 8005cda:	6813      	ldr	r3, [r2, #0]
 8005cdc:	b933      	cbnz	r3, 8005cec <_free_r+0x2c>
 8005cde:	6063      	str	r3, [r4, #4]
 8005ce0:	6014      	str	r4, [r2, #0]
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ce8:	f000 b8e0 	b.w	8005eac <__malloc_unlock>
 8005cec:	42a3      	cmp	r3, r4
 8005cee:	d908      	bls.n	8005d02 <_free_r+0x42>
 8005cf0:	6820      	ldr	r0, [r4, #0]
 8005cf2:	1821      	adds	r1, r4, r0
 8005cf4:	428b      	cmp	r3, r1
 8005cf6:	bf01      	itttt	eq
 8005cf8:	6819      	ldreq	r1, [r3, #0]
 8005cfa:	685b      	ldreq	r3, [r3, #4]
 8005cfc:	1809      	addeq	r1, r1, r0
 8005cfe:	6021      	streq	r1, [r4, #0]
 8005d00:	e7ed      	b.n	8005cde <_free_r+0x1e>
 8005d02:	461a      	mov	r2, r3
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	b10b      	cbz	r3, 8005d0c <_free_r+0x4c>
 8005d08:	42a3      	cmp	r3, r4
 8005d0a:	d9fa      	bls.n	8005d02 <_free_r+0x42>
 8005d0c:	6811      	ldr	r1, [r2, #0]
 8005d0e:	1850      	adds	r0, r2, r1
 8005d10:	42a0      	cmp	r0, r4
 8005d12:	d10b      	bne.n	8005d2c <_free_r+0x6c>
 8005d14:	6820      	ldr	r0, [r4, #0]
 8005d16:	4401      	add	r1, r0
 8005d18:	1850      	adds	r0, r2, r1
 8005d1a:	4283      	cmp	r3, r0
 8005d1c:	6011      	str	r1, [r2, #0]
 8005d1e:	d1e0      	bne.n	8005ce2 <_free_r+0x22>
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	4408      	add	r0, r1
 8005d26:	6010      	str	r0, [r2, #0]
 8005d28:	6053      	str	r3, [r2, #4]
 8005d2a:	e7da      	b.n	8005ce2 <_free_r+0x22>
 8005d2c:	d902      	bls.n	8005d34 <_free_r+0x74>
 8005d2e:	230c      	movs	r3, #12
 8005d30:	602b      	str	r3, [r5, #0]
 8005d32:	e7d6      	b.n	8005ce2 <_free_r+0x22>
 8005d34:	6820      	ldr	r0, [r4, #0]
 8005d36:	1821      	adds	r1, r4, r0
 8005d38:	428b      	cmp	r3, r1
 8005d3a:	bf01      	itttt	eq
 8005d3c:	6819      	ldreq	r1, [r3, #0]
 8005d3e:	685b      	ldreq	r3, [r3, #4]
 8005d40:	1809      	addeq	r1, r1, r0
 8005d42:	6021      	streq	r1, [r4, #0]
 8005d44:	6063      	str	r3, [r4, #4]
 8005d46:	6054      	str	r4, [r2, #4]
 8005d48:	e7cb      	b.n	8005ce2 <_free_r+0x22>
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	200003d8 	.word	0x200003d8

08005d50 <malloc>:
 8005d50:	4b02      	ldr	r3, [pc, #8]	; (8005d5c <malloc+0xc>)
 8005d52:	4601      	mov	r1, r0
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	f000 b823 	b.w	8005da0 <_malloc_r>
 8005d5a:	bf00      	nop
 8005d5c:	20000064 	.word	0x20000064

08005d60 <sbrk_aligned>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	4e0e      	ldr	r6, [pc, #56]	; (8005d9c <sbrk_aligned+0x3c>)
 8005d64:	460c      	mov	r4, r1
 8005d66:	6831      	ldr	r1, [r6, #0]
 8005d68:	4605      	mov	r5, r0
 8005d6a:	b911      	cbnz	r1, 8005d72 <sbrk_aligned+0x12>
 8005d6c:	f000 fe8c 	bl	8006a88 <_sbrk_r>
 8005d70:	6030      	str	r0, [r6, #0]
 8005d72:	4621      	mov	r1, r4
 8005d74:	4628      	mov	r0, r5
 8005d76:	f000 fe87 	bl	8006a88 <_sbrk_r>
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	d00a      	beq.n	8005d94 <sbrk_aligned+0x34>
 8005d7e:	1cc4      	adds	r4, r0, #3
 8005d80:	f024 0403 	bic.w	r4, r4, #3
 8005d84:	42a0      	cmp	r0, r4
 8005d86:	d007      	beq.n	8005d98 <sbrk_aligned+0x38>
 8005d88:	1a21      	subs	r1, r4, r0
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 fe7c 	bl	8006a88 <_sbrk_r>
 8005d90:	3001      	adds	r0, #1
 8005d92:	d101      	bne.n	8005d98 <sbrk_aligned+0x38>
 8005d94:	f04f 34ff 	mov.w	r4, #4294967295
 8005d98:	4620      	mov	r0, r4
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	200003dc 	.word	0x200003dc

08005da0 <_malloc_r>:
 8005da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da4:	1ccd      	adds	r5, r1, #3
 8005da6:	f025 0503 	bic.w	r5, r5, #3
 8005daa:	3508      	adds	r5, #8
 8005dac:	2d0c      	cmp	r5, #12
 8005dae:	bf38      	it	cc
 8005db0:	250c      	movcc	r5, #12
 8005db2:	2d00      	cmp	r5, #0
 8005db4:	4607      	mov	r7, r0
 8005db6:	db01      	blt.n	8005dbc <_malloc_r+0x1c>
 8005db8:	42a9      	cmp	r1, r5
 8005dba:	d905      	bls.n	8005dc8 <_malloc_r+0x28>
 8005dbc:	230c      	movs	r3, #12
 8005dbe:	2600      	movs	r6, #0
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e9c <_malloc_r+0xfc>
 8005dcc:	f000 f868 	bl	8005ea0 <__malloc_lock>
 8005dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8005dd4:	461c      	mov	r4, r3
 8005dd6:	bb5c      	cbnz	r4, 8005e30 <_malloc_r+0x90>
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f7ff ffc0 	bl	8005d60 <sbrk_aligned>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	4604      	mov	r4, r0
 8005de4:	d155      	bne.n	8005e92 <_malloc_r+0xf2>
 8005de6:	f8d8 4000 	ldr.w	r4, [r8]
 8005dea:	4626      	mov	r6, r4
 8005dec:	2e00      	cmp	r6, #0
 8005dee:	d145      	bne.n	8005e7c <_malloc_r+0xdc>
 8005df0:	2c00      	cmp	r4, #0
 8005df2:	d048      	beq.n	8005e86 <_malloc_r+0xe6>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	4631      	mov	r1, r6
 8005df8:	4638      	mov	r0, r7
 8005dfa:	eb04 0903 	add.w	r9, r4, r3
 8005dfe:	f000 fe43 	bl	8006a88 <_sbrk_r>
 8005e02:	4581      	cmp	r9, r0
 8005e04:	d13f      	bne.n	8005e86 <_malloc_r+0xe6>
 8005e06:	6821      	ldr	r1, [r4, #0]
 8005e08:	4638      	mov	r0, r7
 8005e0a:	1a6d      	subs	r5, r5, r1
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	f7ff ffa7 	bl	8005d60 <sbrk_aligned>
 8005e12:	3001      	adds	r0, #1
 8005e14:	d037      	beq.n	8005e86 <_malloc_r+0xe6>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	442b      	add	r3, r5
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d038      	beq.n	8005e96 <_malloc_r+0xf6>
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	42a2      	cmp	r2, r4
 8005e28:	d12b      	bne.n	8005e82 <_malloc_r+0xe2>
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	e00f      	b.n	8005e50 <_malloc_r+0xb0>
 8005e30:	6822      	ldr	r2, [r4, #0]
 8005e32:	1b52      	subs	r2, r2, r5
 8005e34:	d41f      	bmi.n	8005e76 <_malloc_r+0xd6>
 8005e36:	2a0b      	cmp	r2, #11
 8005e38:	d917      	bls.n	8005e6a <_malloc_r+0xca>
 8005e3a:	1961      	adds	r1, r4, r5
 8005e3c:	42a3      	cmp	r3, r4
 8005e3e:	6025      	str	r5, [r4, #0]
 8005e40:	bf18      	it	ne
 8005e42:	6059      	strne	r1, [r3, #4]
 8005e44:	6863      	ldr	r3, [r4, #4]
 8005e46:	bf08      	it	eq
 8005e48:	f8c8 1000 	streq.w	r1, [r8]
 8005e4c:	5162      	str	r2, [r4, r5]
 8005e4e:	604b      	str	r3, [r1, #4]
 8005e50:	4638      	mov	r0, r7
 8005e52:	f104 060b 	add.w	r6, r4, #11
 8005e56:	f000 f829 	bl	8005eac <__malloc_unlock>
 8005e5a:	f026 0607 	bic.w	r6, r6, #7
 8005e5e:	1d23      	adds	r3, r4, #4
 8005e60:	1af2      	subs	r2, r6, r3
 8005e62:	d0ae      	beq.n	8005dc2 <_malloc_r+0x22>
 8005e64:	1b9b      	subs	r3, r3, r6
 8005e66:	50a3      	str	r3, [r4, r2]
 8005e68:	e7ab      	b.n	8005dc2 <_malloc_r+0x22>
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	6862      	ldr	r2, [r4, #4]
 8005e6e:	d1dd      	bne.n	8005e2c <_malloc_r+0x8c>
 8005e70:	f8c8 2000 	str.w	r2, [r8]
 8005e74:	e7ec      	b.n	8005e50 <_malloc_r+0xb0>
 8005e76:	4623      	mov	r3, r4
 8005e78:	6864      	ldr	r4, [r4, #4]
 8005e7a:	e7ac      	b.n	8005dd6 <_malloc_r+0x36>
 8005e7c:	4634      	mov	r4, r6
 8005e7e:	6876      	ldr	r6, [r6, #4]
 8005e80:	e7b4      	b.n	8005dec <_malloc_r+0x4c>
 8005e82:	4613      	mov	r3, r2
 8005e84:	e7cc      	b.n	8005e20 <_malloc_r+0x80>
 8005e86:	230c      	movs	r3, #12
 8005e88:	4638      	mov	r0, r7
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	f000 f80e 	bl	8005eac <__malloc_unlock>
 8005e90:	e797      	b.n	8005dc2 <_malloc_r+0x22>
 8005e92:	6025      	str	r5, [r4, #0]
 8005e94:	e7dc      	b.n	8005e50 <_malloc_r+0xb0>
 8005e96:	605b      	str	r3, [r3, #4]
 8005e98:	deff      	udf	#255	; 0xff
 8005e9a:	bf00      	nop
 8005e9c:	200003d8 	.word	0x200003d8

08005ea0 <__malloc_lock>:
 8005ea0:	4801      	ldr	r0, [pc, #4]	; (8005ea8 <__malloc_lock+0x8>)
 8005ea2:	f7ff b881 	b.w	8004fa8 <__retarget_lock_acquire_recursive>
 8005ea6:	bf00      	nop
 8005ea8:	200003d4 	.word	0x200003d4

08005eac <__malloc_unlock>:
 8005eac:	4801      	ldr	r0, [pc, #4]	; (8005eb4 <__malloc_unlock+0x8>)
 8005eae:	f7ff b87c 	b.w	8004faa <__retarget_lock_release_recursive>
 8005eb2:	bf00      	nop
 8005eb4:	200003d4 	.word	0x200003d4

08005eb8 <_Balloc>:
 8005eb8:	b570      	push	{r4, r5, r6, lr}
 8005eba:	69c6      	ldr	r6, [r0, #28]
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	460d      	mov	r5, r1
 8005ec0:	b976      	cbnz	r6, 8005ee0 <_Balloc+0x28>
 8005ec2:	2010      	movs	r0, #16
 8005ec4:	f7ff ff44 	bl	8005d50 <malloc>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	61e0      	str	r0, [r4, #28]
 8005ecc:	b920      	cbnz	r0, 8005ed8 <_Balloc+0x20>
 8005ece:	216b      	movs	r1, #107	; 0x6b
 8005ed0:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <_Balloc+0x78>)
 8005ed2:	4818      	ldr	r0, [pc, #96]	; (8005f34 <_Balloc+0x7c>)
 8005ed4:	f000 fde8 	bl	8006aa8 <__assert_func>
 8005ed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005edc:	6006      	str	r6, [r0, #0]
 8005ede:	60c6      	str	r6, [r0, #12]
 8005ee0:	69e6      	ldr	r6, [r4, #28]
 8005ee2:	68f3      	ldr	r3, [r6, #12]
 8005ee4:	b183      	cbz	r3, 8005f08 <_Balloc+0x50>
 8005ee6:	69e3      	ldr	r3, [r4, #28]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005eee:	b9b8      	cbnz	r0, 8005f20 <_Balloc+0x68>
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	fa01 f605 	lsl.w	r6, r1, r5
 8005ef6:	1d72      	adds	r2, r6, #5
 8005ef8:	4620      	mov	r0, r4
 8005efa:	0092      	lsls	r2, r2, #2
 8005efc:	f000 fdf2 	bl	8006ae4 <_calloc_r>
 8005f00:	b160      	cbz	r0, 8005f1c <_Balloc+0x64>
 8005f02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f06:	e00e      	b.n	8005f26 <_Balloc+0x6e>
 8005f08:	2221      	movs	r2, #33	; 0x21
 8005f0a:	2104      	movs	r1, #4
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f000 fde9 	bl	8006ae4 <_calloc_r>
 8005f12:	69e3      	ldr	r3, [r4, #28]
 8005f14:	60f0      	str	r0, [r6, #12]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e4      	bne.n	8005ee6 <_Balloc+0x2e>
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	6802      	ldr	r2, [r0, #0]
 8005f22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f26:	2300      	movs	r3, #0
 8005f28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f2c:	e7f7      	b.n	8005f1e <_Balloc+0x66>
 8005f2e:	bf00      	nop
 8005f30:	080071bb 	.word	0x080071bb
 8005f34:	0800723b 	.word	0x0800723b

08005f38 <_Bfree>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	69c6      	ldr	r6, [r0, #28]
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	b976      	cbnz	r6, 8005f60 <_Bfree+0x28>
 8005f42:	2010      	movs	r0, #16
 8005f44:	f7ff ff04 	bl	8005d50 <malloc>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	61e8      	str	r0, [r5, #28]
 8005f4c:	b920      	cbnz	r0, 8005f58 <_Bfree+0x20>
 8005f4e:	218f      	movs	r1, #143	; 0x8f
 8005f50:	4b08      	ldr	r3, [pc, #32]	; (8005f74 <_Bfree+0x3c>)
 8005f52:	4809      	ldr	r0, [pc, #36]	; (8005f78 <_Bfree+0x40>)
 8005f54:	f000 fda8 	bl	8006aa8 <__assert_func>
 8005f58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f5c:	6006      	str	r6, [r0, #0]
 8005f5e:	60c6      	str	r6, [r0, #12]
 8005f60:	b13c      	cbz	r4, 8005f72 <_Bfree+0x3a>
 8005f62:	69eb      	ldr	r3, [r5, #28]
 8005f64:	6862      	ldr	r2, [r4, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f6c:	6021      	str	r1, [r4, #0]
 8005f6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	080071bb 	.word	0x080071bb
 8005f78:	0800723b 	.word	0x0800723b

08005f7c <__multadd>:
 8005f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f80:	4607      	mov	r7, r0
 8005f82:	460c      	mov	r4, r1
 8005f84:	461e      	mov	r6, r3
 8005f86:	2000      	movs	r0, #0
 8005f88:	690d      	ldr	r5, [r1, #16]
 8005f8a:	f101 0c14 	add.w	ip, r1, #20
 8005f8e:	f8dc 3000 	ldr.w	r3, [ip]
 8005f92:	3001      	adds	r0, #1
 8005f94:	b299      	uxth	r1, r3
 8005f96:	fb02 6101 	mla	r1, r2, r1, r6
 8005f9a:	0c1e      	lsrs	r6, r3, #16
 8005f9c:	0c0b      	lsrs	r3, r1, #16
 8005f9e:	fb02 3306 	mla	r3, r2, r6, r3
 8005fa2:	b289      	uxth	r1, r1
 8005fa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005fa8:	4285      	cmp	r5, r0
 8005faa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005fae:	f84c 1b04 	str.w	r1, [ip], #4
 8005fb2:	dcec      	bgt.n	8005f8e <__multadd+0x12>
 8005fb4:	b30e      	cbz	r6, 8005ffa <__multadd+0x7e>
 8005fb6:	68a3      	ldr	r3, [r4, #8]
 8005fb8:	42ab      	cmp	r3, r5
 8005fba:	dc19      	bgt.n	8005ff0 <__multadd+0x74>
 8005fbc:	6861      	ldr	r1, [r4, #4]
 8005fbe:	4638      	mov	r0, r7
 8005fc0:	3101      	adds	r1, #1
 8005fc2:	f7ff ff79 	bl	8005eb8 <_Balloc>
 8005fc6:	4680      	mov	r8, r0
 8005fc8:	b928      	cbnz	r0, 8005fd6 <__multadd+0x5a>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	21ba      	movs	r1, #186	; 0xba
 8005fce:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <__multadd+0x84>)
 8005fd0:	480c      	ldr	r0, [pc, #48]	; (8006004 <__multadd+0x88>)
 8005fd2:	f000 fd69 	bl	8006aa8 <__assert_func>
 8005fd6:	6922      	ldr	r2, [r4, #16]
 8005fd8:	f104 010c 	add.w	r1, r4, #12
 8005fdc:	3202      	adds	r2, #2
 8005fde:	0092      	lsls	r2, r2, #2
 8005fe0:	300c      	adds	r0, #12
 8005fe2:	f7fe fff1 	bl	8004fc8 <memcpy>
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f7ff ffa5 	bl	8005f38 <_Bfree>
 8005fee:	4644      	mov	r4, r8
 8005ff0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ff4:	3501      	adds	r5, #1
 8005ff6:	615e      	str	r6, [r3, #20]
 8005ff8:	6125      	str	r5, [r4, #16]
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006000:	0800722a 	.word	0x0800722a
 8006004:	0800723b 	.word	0x0800723b

08006008 <__hi0bits>:
 8006008:	0c02      	lsrs	r2, r0, #16
 800600a:	0412      	lsls	r2, r2, #16
 800600c:	4603      	mov	r3, r0
 800600e:	b9ca      	cbnz	r2, 8006044 <__hi0bits+0x3c>
 8006010:	0403      	lsls	r3, r0, #16
 8006012:	2010      	movs	r0, #16
 8006014:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006018:	bf04      	itt	eq
 800601a:	021b      	lsleq	r3, r3, #8
 800601c:	3008      	addeq	r0, #8
 800601e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006022:	bf04      	itt	eq
 8006024:	011b      	lsleq	r3, r3, #4
 8006026:	3004      	addeq	r0, #4
 8006028:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800602c:	bf04      	itt	eq
 800602e:	009b      	lsleq	r3, r3, #2
 8006030:	3002      	addeq	r0, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	db05      	blt.n	8006042 <__hi0bits+0x3a>
 8006036:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800603a:	f100 0001 	add.w	r0, r0, #1
 800603e:	bf08      	it	eq
 8006040:	2020      	moveq	r0, #32
 8006042:	4770      	bx	lr
 8006044:	2000      	movs	r0, #0
 8006046:	e7e5      	b.n	8006014 <__hi0bits+0xc>

08006048 <__lo0bits>:
 8006048:	6803      	ldr	r3, [r0, #0]
 800604a:	4602      	mov	r2, r0
 800604c:	f013 0007 	ands.w	r0, r3, #7
 8006050:	d00b      	beq.n	800606a <__lo0bits+0x22>
 8006052:	07d9      	lsls	r1, r3, #31
 8006054:	d421      	bmi.n	800609a <__lo0bits+0x52>
 8006056:	0798      	lsls	r0, r3, #30
 8006058:	bf49      	itett	mi
 800605a:	085b      	lsrmi	r3, r3, #1
 800605c:	089b      	lsrpl	r3, r3, #2
 800605e:	2001      	movmi	r0, #1
 8006060:	6013      	strmi	r3, [r2, #0]
 8006062:	bf5c      	itt	pl
 8006064:	2002      	movpl	r0, #2
 8006066:	6013      	strpl	r3, [r2, #0]
 8006068:	4770      	bx	lr
 800606a:	b299      	uxth	r1, r3
 800606c:	b909      	cbnz	r1, 8006072 <__lo0bits+0x2a>
 800606e:	2010      	movs	r0, #16
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	b2d9      	uxtb	r1, r3
 8006074:	b909      	cbnz	r1, 800607a <__lo0bits+0x32>
 8006076:	3008      	adds	r0, #8
 8006078:	0a1b      	lsrs	r3, r3, #8
 800607a:	0719      	lsls	r1, r3, #28
 800607c:	bf04      	itt	eq
 800607e:	091b      	lsreq	r3, r3, #4
 8006080:	3004      	addeq	r0, #4
 8006082:	0799      	lsls	r1, r3, #30
 8006084:	bf04      	itt	eq
 8006086:	089b      	lsreq	r3, r3, #2
 8006088:	3002      	addeq	r0, #2
 800608a:	07d9      	lsls	r1, r3, #31
 800608c:	d403      	bmi.n	8006096 <__lo0bits+0x4e>
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	f100 0001 	add.w	r0, r0, #1
 8006094:	d003      	beq.n	800609e <__lo0bits+0x56>
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	4770      	bx	lr
 800609a:	2000      	movs	r0, #0
 800609c:	4770      	bx	lr
 800609e:	2020      	movs	r0, #32
 80060a0:	4770      	bx	lr
	...

080060a4 <__i2b>:
 80060a4:	b510      	push	{r4, lr}
 80060a6:	460c      	mov	r4, r1
 80060a8:	2101      	movs	r1, #1
 80060aa:	f7ff ff05 	bl	8005eb8 <_Balloc>
 80060ae:	4602      	mov	r2, r0
 80060b0:	b928      	cbnz	r0, 80060be <__i2b+0x1a>
 80060b2:	f240 1145 	movw	r1, #325	; 0x145
 80060b6:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <__i2b+0x24>)
 80060b8:	4804      	ldr	r0, [pc, #16]	; (80060cc <__i2b+0x28>)
 80060ba:	f000 fcf5 	bl	8006aa8 <__assert_func>
 80060be:	2301      	movs	r3, #1
 80060c0:	6144      	str	r4, [r0, #20]
 80060c2:	6103      	str	r3, [r0, #16]
 80060c4:	bd10      	pop	{r4, pc}
 80060c6:	bf00      	nop
 80060c8:	0800722a 	.word	0x0800722a
 80060cc:	0800723b 	.word	0x0800723b

080060d0 <__multiply>:
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	4691      	mov	r9, r2
 80060d6:	690a      	ldr	r2, [r1, #16]
 80060d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80060dc:	460c      	mov	r4, r1
 80060de:	429a      	cmp	r2, r3
 80060e0:	bfbe      	ittt	lt
 80060e2:	460b      	movlt	r3, r1
 80060e4:	464c      	movlt	r4, r9
 80060e6:	4699      	movlt	r9, r3
 80060e8:	6927      	ldr	r7, [r4, #16]
 80060ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80060ee:	68a3      	ldr	r3, [r4, #8]
 80060f0:	6861      	ldr	r1, [r4, #4]
 80060f2:	eb07 060a 	add.w	r6, r7, sl
 80060f6:	42b3      	cmp	r3, r6
 80060f8:	b085      	sub	sp, #20
 80060fa:	bfb8      	it	lt
 80060fc:	3101      	addlt	r1, #1
 80060fe:	f7ff fedb 	bl	8005eb8 <_Balloc>
 8006102:	b930      	cbnz	r0, 8006112 <__multiply+0x42>
 8006104:	4602      	mov	r2, r0
 8006106:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800610a:	4b43      	ldr	r3, [pc, #268]	; (8006218 <__multiply+0x148>)
 800610c:	4843      	ldr	r0, [pc, #268]	; (800621c <__multiply+0x14c>)
 800610e:	f000 fccb 	bl	8006aa8 <__assert_func>
 8006112:	f100 0514 	add.w	r5, r0, #20
 8006116:	462b      	mov	r3, r5
 8006118:	2200      	movs	r2, #0
 800611a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800611e:	4543      	cmp	r3, r8
 8006120:	d321      	bcc.n	8006166 <__multiply+0x96>
 8006122:	f104 0314 	add.w	r3, r4, #20
 8006126:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800612a:	f109 0314 	add.w	r3, r9, #20
 800612e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006132:	9202      	str	r2, [sp, #8]
 8006134:	1b3a      	subs	r2, r7, r4
 8006136:	3a15      	subs	r2, #21
 8006138:	f022 0203 	bic.w	r2, r2, #3
 800613c:	3204      	adds	r2, #4
 800613e:	f104 0115 	add.w	r1, r4, #21
 8006142:	428f      	cmp	r7, r1
 8006144:	bf38      	it	cc
 8006146:	2204      	movcc	r2, #4
 8006148:	9201      	str	r2, [sp, #4]
 800614a:	9a02      	ldr	r2, [sp, #8]
 800614c:	9303      	str	r3, [sp, #12]
 800614e:	429a      	cmp	r2, r3
 8006150:	d80c      	bhi.n	800616c <__multiply+0x9c>
 8006152:	2e00      	cmp	r6, #0
 8006154:	dd03      	ble.n	800615e <__multiply+0x8e>
 8006156:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800615a:	2b00      	cmp	r3, #0
 800615c:	d05a      	beq.n	8006214 <__multiply+0x144>
 800615e:	6106      	str	r6, [r0, #16]
 8006160:	b005      	add	sp, #20
 8006162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006166:	f843 2b04 	str.w	r2, [r3], #4
 800616a:	e7d8      	b.n	800611e <__multiply+0x4e>
 800616c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006170:	f1ba 0f00 	cmp.w	sl, #0
 8006174:	d023      	beq.n	80061be <__multiply+0xee>
 8006176:	46a9      	mov	r9, r5
 8006178:	f04f 0c00 	mov.w	ip, #0
 800617c:	f104 0e14 	add.w	lr, r4, #20
 8006180:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006184:	f8d9 1000 	ldr.w	r1, [r9]
 8006188:	fa1f fb82 	uxth.w	fp, r2
 800618c:	b289      	uxth	r1, r1
 800618e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006192:	4461      	add	r1, ip
 8006194:	f8d9 c000 	ldr.w	ip, [r9]
 8006198:	0c12      	lsrs	r2, r2, #16
 800619a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800619e:	fb0a c202 	mla	r2, sl, r2, ip
 80061a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80061a6:	b289      	uxth	r1, r1
 80061a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80061ac:	4577      	cmp	r7, lr
 80061ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80061b2:	f849 1b04 	str.w	r1, [r9], #4
 80061b6:	d8e3      	bhi.n	8006180 <__multiply+0xb0>
 80061b8:	9a01      	ldr	r2, [sp, #4]
 80061ba:	f845 c002 	str.w	ip, [r5, r2]
 80061be:	9a03      	ldr	r2, [sp, #12]
 80061c0:	3304      	adds	r3, #4
 80061c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061c6:	f1b9 0f00 	cmp.w	r9, #0
 80061ca:	d021      	beq.n	8006210 <__multiply+0x140>
 80061cc:	46ae      	mov	lr, r5
 80061ce:	f04f 0a00 	mov.w	sl, #0
 80061d2:	6829      	ldr	r1, [r5, #0]
 80061d4:	f104 0c14 	add.w	ip, r4, #20
 80061d8:	f8bc b000 	ldrh.w	fp, [ip]
 80061dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80061e0:	b289      	uxth	r1, r1
 80061e2:	fb09 220b 	mla	r2, r9, fp, r2
 80061e6:	4452      	add	r2, sl
 80061e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80061ec:	f84e 1b04 	str.w	r1, [lr], #4
 80061f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80061f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061f8:	f8be 1000 	ldrh.w	r1, [lr]
 80061fc:	4567      	cmp	r7, ip
 80061fe:	fb09 110a 	mla	r1, r9, sl, r1
 8006202:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006206:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800620a:	d8e5      	bhi.n	80061d8 <__multiply+0x108>
 800620c:	9a01      	ldr	r2, [sp, #4]
 800620e:	50a9      	str	r1, [r5, r2]
 8006210:	3504      	adds	r5, #4
 8006212:	e79a      	b.n	800614a <__multiply+0x7a>
 8006214:	3e01      	subs	r6, #1
 8006216:	e79c      	b.n	8006152 <__multiply+0x82>
 8006218:	0800722a 	.word	0x0800722a
 800621c:	0800723b 	.word	0x0800723b

08006220 <__pow5mult>:
 8006220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006224:	4615      	mov	r5, r2
 8006226:	f012 0203 	ands.w	r2, r2, #3
 800622a:	4606      	mov	r6, r0
 800622c:	460f      	mov	r7, r1
 800622e:	d007      	beq.n	8006240 <__pow5mult+0x20>
 8006230:	4c25      	ldr	r4, [pc, #148]	; (80062c8 <__pow5mult+0xa8>)
 8006232:	3a01      	subs	r2, #1
 8006234:	2300      	movs	r3, #0
 8006236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800623a:	f7ff fe9f 	bl	8005f7c <__multadd>
 800623e:	4607      	mov	r7, r0
 8006240:	10ad      	asrs	r5, r5, #2
 8006242:	d03d      	beq.n	80062c0 <__pow5mult+0xa0>
 8006244:	69f4      	ldr	r4, [r6, #28]
 8006246:	b97c      	cbnz	r4, 8006268 <__pow5mult+0x48>
 8006248:	2010      	movs	r0, #16
 800624a:	f7ff fd81 	bl	8005d50 <malloc>
 800624e:	4602      	mov	r2, r0
 8006250:	61f0      	str	r0, [r6, #28]
 8006252:	b928      	cbnz	r0, 8006260 <__pow5mult+0x40>
 8006254:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006258:	4b1c      	ldr	r3, [pc, #112]	; (80062cc <__pow5mult+0xac>)
 800625a:	481d      	ldr	r0, [pc, #116]	; (80062d0 <__pow5mult+0xb0>)
 800625c:	f000 fc24 	bl	8006aa8 <__assert_func>
 8006260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006264:	6004      	str	r4, [r0, #0]
 8006266:	60c4      	str	r4, [r0, #12]
 8006268:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800626c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006270:	b94c      	cbnz	r4, 8006286 <__pow5mult+0x66>
 8006272:	f240 2171 	movw	r1, #625	; 0x271
 8006276:	4630      	mov	r0, r6
 8006278:	f7ff ff14 	bl	80060a4 <__i2b>
 800627c:	2300      	movs	r3, #0
 800627e:	4604      	mov	r4, r0
 8006280:	f8c8 0008 	str.w	r0, [r8, #8]
 8006284:	6003      	str	r3, [r0, #0]
 8006286:	f04f 0900 	mov.w	r9, #0
 800628a:	07eb      	lsls	r3, r5, #31
 800628c:	d50a      	bpl.n	80062a4 <__pow5mult+0x84>
 800628e:	4639      	mov	r1, r7
 8006290:	4622      	mov	r2, r4
 8006292:	4630      	mov	r0, r6
 8006294:	f7ff ff1c 	bl	80060d0 <__multiply>
 8006298:	4680      	mov	r8, r0
 800629a:	4639      	mov	r1, r7
 800629c:	4630      	mov	r0, r6
 800629e:	f7ff fe4b 	bl	8005f38 <_Bfree>
 80062a2:	4647      	mov	r7, r8
 80062a4:	106d      	asrs	r5, r5, #1
 80062a6:	d00b      	beq.n	80062c0 <__pow5mult+0xa0>
 80062a8:	6820      	ldr	r0, [r4, #0]
 80062aa:	b938      	cbnz	r0, 80062bc <__pow5mult+0x9c>
 80062ac:	4622      	mov	r2, r4
 80062ae:	4621      	mov	r1, r4
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7ff ff0d 	bl	80060d0 <__multiply>
 80062b6:	6020      	str	r0, [r4, #0]
 80062b8:	f8c0 9000 	str.w	r9, [r0]
 80062bc:	4604      	mov	r4, r0
 80062be:	e7e4      	b.n	800628a <__pow5mult+0x6a>
 80062c0:	4638      	mov	r0, r7
 80062c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062c6:	bf00      	nop
 80062c8:	08007388 	.word	0x08007388
 80062cc:	080071bb 	.word	0x080071bb
 80062d0:	0800723b 	.word	0x0800723b

080062d4 <__lshift>:
 80062d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d8:	460c      	mov	r4, r1
 80062da:	4607      	mov	r7, r0
 80062dc:	4691      	mov	r9, r2
 80062de:	6923      	ldr	r3, [r4, #16]
 80062e0:	6849      	ldr	r1, [r1, #4]
 80062e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062e6:	68a3      	ldr	r3, [r4, #8]
 80062e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062ec:	f108 0601 	add.w	r6, r8, #1
 80062f0:	42b3      	cmp	r3, r6
 80062f2:	db0b      	blt.n	800630c <__lshift+0x38>
 80062f4:	4638      	mov	r0, r7
 80062f6:	f7ff fddf 	bl	8005eb8 <_Balloc>
 80062fa:	4605      	mov	r5, r0
 80062fc:	b948      	cbnz	r0, 8006312 <__lshift+0x3e>
 80062fe:	4602      	mov	r2, r0
 8006300:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006304:	4b27      	ldr	r3, [pc, #156]	; (80063a4 <__lshift+0xd0>)
 8006306:	4828      	ldr	r0, [pc, #160]	; (80063a8 <__lshift+0xd4>)
 8006308:	f000 fbce 	bl	8006aa8 <__assert_func>
 800630c:	3101      	adds	r1, #1
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	e7ee      	b.n	80062f0 <__lshift+0x1c>
 8006312:	2300      	movs	r3, #0
 8006314:	f100 0114 	add.w	r1, r0, #20
 8006318:	f100 0210 	add.w	r2, r0, #16
 800631c:	4618      	mov	r0, r3
 800631e:	4553      	cmp	r3, sl
 8006320:	db33      	blt.n	800638a <__lshift+0xb6>
 8006322:	6920      	ldr	r0, [r4, #16]
 8006324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006328:	f104 0314 	add.w	r3, r4, #20
 800632c:	f019 091f 	ands.w	r9, r9, #31
 8006330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006334:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006338:	d02b      	beq.n	8006392 <__lshift+0xbe>
 800633a:	468a      	mov	sl, r1
 800633c:	2200      	movs	r2, #0
 800633e:	f1c9 0e20 	rsb	lr, r9, #32
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	fa00 f009 	lsl.w	r0, r0, r9
 8006348:	4310      	orrs	r0, r2
 800634a:	f84a 0b04 	str.w	r0, [sl], #4
 800634e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006352:	459c      	cmp	ip, r3
 8006354:	fa22 f20e 	lsr.w	r2, r2, lr
 8006358:	d8f3      	bhi.n	8006342 <__lshift+0x6e>
 800635a:	ebac 0304 	sub.w	r3, ip, r4
 800635e:	3b15      	subs	r3, #21
 8006360:	f023 0303 	bic.w	r3, r3, #3
 8006364:	3304      	adds	r3, #4
 8006366:	f104 0015 	add.w	r0, r4, #21
 800636a:	4584      	cmp	ip, r0
 800636c:	bf38      	it	cc
 800636e:	2304      	movcc	r3, #4
 8006370:	50ca      	str	r2, [r1, r3]
 8006372:	b10a      	cbz	r2, 8006378 <__lshift+0xa4>
 8006374:	f108 0602 	add.w	r6, r8, #2
 8006378:	3e01      	subs	r6, #1
 800637a:	4638      	mov	r0, r7
 800637c:	4621      	mov	r1, r4
 800637e:	612e      	str	r6, [r5, #16]
 8006380:	f7ff fdda 	bl	8005f38 <_Bfree>
 8006384:	4628      	mov	r0, r5
 8006386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638a:	f842 0f04 	str.w	r0, [r2, #4]!
 800638e:	3301      	adds	r3, #1
 8006390:	e7c5      	b.n	800631e <__lshift+0x4a>
 8006392:	3904      	subs	r1, #4
 8006394:	f853 2b04 	ldr.w	r2, [r3], #4
 8006398:	459c      	cmp	ip, r3
 800639a:	f841 2f04 	str.w	r2, [r1, #4]!
 800639e:	d8f9      	bhi.n	8006394 <__lshift+0xc0>
 80063a0:	e7ea      	b.n	8006378 <__lshift+0xa4>
 80063a2:	bf00      	nop
 80063a4:	0800722a 	.word	0x0800722a
 80063a8:	0800723b 	.word	0x0800723b

080063ac <__mcmp>:
 80063ac:	4603      	mov	r3, r0
 80063ae:	690a      	ldr	r2, [r1, #16]
 80063b0:	6900      	ldr	r0, [r0, #16]
 80063b2:	b530      	push	{r4, r5, lr}
 80063b4:	1a80      	subs	r0, r0, r2
 80063b6:	d10d      	bne.n	80063d4 <__mcmp+0x28>
 80063b8:	3314      	adds	r3, #20
 80063ba:	3114      	adds	r1, #20
 80063bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80063c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80063c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80063c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80063cc:	4295      	cmp	r5, r2
 80063ce:	d002      	beq.n	80063d6 <__mcmp+0x2a>
 80063d0:	d304      	bcc.n	80063dc <__mcmp+0x30>
 80063d2:	2001      	movs	r0, #1
 80063d4:	bd30      	pop	{r4, r5, pc}
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	d3f4      	bcc.n	80063c4 <__mcmp+0x18>
 80063da:	e7fb      	b.n	80063d4 <__mcmp+0x28>
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	e7f8      	b.n	80063d4 <__mcmp+0x28>
	...

080063e4 <__mdiff>:
 80063e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e8:	460d      	mov	r5, r1
 80063ea:	4607      	mov	r7, r0
 80063ec:	4611      	mov	r1, r2
 80063ee:	4628      	mov	r0, r5
 80063f0:	4614      	mov	r4, r2
 80063f2:	f7ff ffdb 	bl	80063ac <__mcmp>
 80063f6:	1e06      	subs	r6, r0, #0
 80063f8:	d111      	bne.n	800641e <__mdiff+0x3a>
 80063fa:	4631      	mov	r1, r6
 80063fc:	4638      	mov	r0, r7
 80063fe:	f7ff fd5b 	bl	8005eb8 <_Balloc>
 8006402:	4602      	mov	r2, r0
 8006404:	b928      	cbnz	r0, 8006412 <__mdiff+0x2e>
 8006406:	f240 2137 	movw	r1, #567	; 0x237
 800640a:	4b3a      	ldr	r3, [pc, #232]	; (80064f4 <__mdiff+0x110>)
 800640c:	483a      	ldr	r0, [pc, #232]	; (80064f8 <__mdiff+0x114>)
 800640e:	f000 fb4b 	bl	8006aa8 <__assert_func>
 8006412:	2301      	movs	r3, #1
 8006414:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006418:	4610      	mov	r0, r2
 800641a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641e:	bfa4      	itt	ge
 8006420:	4623      	movge	r3, r4
 8006422:	462c      	movge	r4, r5
 8006424:	4638      	mov	r0, r7
 8006426:	6861      	ldr	r1, [r4, #4]
 8006428:	bfa6      	itte	ge
 800642a:	461d      	movge	r5, r3
 800642c:	2600      	movge	r6, #0
 800642e:	2601      	movlt	r6, #1
 8006430:	f7ff fd42 	bl	8005eb8 <_Balloc>
 8006434:	4602      	mov	r2, r0
 8006436:	b918      	cbnz	r0, 8006440 <__mdiff+0x5c>
 8006438:	f240 2145 	movw	r1, #581	; 0x245
 800643c:	4b2d      	ldr	r3, [pc, #180]	; (80064f4 <__mdiff+0x110>)
 800643e:	e7e5      	b.n	800640c <__mdiff+0x28>
 8006440:	f102 0814 	add.w	r8, r2, #20
 8006444:	46c2      	mov	sl, r8
 8006446:	f04f 0c00 	mov.w	ip, #0
 800644a:	6927      	ldr	r7, [r4, #16]
 800644c:	60c6      	str	r6, [r0, #12]
 800644e:	692e      	ldr	r6, [r5, #16]
 8006450:	f104 0014 	add.w	r0, r4, #20
 8006454:	f105 0914 	add.w	r9, r5, #20
 8006458:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800645c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006460:	3410      	adds	r4, #16
 8006462:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006466:	f859 3b04 	ldr.w	r3, [r9], #4
 800646a:	fa1f f18b 	uxth.w	r1, fp
 800646e:	4461      	add	r1, ip
 8006470:	fa1f fc83 	uxth.w	ip, r3
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	eba1 010c 	sub.w	r1, r1, ip
 800647a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800647e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006482:	b289      	uxth	r1, r1
 8006484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006488:	454e      	cmp	r6, r9
 800648a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800648e:	f84a 1b04 	str.w	r1, [sl], #4
 8006492:	d8e6      	bhi.n	8006462 <__mdiff+0x7e>
 8006494:	1b73      	subs	r3, r6, r5
 8006496:	3b15      	subs	r3, #21
 8006498:	f023 0303 	bic.w	r3, r3, #3
 800649c:	3515      	adds	r5, #21
 800649e:	3304      	adds	r3, #4
 80064a0:	42ae      	cmp	r6, r5
 80064a2:	bf38      	it	cc
 80064a4:	2304      	movcc	r3, #4
 80064a6:	4418      	add	r0, r3
 80064a8:	4443      	add	r3, r8
 80064aa:	461e      	mov	r6, r3
 80064ac:	4605      	mov	r5, r0
 80064ae:	4575      	cmp	r5, lr
 80064b0:	d30e      	bcc.n	80064d0 <__mdiff+0xec>
 80064b2:	f10e 0103 	add.w	r1, lr, #3
 80064b6:	1a09      	subs	r1, r1, r0
 80064b8:	f021 0103 	bic.w	r1, r1, #3
 80064bc:	3803      	subs	r0, #3
 80064be:	4586      	cmp	lr, r0
 80064c0:	bf38      	it	cc
 80064c2:	2100      	movcc	r1, #0
 80064c4:	440b      	add	r3, r1
 80064c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80064ca:	b189      	cbz	r1, 80064f0 <__mdiff+0x10c>
 80064cc:	6117      	str	r7, [r2, #16]
 80064ce:	e7a3      	b.n	8006418 <__mdiff+0x34>
 80064d0:	f855 8b04 	ldr.w	r8, [r5], #4
 80064d4:	fa1f f188 	uxth.w	r1, r8
 80064d8:	4461      	add	r1, ip
 80064da:	140c      	asrs	r4, r1, #16
 80064dc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80064e0:	b289      	uxth	r1, r1
 80064e2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80064e6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80064ea:	f846 1b04 	str.w	r1, [r6], #4
 80064ee:	e7de      	b.n	80064ae <__mdiff+0xca>
 80064f0:	3f01      	subs	r7, #1
 80064f2:	e7e8      	b.n	80064c6 <__mdiff+0xe2>
 80064f4:	0800722a 	.word	0x0800722a
 80064f8:	0800723b 	.word	0x0800723b

080064fc <__d2b>:
 80064fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064fe:	2101      	movs	r1, #1
 8006500:	4617      	mov	r7, r2
 8006502:	461c      	mov	r4, r3
 8006504:	9e08      	ldr	r6, [sp, #32]
 8006506:	f7ff fcd7 	bl	8005eb8 <_Balloc>
 800650a:	4605      	mov	r5, r0
 800650c:	b930      	cbnz	r0, 800651c <__d2b+0x20>
 800650e:	4602      	mov	r2, r0
 8006510:	f240 310f 	movw	r1, #783	; 0x30f
 8006514:	4b22      	ldr	r3, [pc, #136]	; (80065a0 <__d2b+0xa4>)
 8006516:	4823      	ldr	r0, [pc, #140]	; (80065a4 <__d2b+0xa8>)
 8006518:	f000 fac6 	bl	8006aa8 <__assert_func>
 800651c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006520:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006524:	bb24      	cbnz	r4, 8006570 <__d2b+0x74>
 8006526:	2f00      	cmp	r7, #0
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	d026      	beq.n	800657a <__d2b+0x7e>
 800652c:	4668      	mov	r0, sp
 800652e:	9700      	str	r7, [sp, #0]
 8006530:	f7ff fd8a 	bl	8006048 <__lo0bits>
 8006534:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006538:	b1e8      	cbz	r0, 8006576 <__d2b+0x7a>
 800653a:	f1c0 0320 	rsb	r3, r0, #32
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	430b      	orrs	r3, r1
 8006544:	40c2      	lsrs	r2, r0
 8006546:	616b      	str	r3, [r5, #20]
 8006548:	9201      	str	r2, [sp, #4]
 800654a:	9b01      	ldr	r3, [sp, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	bf14      	ite	ne
 8006550:	2102      	movne	r1, #2
 8006552:	2101      	moveq	r1, #1
 8006554:	61ab      	str	r3, [r5, #24]
 8006556:	6129      	str	r1, [r5, #16]
 8006558:	b1bc      	cbz	r4, 800658a <__d2b+0x8e>
 800655a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800655e:	4404      	add	r4, r0
 8006560:	6034      	str	r4, [r6, #0]
 8006562:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006568:	6018      	str	r0, [r3, #0]
 800656a:	4628      	mov	r0, r5
 800656c:	b003      	add	sp, #12
 800656e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006574:	e7d7      	b.n	8006526 <__d2b+0x2a>
 8006576:	6169      	str	r1, [r5, #20]
 8006578:	e7e7      	b.n	800654a <__d2b+0x4e>
 800657a:	a801      	add	r0, sp, #4
 800657c:	f7ff fd64 	bl	8006048 <__lo0bits>
 8006580:	9b01      	ldr	r3, [sp, #4]
 8006582:	2101      	movs	r1, #1
 8006584:	616b      	str	r3, [r5, #20]
 8006586:	3020      	adds	r0, #32
 8006588:	e7e5      	b.n	8006556 <__d2b+0x5a>
 800658a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800658e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006592:	6030      	str	r0, [r6, #0]
 8006594:	6918      	ldr	r0, [r3, #16]
 8006596:	f7ff fd37 	bl	8006008 <__hi0bits>
 800659a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800659e:	e7e2      	b.n	8006566 <__d2b+0x6a>
 80065a0:	0800722a 	.word	0x0800722a
 80065a4:	0800723b 	.word	0x0800723b

080065a8 <__sfputc_r>:
 80065a8:	6893      	ldr	r3, [r2, #8]
 80065aa:	b410      	push	{r4}
 80065ac:	3b01      	subs	r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	6093      	str	r3, [r2, #8]
 80065b2:	da07      	bge.n	80065c4 <__sfputc_r+0x1c>
 80065b4:	6994      	ldr	r4, [r2, #24]
 80065b6:	42a3      	cmp	r3, r4
 80065b8:	db01      	blt.n	80065be <__sfputc_r+0x16>
 80065ba:	290a      	cmp	r1, #10
 80065bc:	d102      	bne.n	80065c4 <__sfputc_r+0x1c>
 80065be:	bc10      	pop	{r4}
 80065c0:	f7fe bbe1 	b.w	8004d86 <__swbuf_r>
 80065c4:	6813      	ldr	r3, [r2, #0]
 80065c6:	1c58      	adds	r0, r3, #1
 80065c8:	6010      	str	r0, [r2, #0]
 80065ca:	7019      	strb	r1, [r3, #0]
 80065cc:	4608      	mov	r0, r1
 80065ce:	bc10      	pop	{r4}
 80065d0:	4770      	bx	lr

080065d2 <__sfputs_r>:
 80065d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d4:	4606      	mov	r6, r0
 80065d6:	460f      	mov	r7, r1
 80065d8:	4614      	mov	r4, r2
 80065da:	18d5      	adds	r5, r2, r3
 80065dc:	42ac      	cmp	r4, r5
 80065de:	d101      	bne.n	80065e4 <__sfputs_r+0x12>
 80065e0:	2000      	movs	r0, #0
 80065e2:	e007      	b.n	80065f4 <__sfputs_r+0x22>
 80065e4:	463a      	mov	r2, r7
 80065e6:	4630      	mov	r0, r6
 80065e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ec:	f7ff ffdc 	bl	80065a8 <__sfputc_r>
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	d1f3      	bne.n	80065dc <__sfputs_r+0xa>
 80065f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065f8 <_vfiprintf_r>:
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	460d      	mov	r5, r1
 80065fe:	4614      	mov	r4, r2
 8006600:	4698      	mov	r8, r3
 8006602:	4606      	mov	r6, r0
 8006604:	b09d      	sub	sp, #116	; 0x74
 8006606:	b118      	cbz	r0, 8006610 <_vfiprintf_r+0x18>
 8006608:	6a03      	ldr	r3, [r0, #32]
 800660a:	b90b      	cbnz	r3, 8006610 <_vfiprintf_r+0x18>
 800660c:	f7fe fad4 	bl	8004bb8 <__sinit>
 8006610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006612:	07d9      	lsls	r1, r3, #31
 8006614:	d405      	bmi.n	8006622 <_vfiprintf_r+0x2a>
 8006616:	89ab      	ldrh	r3, [r5, #12]
 8006618:	059a      	lsls	r2, r3, #22
 800661a:	d402      	bmi.n	8006622 <_vfiprintf_r+0x2a>
 800661c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800661e:	f7fe fcc3 	bl	8004fa8 <__retarget_lock_acquire_recursive>
 8006622:	89ab      	ldrh	r3, [r5, #12]
 8006624:	071b      	lsls	r3, r3, #28
 8006626:	d501      	bpl.n	800662c <_vfiprintf_r+0x34>
 8006628:	692b      	ldr	r3, [r5, #16]
 800662a:	b99b      	cbnz	r3, 8006654 <_vfiprintf_r+0x5c>
 800662c:	4629      	mov	r1, r5
 800662e:	4630      	mov	r0, r6
 8006630:	f7fe fbe6 	bl	8004e00 <__swsetup_r>
 8006634:	b170      	cbz	r0, 8006654 <_vfiprintf_r+0x5c>
 8006636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006638:	07dc      	lsls	r4, r3, #31
 800663a:	d504      	bpl.n	8006646 <_vfiprintf_r+0x4e>
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	b01d      	add	sp, #116	; 0x74
 8006642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006646:	89ab      	ldrh	r3, [r5, #12]
 8006648:	0598      	lsls	r0, r3, #22
 800664a:	d4f7      	bmi.n	800663c <_vfiprintf_r+0x44>
 800664c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800664e:	f7fe fcac 	bl	8004faa <__retarget_lock_release_recursive>
 8006652:	e7f3      	b.n	800663c <_vfiprintf_r+0x44>
 8006654:	2300      	movs	r3, #0
 8006656:	9309      	str	r3, [sp, #36]	; 0x24
 8006658:	2320      	movs	r3, #32
 800665a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800665e:	2330      	movs	r3, #48	; 0x30
 8006660:	f04f 0901 	mov.w	r9, #1
 8006664:	f8cd 800c 	str.w	r8, [sp, #12]
 8006668:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006818 <_vfiprintf_r+0x220>
 800666c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006670:	4623      	mov	r3, r4
 8006672:	469a      	mov	sl, r3
 8006674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006678:	b10a      	cbz	r2, 800667e <_vfiprintf_r+0x86>
 800667a:	2a25      	cmp	r2, #37	; 0x25
 800667c:	d1f9      	bne.n	8006672 <_vfiprintf_r+0x7a>
 800667e:	ebba 0b04 	subs.w	fp, sl, r4
 8006682:	d00b      	beq.n	800669c <_vfiprintf_r+0xa4>
 8006684:	465b      	mov	r3, fp
 8006686:	4622      	mov	r2, r4
 8006688:	4629      	mov	r1, r5
 800668a:	4630      	mov	r0, r6
 800668c:	f7ff ffa1 	bl	80065d2 <__sfputs_r>
 8006690:	3001      	adds	r0, #1
 8006692:	f000 80a9 	beq.w	80067e8 <_vfiprintf_r+0x1f0>
 8006696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006698:	445a      	add	r2, fp
 800669a:	9209      	str	r2, [sp, #36]	; 0x24
 800669c:	f89a 3000 	ldrb.w	r3, [sl]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80a1 	beq.w	80067e8 <_vfiprintf_r+0x1f0>
 80066a6:	2300      	movs	r3, #0
 80066a8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066b0:	f10a 0a01 	add.w	sl, sl, #1
 80066b4:	9304      	str	r3, [sp, #16]
 80066b6:	9307      	str	r3, [sp, #28]
 80066b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066bc:	931a      	str	r3, [sp, #104]	; 0x68
 80066be:	4654      	mov	r4, sl
 80066c0:	2205      	movs	r2, #5
 80066c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c6:	4854      	ldr	r0, [pc, #336]	; (8006818 <_vfiprintf_r+0x220>)
 80066c8:	f7fe fc70 	bl	8004fac <memchr>
 80066cc:	9a04      	ldr	r2, [sp, #16]
 80066ce:	b9d8      	cbnz	r0, 8006708 <_vfiprintf_r+0x110>
 80066d0:	06d1      	lsls	r1, r2, #27
 80066d2:	bf44      	itt	mi
 80066d4:	2320      	movmi	r3, #32
 80066d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066da:	0713      	lsls	r3, r2, #28
 80066dc:	bf44      	itt	mi
 80066de:	232b      	movmi	r3, #43	; 0x2b
 80066e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066e4:	f89a 3000 	ldrb.w	r3, [sl]
 80066e8:	2b2a      	cmp	r3, #42	; 0x2a
 80066ea:	d015      	beq.n	8006718 <_vfiprintf_r+0x120>
 80066ec:	4654      	mov	r4, sl
 80066ee:	2000      	movs	r0, #0
 80066f0:	f04f 0c0a 	mov.w	ip, #10
 80066f4:	9a07      	ldr	r2, [sp, #28]
 80066f6:	4621      	mov	r1, r4
 80066f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066fc:	3b30      	subs	r3, #48	; 0x30
 80066fe:	2b09      	cmp	r3, #9
 8006700:	d94d      	bls.n	800679e <_vfiprintf_r+0x1a6>
 8006702:	b1b0      	cbz	r0, 8006732 <_vfiprintf_r+0x13a>
 8006704:	9207      	str	r2, [sp, #28]
 8006706:	e014      	b.n	8006732 <_vfiprintf_r+0x13a>
 8006708:	eba0 0308 	sub.w	r3, r0, r8
 800670c:	fa09 f303 	lsl.w	r3, r9, r3
 8006710:	4313      	orrs	r3, r2
 8006712:	46a2      	mov	sl, r4
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	e7d2      	b.n	80066be <_vfiprintf_r+0xc6>
 8006718:	9b03      	ldr	r3, [sp, #12]
 800671a:	1d19      	adds	r1, r3, #4
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	9103      	str	r1, [sp, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	bfbb      	ittet	lt
 8006724:	425b      	neglt	r3, r3
 8006726:	f042 0202 	orrlt.w	r2, r2, #2
 800672a:	9307      	strge	r3, [sp, #28]
 800672c:	9307      	strlt	r3, [sp, #28]
 800672e:	bfb8      	it	lt
 8006730:	9204      	strlt	r2, [sp, #16]
 8006732:	7823      	ldrb	r3, [r4, #0]
 8006734:	2b2e      	cmp	r3, #46	; 0x2e
 8006736:	d10c      	bne.n	8006752 <_vfiprintf_r+0x15a>
 8006738:	7863      	ldrb	r3, [r4, #1]
 800673a:	2b2a      	cmp	r3, #42	; 0x2a
 800673c:	d134      	bne.n	80067a8 <_vfiprintf_r+0x1b0>
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	3402      	adds	r4, #2
 8006742:	1d1a      	adds	r2, r3, #4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	9203      	str	r2, [sp, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	bfb8      	it	lt
 800674c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006750:	9305      	str	r3, [sp, #20]
 8006752:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800681c <_vfiprintf_r+0x224>
 8006756:	2203      	movs	r2, #3
 8006758:	4650      	mov	r0, sl
 800675a:	7821      	ldrb	r1, [r4, #0]
 800675c:	f7fe fc26 	bl	8004fac <memchr>
 8006760:	b138      	cbz	r0, 8006772 <_vfiprintf_r+0x17a>
 8006762:	2240      	movs	r2, #64	; 0x40
 8006764:	9b04      	ldr	r3, [sp, #16]
 8006766:	eba0 000a 	sub.w	r0, r0, sl
 800676a:	4082      	lsls	r2, r0
 800676c:	4313      	orrs	r3, r2
 800676e:	3401      	adds	r4, #1
 8006770:	9304      	str	r3, [sp, #16]
 8006772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006776:	2206      	movs	r2, #6
 8006778:	4829      	ldr	r0, [pc, #164]	; (8006820 <_vfiprintf_r+0x228>)
 800677a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800677e:	f7fe fc15 	bl	8004fac <memchr>
 8006782:	2800      	cmp	r0, #0
 8006784:	d03f      	beq.n	8006806 <_vfiprintf_r+0x20e>
 8006786:	4b27      	ldr	r3, [pc, #156]	; (8006824 <_vfiprintf_r+0x22c>)
 8006788:	bb1b      	cbnz	r3, 80067d2 <_vfiprintf_r+0x1da>
 800678a:	9b03      	ldr	r3, [sp, #12]
 800678c:	3307      	adds	r3, #7
 800678e:	f023 0307 	bic.w	r3, r3, #7
 8006792:	3308      	adds	r3, #8
 8006794:	9303      	str	r3, [sp, #12]
 8006796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006798:	443b      	add	r3, r7
 800679a:	9309      	str	r3, [sp, #36]	; 0x24
 800679c:	e768      	b.n	8006670 <_vfiprintf_r+0x78>
 800679e:	460c      	mov	r4, r1
 80067a0:	2001      	movs	r0, #1
 80067a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80067a6:	e7a6      	b.n	80066f6 <_vfiprintf_r+0xfe>
 80067a8:	2300      	movs	r3, #0
 80067aa:	f04f 0c0a 	mov.w	ip, #10
 80067ae:	4619      	mov	r1, r3
 80067b0:	3401      	adds	r4, #1
 80067b2:	9305      	str	r3, [sp, #20]
 80067b4:	4620      	mov	r0, r4
 80067b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ba:	3a30      	subs	r2, #48	; 0x30
 80067bc:	2a09      	cmp	r2, #9
 80067be:	d903      	bls.n	80067c8 <_vfiprintf_r+0x1d0>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0c6      	beq.n	8006752 <_vfiprintf_r+0x15a>
 80067c4:	9105      	str	r1, [sp, #20]
 80067c6:	e7c4      	b.n	8006752 <_vfiprintf_r+0x15a>
 80067c8:	4604      	mov	r4, r0
 80067ca:	2301      	movs	r3, #1
 80067cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80067d0:	e7f0      	b.n	80067b4 <_vfiprintf_r+0x1bc>
 80067d2:	ab03      	add	r3, sp, #12
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	462a      	mov	r2, r5
 80067d8:	4630      	mov	r0, r6
 80067da:	4b13      	ldr	r3, [pc, #76]	; (8006828 <_vfiprintf_r+0x230>)
 80067dc:	a904      	add	r1, sp, #16
 80067de:	f7fd fdaf 	bl	8004340 <_printf_float>
 80067e2:	4607      	mov	r7, r0
 80067e4:	1c78      	adds	r0, r7, #1
 80067e6:	d1d6      	bne.n	8006796 <_vfiprintf_r+0x19e>
 80067e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067ea:	07d9      	lsls	r1, r3, #31
 80067ec:	d405      	bmi.n	80067fa <_vfiprintf_r+0x202>
 80067ee:	89ab      	ldrh	r3, [r5, #12]
 80067f0:	059a      	lsls	r2, r3, #22
 80067f2:	d402      	bmi.n	80067fa <_vfiprintf_r+0x202>
 80067f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067f6:	f7fe fbd8 	bl	8004faa <__retarget_lock_release_recursive>
 80067fa:	89ab      	ldrh	r3, [r5, #12]
 80067fc:	065b      	lsls	r3, r3, #25
 80067fe:	f53f af1d 	bmi.w	800663c <_vfiprintf_r+0x44>
 8006802:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006804:	e71c      	b.n	8006640 <_vfiprintf_r+0x48>
 8006806:	ab03      	add	r3, sp, #12
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	462a      	mov	r2, r5
 800680c:	4630      	mov	r0, r6
 800680e:	4b06      	ldr	r3, [pc, #24]	; (8006828 <_vfiprintf_r+0x230>)
 8006810:	a904      	add	r1, sp, #16
 8006812:	f7fe f835 	bl	8004880 <_printf_i>
 8006816:	e7e4      	b.n	80067e2 <_vfiprintf_r+0x1ea>
 8006818:	08007394 	.word	0x08007394
 800681c:	0800739a 	.word	0x0800739a
 8006820:	0800739e 	.word	0x0800739e
 8006824:	08004341 	.word	0x08004341
 8006828:	080065d3 	.word	0x080065d3

0800682c <__sflush_r>:
 800682c:	898a      	ldrh	r2, [r1, #12]
 800682e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006830:	4605      	mov	r5, r0
 8006832:	0710      	lsls	r0, r2, #28
 8006834:	460c      	mov	r4, r1
 8006836:	d457      	bmi.n	80068e8 <__sflush_r+0xbc>
 8006838:	684b      	ldr	r3, [r1, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	dc04      	bgt.n	8006848 <__sflush_r+0x1c>
 800683e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	dc01      	bgt.n	8006848 <__sflush_r+0x1c>
 8006844:	2000      	movs	r0, #0
 8006846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800684a:	2e00      	cmp	r6, #0
 800684c:	d0fa      	beq.n	8006844 <__sflush_r+0x18>
 800684e:	2300      	movs	r3, #0
 8006850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006854:	682f      	ldr	r7, [r5, #0]
 8006856:	6a21      	ldr	r1, [r4, #32]
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	d032      	beq.n	80068c2 <__sflush_r+0x96>
 800685c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	075a      	lsls	r2, r3, #29
 8006862:	d505      	bpl.n	8006870 <__sflush_r+0x44>
 8006864:	6863      	ldr	r3, [r4, #4]
 8006866:	1ac0      	subs	r0, r0, r3
 8006868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800686a:	b10b      	cbz	r3, 8006870 <__sflush_r+0x44>
 800686c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800686e:	1ac0      	subs	r0, r0, r3
 8006870:	2300      	movs	r3, #0
 8006872:	4602      	mov	r2, r0
 8006874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006876:	4628      	mov	r0, r5
 8006878:	6a21      	ldr	r1, [r4, #32]
 800687a:	47b0      	blx	r6
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	d106      	bne.n	8006890 <__sflush_r+0x64>
 8006882:	6829      	ldr	r1, [r5, #0]
 8006884:	291d      	cmp	r1, #29
 8006886:	d82b      	bhi.n	80068e0 <__sflush_r+0xb4>
 8006888:	4a28      	ldr	r2, [pc, #160]	; (800692c <__sflush_r+0x100>)
 800688a:	410a      	asrs	r2, r1
 800688c:	07d6      	lsls	r6, r2, #31
 800688e:	d427      	bmi.n	80068e0 <__sflush_r+0xb4>
 8006890:	2200      	movs	r2, #0
 8006892:	6062      	str	r2, [r4, #4]
 8006894:	6922      	ldr	r2, [r4, #16]
 8006896:	04d9      	lsls	r1, r3, #19
 8006898:	6022      	str	r2, [r4, #0]
 800689a:	d504      	bpl.n	80068a6 <__sflush_r+0x7a>
 800689c:	1c42      	adds	r2, r0, #1
 800689e:	d101      	bne.n	80068a4 <__sflush_r+0x78>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	b903      	cbnz	r3, 80068a6 <__sflush_r+0x7a>
 80068a4:	6560      	str	r0, [r4, #84]	; 0x54
 80068a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068a8:	602f      	str	r7, [r5, #0]
 80068aa:	2900      	cmp	r1, #0
 80068ac:	d0ca      	beq.n	8006844 <__sflush_r+0x18>
 80068ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068b2:	4299      	cmp	r1, r3
 80068b4:	d002      	beq.n	80068bc <__sflush_r+0x90>
 80068b6:	4628      	mov	r0, r5
 80068b8:	f7ff fa02 	bl	8005cc0 <_free_r>
 80068bc:	2000      	movs	r0, #0
 80068be:	6360      	str	r0, [r4, #52]	; 0x34
 80068c0:	e7c1      	b.n	8006846 <__sflush_r+0x1a>
 80068c2:	2301      	movs	r3, #1
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b0      	blx	r6
 80068c8:	1c41      	adds	r1, r0, #1
 80068ca:	d1c8      	bne.n	800685e <__sflush_r+0x32>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0c5      	beq.n	800685e <__sflush_r+0x32>
 80068d2:	2b1d      	cmp	r3, #29
 80068d4:	d001      	beq.n	80068da <__sflush_r+0xae>
 80068d6:	2b16      	cmp	r3, #22
 80068d8:	d101      	bne.n	80068de <__sflush_r+0xb2>
 80068da:	602f      	str	r7, [r5, #0]
 80068dc:	e7b2      	b.n	8006844 <__sflush_r+0x18>
 80068de:	89a3      	ldrh	r3, [r4, #12]
 80068e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068e4:	81a3      	strh	r3, [r4, #12]
 80068e6:	e7ae      	b.n	8006846 <__sflush_r+0x1a>
 80068e8:	690f      	ldr	r7, [r1, #16]
 80068ea:	2f00      	cmp	r7, #0
 80068ec:	d0aa      	beq.n	8006844 <__sflush_r+0x18>
 80068ee:	0793      	lsls	r3, r2, #30
 80068f0:	bf18      	it	ne
 80068f2:	2300      	movne	r3, #0
 80068f4:	680e      	ldr	r6, [r1, #0]
 80068f6:	bf08      	it	eq
 80068f8:	694b      	ldreq	r3, [r1, #20]
 80068fa:	1bf6      	subs	r6, r6, r7
 80068fc:	600f      	str	r7, [r1, #0]
 80068fe:	608b      	str	r3, [r1, #8]
 8006900:	2e00      	cmp	r6, #0
 8006902:	dd9f      	ble.n	8006844 <__sflush_r+0x18>
 8006904:	4633      	mov	r3, r6
 8006906:	463a      	mov	r2, r7
 8006908:	4628      	mov	r0, r5
 800690a:	6a21      	ldr	r1, [r4, #32]
 800690c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006910:	47e0      	blx	ip
 8006912:	2800      	cmp	r0, #0
 8006914:	dc06      	bgt.n	8006924 <__sflush_r+0xf8>
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	e790      	b.n	8006846 <__sflush_r+0x1a>
 8006924:	4407      	add	r7, r0
 8006926:	1a36      	subs	r6, r6, r0
 8006928:	e7ea      	b.n	8006900 <__sflush_r+0xd4>
 800692a:	bf00      	nop
 800692c:	dfbffffe 	.word	0xdfbffffe

08006930 <_fflush_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	690b      	ldr	r3, [r1, #16]
 8006934:	4605      	mov	r5, r0
 8006936:	460c      	mov	r4, r1
 8006938:	b913      	cbnz	r3, 8006940 <_fflush_r+0x10>
 800693a:	2500      	movs	r5, #0
 800693c:	4628      	mov	r0, r5
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	b118      	cbz	r0, 800694a <_fflush_r+0x1a>
 8006942:	6a03      	ldr	r3, [r0, #32]
 8006944:	b90b      	cbnz	r3, 800694a <_fflush_r+0x1a>
 8006946:	f7fe f937 	bl	8004bb8 <__sinit>
 800694a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0f3      	beq.n	800693a <_fflush_r+0xa>
 8006952:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006954:	07d0      	lsls	r0, r2, #31
 8006956:	d404      	bmi.n	8006962 <_fflush_r+0x32>
 8006958:	0599      	lsls	r1, r3, #22
 800695a:	d402      	bmi.n	8006962 <_fflush_r+0x32>
 800695c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800695e:	f7fe fb23 	bl	8004fa8 <__retarget_lock_acquire_recursive>
 8006962:	4628      	mov	r0, r5
 8006964:	4621      	mov	r1, r4
 8006966:	f7ff ff61 	bl	800682c <__sflush_r>
 800696a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800696c:	4605      	mov	r5, r0
 800696e:	07da      	lsls	r2, r3, #31
 8006970:	d4e4      	bmi.n	800693c <_fflush_r+0xc>
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	059b      	lsls	r3, r3, #22
 8006976:	d4e1      	bmi.n	800693c <_fflush_r+0xc>
 8006978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800697a:	f7fe fb16 	bl	8004faa <__retarget_lock_release_recursive>
 800697e:	e7dd      	b.n	800693c <_fflush_r+0xc>

08006980 <__swhatbuf_r>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	460c      	mov	r4, r1
 8006984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006988:	4615      	mov	r5, r2
 800698a:	2900      	cmp	r1, #0
 800698c:	461e      	mov	r6, r3
 800698e:	b096      	sub	sp, #88	; 0x58
 8006990:	da0c      	bge.n	80069ac <__swhatbuf_r+0x2c>
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	2100      	movs	r1, #0
 8006996:	f013 0f80 	tst.w	r3, #128	; 0x80
 800699a:	bf0c      	ite	eq
 800699c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80069a0:	2340      	movne	r3, #64	; 0x40
 80069a2:	2000      	movs	r0, #0
 80069a4:	6031      	str	r1, [r6, #0]
 80069a6:	602b      	str	r3, [r5, #0]
 80069a8:	b016      	add	sp, #88	; 0x58
 80069aa:	bd70      	pop	{r4, r5, r6, pc}
 80069ac:	466a      	mov	r2, sp
 80069ae:	f000 f849 	bl	8006a44 <_fstat_r>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	dbed      	blt.n	8006992 <__swhatbuf_r+0x12>
 80069b6:	9901      	ldr	r1, [sp, #4]
 80069b8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80069bc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80069c0:	4259      	negs	r1, r3
 80069c2:	4159      	adcs	r1, r3
 80069c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069c8:	e7eb      	b.n	80069a2 <__swhatbuf_r+0x22>

080069ca <__smakebuf_r>:
 80069ca:	898b      	ldrh	r3, [r1, #12]
 80069cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069ce:	079d      	lsls	r5, r3, #30
 80069d0:	4606      	mov	r6, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	d507      	bpl.n	80069e6 <__smakebuf_r+0x1c>
 80069d6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069da:	6023      	str	r3, [r4, #0]
 80069dc:	6123      	str	r3, [r4, #16]
 80069de:	2301      	movs	r3, #1
 80069e0:	6163      	str	r3, [r4, #20]
 80069e2:	b002      	add	sp, #8
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
 80069e6:	466a      	mov	r2, sp
 80069e8:	ab01      	add	r3, sp, #4
 80069ea:	f7ff ffc9 	bl	8006980 <__swhatbuf_r>
 80069ee:	9900      	ldr	r1, [sp, #0]
 80069f0:	4605      	mov	r5, r0
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7ff f9d4 	bl	8005da0 <_malloc_r>
 80069f8:	b948      	cbnz	r0, 8006a0e <__smakebuf_r+0x44>
 80069fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069fe:	059a      	lsls	r2, r3, #22
 8006a00:	d4ef      	bmi.n	80069e2 <__smakebuf_r+0x18>
 8006a02:	f023 0303 	bic.w	r3, r3, #3
 8006a06:	f043 0302 	orr.w	r3, r3, #2
 8006a0a:	81a3      	strh	r3, [r4, #12]
 8006a0c:	e7e3      	b.n	80069d6 <__smakebuf_r+0xc>
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	6020      	str	r0, [r4, #0]
 8006a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a16:	81a3      	strh	r3, [r4, #12]
 8006a18:	9b00      	ldr	r3, [sp, #0]
 8006a1a:	6120      	str	r0, [r4, #16]
 8006a1c:	6163      	str	r3, [r4, #20]
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	b15b      	cbz	r3, 8006a3a <__smakebuf_r+0x70>
 8006a22:	4630      	mov	r0, r6
 8006a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a28:	f000 f81e 	bl	8006a68 <_isatty_r>
 8006a2c:	b128      	cbz	r0, 8006a3a <__smakebuf_r+0x70>
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	f023 0303 	bic.w	r3, r3, #3
 8006a34:	f043 0301 	orr.w	r3, r3, #1
 8006a38:	81a3      	strh	r3, [r4, #12]
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	431d      	orrs	r5, r3
 8006a3e:	81a5      	strh	r5, [r4, #12]
 8006a40:	e7cf      	b.n	80069e2 <__smakebuf_r+0x18>
	...

08006a44 <_fstat_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	2300      	movs	r3, #0
 8006a48:	4d06      	ldr	r5, [pc, #24]	; (8006a64 <_fstat_r+0x20>)
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	4611      	mov	r1, r2
 8006a50:	602b      	str	r3, [r5, #0]
 8006a52:	f7fb f99b 	bl	8001d8c <_fstat>
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	d102      	bne.n	8006a60 <_fstat_r+0x1c>
 8006a5a:	682b      	ldr	r3, [r5, #0]
 8006a5c:	b103      	cbz	r3, 8006a60 <_fstat_r+0x1c>
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	bd38      	pop	{r3, r4, r5, pc}
 8006a62:	bf00      	nop
 8006a64:	200003d0 	.word	0x200003d0

08006a68 <_isatty_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	4d05      	ldr	r5, [pc, #20]	; (8006a84 <_isatty_r+0x1c>)
 8006a6e:	4604      	mov	r4, r0
 8006a70:	4608      	mov	r0, r1
 8006a72:	602b      	str	r3, [r5, #0]
 8006a74:	f7fb f999 	bl	8001daa <_isatty>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_isatty_r+0x1a>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_isatty_r+0x1a>
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	200003d0 	.word	0x200003d0

08006a88 <_sbrk_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	4d05      	ldr	r5, [pc, #20]	; (8006aa4 <_sbrk_r+0x1c>)
 8006a8e:	4604      	mov	r4, r0
 8006a90:	4608      	mov	r0, r1
 8006a92:	602b      	str	r3, [r5, #0]
 8006a94:	f7fb f9a0 	bl	8001dd8 <_sbrk>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_sbrk_r+0x1a>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_sbrk_r+0x1a>
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	200003d0 	.word	0x200003d0

08006aa8 <__assert_func>:
 8006aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aaa:	4614      	mov	r4, r2
 8006aac:	461a      	mov	r2, r3
 8006aae:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <__assert_func+0x2c>)
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68d8      	ldr	r0, [r3, #12]
 8006ab6:	b14c      	cbz	r4, 8006acc <__assert_func+0x24>
 8006ab8:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <__assert_func+0x30>)
 8006aba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006abe:	9100      	str	r1, [sp, #0]
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	4906      	ldr	r1, [pc, #24]	; (8006adc <__assert_func+0x34>)
 8006ac4:	f000 f842 	bl	8006b4c <fiprintf>
 8006ac8:	f000 f852 	bl	8006b70 <abort>
 8006acc:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <__assert_func+0x38>)
 8006ace:	461c      	mov	r4, r3
 8006ad0:	e7f3      	b.n	8006aba <__assert_func+0x12>
 8006ad2:	bf00      	nop
 8006ad4:	20000064 	.word	0x20000064
 8006ad8:	080073af 	.word	0x080073af
 8006adc:	080073bc 	.word	0x080073bc
 8006ae0:	080073ea 	.word	0x080073ea

08006ae4 <_calloc_r>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	fba1 5402 	umull	r5, r4, r1, r2
 8006aea:	b934      	cbnz	r4, 8006afa <_calloc_r+0x16>
 8006aec:	4629      	mov	r1, r5
 8006aee:	f7ff f957 	bl	8005da0 <_malloc_r>
 8006af2:	4606      	mov	r6, r0
 8006af4:	b928      	cbnz	r0, 8006b02 <_calloc_r+0x1e>
 8006af6:	4630      	mov	r0, r6
 8006af8:	bd70      	pop	{r4, r5, r6, pc}
 8006afa:	220c      	movs	r2, #12
 8006afc:	2600      	movs	r6, #0
 8006afe:	6002      	str	r2, [r0, #0]
 8006b00:	e7f9      	b.n	8006af6 <_calloc_r+0x12>
 8006b02:	462a      	mov	r2, r5
 8006b04:	4621      	mov	r1, r4
 8006b06:	f7fe f9d3 	bl	8004eb0 <memset>
 8006b0a:	e7f4      	b.n	8006af6 <_calloc_r+0x12>

08006b0c <__ascii_mbtowc>:
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	b901      	cbnz	r1, 8006b12 <__ascii_mbtowc+0x6>
 8006b10:	a901      	add	r1, sp, #4
 8006b12:	b142      	cbz	r2, 8006b26 <__ascii_mbtowc+0x1a>
 8006b14:	b14b      	cbz	r3, 8006b2a <__ascii_mbtowc+0x1e>
 8006b16:	7813      	ldrb	r3, [r2, #0]
 8006b18:	600b      	str	r3, [r1, #0]
 8006b1a:	7812      	ldrb	r2, [r2, #0]
 8006b1c:	1e10      	subs	r0, r2, #0
 8006b1e:	bf18      	it	ne
 8006b20:	2001      	movne	r0, #1
 8006b22:	b002      	add	sp, #8
 8006b24:	4770      	bx	lr
 8006b26:	4610      	mov	r0, r2
 8006b28:	e7fb      	b.n	8006b22 <__ascii_mbtowc+0x16>
 8006b2a:	f06f 0001 	mvn.w	r0, #1
 8006b2e:	e7f8      	b.n	8006b22 <__ascii_mbtowc+0x16>

08006b30 <__ascii_wctomb>:
 8006b30:	4603      	mov	r3, r0
 8006b32:	4608      	mov	r0, r1
 8006b34:	b141      	cbz	r1, 8006b48 <__ascii_wctomb+0x18>
 8006b36:	2aff      	cmp	r2, #255	; 0xff
 8006b38:	d904      	bls.n	8006b44 <__ascii_wctomb+0x14>
 8006b3a:	228a      	movs	r2, #138	; 0x8a
 8006b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	4770      	bx	lr
 8006b44:	2001      	movs	r0, #1
 8006b46:	700a      	strb	r2, [r1, #0]
 8006b48:	4770      	bx	lr
	...

08006b4c <fiprintf>:
 8006b4c:	b40e      	push	{r1, r2, r3}
 8006b4e:	b503      	push	{r0, r1, lr}
 8006b50:	4601      	mov	r1, r0
 8006b52:	ab03      	add	r3, sp, #12
 8006b54:	4805      	ldr	r0, [pc, #20]	; (8006b6c <fiprintf+0x20>)
 8006b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b5a:	6800      	ldr	r0, [r0, #0]
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	f7ff fd4b 	bl	80065f8 <_vfiprintf_r>
 8006b62:	b002      	add	sp, #8
 8006b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b68:	b003      	add	sp, #12
 8006b6a:	4770      	bx	lr
 8006b6c:	20000064 	.word	0x20000064

08006b70 <abort>:
 8006b70:	2006      	movs	r0, #6
 8006b72:	b508      	push	{r3, lr}
 8006b74:	f000 f82c 	bl	8006bd0 <raise>
 8006b78:	2001      	movs	r0, #1
 8006b7a:	f7fb f8b9 	bl	8001cf0 <_exit>

08006b7e <_raise_r>:
 8006b7e:	291f      	cmp	r1, #31
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4604      	mov	r4, r0
 8006b84:	460d      	mov	r5, r1
 8006b86:	d904      	bls.n	8006b92 <_raise_r+0x14>
 8006b88:	2316      	movs	r3, #22
 8006b8a:	6003      	str	r3, [r0, #0]
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b90:	bd38      	pop	{r3, r4, r5, pc}
 8006b92:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006b94:	b112      	cbz	r2, 8006b9c <_raise_r+0x1e>
 8006b96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b9a:	b94b      	cbnz	r3, 8006bb0 <_raise_r+0x32>
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 f831 	bl	8006c04 <_getpid_r>
 8006ba2:	462a      	mov	r2, r5
 8006ba4:	4601      	mov	r1, r0
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bac:	f000 b818 	b.w	8006be0 <_kill_r>
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d00a      	beq.n	8006bca <_raise_r+0x4c>
 8006bb4:	1c59      	adds	r1, r3, #1
 8006bb6:	d103      	bne.n	8006bc0 <_raise_r+0x42>
 8006bb8:	2316      	movs	r3, #22
 8006bba:	6003      	str	r3, [r0, #0]
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	e7e7      	b.n	8006b90 <_raise_r+0x12>
 8006bc0:	2400      	movs	r4, #0
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bc8:	4798      	blx	r3
 8006bca:	2000      	movs	r0, #0
 8006bcc:	e7e0      	b.n	8006b90 <_raise_r+0x12>
	...

08006bd0 <raise>:
 8006bd0:	4b02      	ldr	r3, [pc, #8]	; (8006bdc <raise+0xc>)
 8006bd2:	4601      	mov	r1, r0
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	f7ff bfd2 	b.w	8006b7e <_raise_r>
 8006bda:	bf00      	nop
 8006bdc:	20000064 	.word	0x20000064

08006be0 <_kill_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	2300      	movs	r3, #0
 8006be4:	4d06      	ldr	r5, [pc, #24]	; (8006c00 <_kill_r+0x20>)
 8006be6:	4604      	mov	r4, r0
 8006be8:	4608      	mov	r0, r1
 8006bea:	4611      	mov	r1, r2
 8006bec:	602b      	str	r3, [r5, #0]
 8006bee:	f7fb f86f 	bl	8001cd0 <_kill>
 8006bf2:	1c43      	adds	r3, r0, #1
 8006bf4:	d102      	bne.n	8006bfc <_kill_r+0x1c>
 8006bf6:	682b      	ldr	r3, [r5, #0]
 8006bf8:	b103      	cbz	r3, 8006bfc <_kill_r+0x1c>
 8006bfa:	6023      	str	r3, [r4, #0]
 8006bfc:	bd38      	pop	{r3, r4, r5, pc}
 8006bfe:	bf00      	nop
 8006c00:	200003d0 	.word	0x200003d0

08006c04 <_getpid_r>:
 8006c04:	f7fb b85d 	b.w	8001cc2 <_getpid>

08006c08 <atan2>:
 8006c08:	f000 b802 	b.w	8006c10 <__ieee754_atan2>
 8006c0c:	0000      	movs	r0, r0
	...

08006c10 <__ieee754_atan2>:
 8006c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	4617      	mov	r7, r2
 8006c16:	4692      	mov	sl, r2
 8006c18:	4699      	mov	r9, r3
 8006c1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c1e:	427b      	negs	r3, r7
 8006c20:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8006da0 <__ieee754_atan2+0x190>
 8006c24:	433b      	orrs	r3, r7
 8006c26:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006c2a:	4543      	cmp	r3, r8
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	460d      	mov	r5, r1
 8006c30:	d809      	bhi.n	8006c46 <__ieee754_atan2+0x36>
 8006c32:	4246      	negs	r6, r0
 8006c34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c38:	4306      	orrs	r6, r0
 8006c3a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006c3e:	4546      	cmp	r6, r8
 8006c40:	468e      	mov	lr, r1
 8006c42:	4683      	mov	fp, r0
 8006c44:	d908      	bls.n	8006c58 <__ieee754_atan2+0x48>
 8006c46:	4652      	mov	r2, sl
 8006c48:	464b      	mov	r3, r9
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	f7f9 fa8d 	bl	800016c <__adddf3>
 8006c52:	4604      	mov	r4, r0
 8006c54:	460d      	mov	r5, r1
 8006c56:	e019      	b.n	8006c8c <__ieee754_atan2+0x7c>
 8006c58:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8006c5c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006c60:	433e      	orrs	r6, r7
 8006c62:	d103      	bne.n	8006c6c <__ieee754_atan2+0x5c>
 8006c64:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	f000 b8a2 	b.w	8006db0 <atan>
 8006c6c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8006c70:	f006 0602 	and.w	r6, r6, #2
 8006c74:	ea53 0b0b 	orrs.w	fp, r3, fp
 8006c78:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006c7c:	d10a      	bne.n	8006c94 <__ieee754_atan2+0x84>
 8006c7e:	2e02      	cmp	r6, #2
 8006c80:	d067      	beq.n	8006d52 <__ieee754_atan2+0x142>
 8006c82:	2e03      	cmp	r6, #3
 8006c84:	d102      	bne.n	8006c8c <__ieee754_atan2+0x7c>
 8006c86:	a53a      	add	r5, pc, #232	; (adr r5, 8006d70 <__ieee754_atan2+0x160>)
 8006c88:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	4629      	mov	r1, r5
 8006c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c94:	4317      	orrs	r7, r2
 8006c96:	d106      	bne.n	8006ca6 <__ieee754_atan2+0x96>
 8006c98:	f1be 0f00 	cmp.w	lr, #0
 8006c9c:	da64      	bge.n	8006d68 <__ieee754_atan2+0x158>
 8006c9e:	a536      	add	r5, pc, #216	; (adr r5, 8006d78 <__ieee754_atan2+0x168>)
 8006ca0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ca4:	e7f2      	b.n	8006c8c <__ieee754_atan2+0x7c>
 8006ca6:	4542      	cmp	r2, r8
 8006ca8:	d10f      	bne.n	8006cca <__ieee754_atan2+0xba>
 8006caa:	4293      	cmp	r3, r2
 8006cac:	f106 36ff 	add.w	r6, r6, #4294967295
 8006cb0:	d107      	bne.n	8006cc2 <__ieee754_atan2+0xb2>
 8006cb2:	2e02      	cmp	r6, #2
 8006cb4:	d851      	bhi.n	8006d5a <__ieee754_atan2+0x14a>
 8006cb6:	4b3b      	ldr	r3, [pc, #236]	; (8006da4 <__ieee754_atan2+0x194>)
 8006cb8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006cbc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006cc0:	e7e4      	b.n	8006c8c <__ieee754_atan2+0x7c>
 8006cc2:	2e02      	cmp	r6, #2
 8006cc4:	d84d      	bhi.n	8006d62 <__ieee754_atan2+0x152>
 8006cc6:	4b38      	ldr	r3, [pc, #224]	; (8006da8 <__ieee754_atan2+0x198>)
 8006cc8:	e7f6      	b.n	8006cb8 <__ieee754_atan2+0xa8>
 8006cca:	4543      	cmp	r3, r8
 8006ccc:	d0e4      	beq.n	8006c98 <__ieee754_atan2+0x88>
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006cd4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006cd8:	da21      	bge.n	8006d1e <__ieee754_atan2+0x10e>
 8006cda:	f1b9 0f00 	cmp.w	r9, #0
 8006cde:	da01      	bge.n	8006ce4 <__ieee754_atan2+0xd4>
 8006ce0:	323c      	adds	r2, #60	; 0x3c
 8006ce2:	db20      	blt.n	8006d26 <__ieee754_atan2+0x116>
 8006ce4:	4652      	mov	r2, sl
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	4620      	mov	r0, r4
 8006cea:	4629      	mov	r1, r5
 8006cec:	f7f9 fd1e 	bl	800072c <__aeabi_ddiv>
 8006cf0:	f000 f9e8 	bl	80070c4 <fabs>
 8006cf4:	f000 f85c 	bl	8006db0 <atan>
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	460d      	mov	r5, r1
 8006cfc:	2e01      	cmp	r6, #1
 8006cfe:	d015      	beq.n	8006d2c <__ieee754_atan2+0x11c>
 8006d00:	2e02      	cmp	r6, #2
 8006d02:	d017      	beq.n	8006d34 <__ieee754_atan2+0x124>
 8006d04:	2e00      	cmp	r6, #0
 8006d06:	d0c1      	beq.n	8006c8c <__ieee754_atan2+0x7c>
 8006d08:	a31d      	add	r3, pc, #116	; (adr r3, 8006d80 <__ieee754_atan2+0x170>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4629      	mov	r1, r5
 8006d12:	f7f9 fa29 	bl	8000168 <__aeabi_dsub>
 8006d16:	a31c      	add	r3, pc, #112	; (adr r3, 8006d88 <__ieee754_atan2+0x178>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	e016      	b.n	8006d4c <__ieee754_atan2+0x13c>
 8006d1e:	a51c      	add	r5, pc, #112	; (adr r5, 8006d90 <__ieee754_atan2+0x180>)
 8006d20:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d24:	e7ea      	b.n	8006cfc <__ieee754_atan2+0xec>
 8006d26:	2400      	movs	r4, #0
 8006d28:	2500      	movs	r5, #0
 8006d2a:	e7e7      	b.n	8006cfc <__ieee754_atan2+0xec>
 8006d2c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006d30:	461d      	mov	r5, r3
 8006d32:	e7ab      	b.n	8006c8c <__ieee754_atan2+0x7c>
 8006d34:	a312      	add	r3, pc, #72	; (adr r3, 8006d80 <__ieee754_atan2+0x170>)
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 fa13 	bl	8000168 <__aeabi_dsub>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	a110      	add	r1, pc, #64	; (adr r1, 8006d88 <__ieee754_atan2+0x178>)
 8006d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d4c:	f7f9 fa0c 	bl	8000168 <__aeabi_dsub>
 8006d50:	e77f      	b.n	8006c52 <__ieee754_atan2+0x42>
 8006d52:	a50d      	add	r5, pc, #52	; (adr r5, 8006d88 <__ieee754_atan2+0x178>)
 8006d54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d58:	e798      	b.n	8006c8c <__ieee754_atan2+0x7c>
 8006d5a:	a50f      	add	r5, pc, #60	; (adr r5, 8006d98 <__ieee754_atan2+0x188>)
 8006d5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d60:	e794      	b.n	8006c8c <__ieee754_atan2+0x7c>
 8006d62:	2400      	movs	r4, #0
 8006d64:	2500      	movs	r5, #0
 8006d66:	e791      	b.n	8006c8c <__ieee754_atan2+0x7c>
 8006d68:	a509      	add	r5, pc, #36	; (adr r5, 8006d90 <__ieee754_atan2+0x180>)
 8006d6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d6e:	e78d      	b.n	8006c8c <__ieee754_atan2+0x7c>
 8006d70:	54442d18 	.word	0x54442d18
 8006d74:	c00921fb 	.word	0xc00921fb
 8006d78:	54442d18 	.word	0x54442d18
 8006d7c:	bff921fb 	.word	0xbff921fb
 8006d80:	33145c07 	.word	0x33145c07
 8006d84:	3ca1a626 	.word	0x3ca1a626
 8006d88:	54442d18 	.word	0x54442d18
 8006d8c:	400921fb 	.word	0x400921fb
 8006d90:	54442d18 	.word	0x54442d18
 8006d94:	3ff921fb 	.word	0x3ff921fb
 8006d98:	54442d18 	.word	0x54442d18
 8006d9c:	3fe921fb 	.word	0x3fe921fb
 8006da0:	7ff00000 	.word	0x7ff00000
 8006da4:	080074f0 	.word	0x080074f0
 8006da8:	08007508 	.word	0x08007508
 8006dac:	00000000 	.word	0x00000000

08006db0 <atan>:
 8006db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	4bb6      	ldr	r3, [pc, #728]	; (8007090 <atan+0x2e0>)
 8006db6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006dba:	429e      	cmp	r6, r3
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	460d      	mov	r5, r1
 8006dc0:	468b      	mov	fp, r1
 8006dc2:	dd17      	ble.n	8006df4 <atan+0x44>
 8006dc4:	4bb3      	ldr	r3, [pc, #716]	; (8007094 <atan+0x2e4>)
 8006dc6:	429e      	cmp	r6, r3
 8006dc8:	dc01      	bgt.n	8006dce <atan+0x1e>
 8006dca:	d109      	bne.n	8006de0 <atan+0x30>
 8006dcc:	b140      	cbz	r0, 8006de0 <atan+0x30>
 8006dce:	4622      	mov	r2, r4
 8006dd0:	462b      	mov	r3, r5
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	f7f9 f9c9 	bl	800016c <__adddf3>
 8006dda:	4604      	mov	r4, r0
 8006ddc:	460d      	mov	r5, r1
 8006dde:	e005      	b.n	8006dec <atan+0x3c>
 8006de0:	f1bb 0f00 	cmp.w	fp, #0
 8006de4:	4cac      	ldr	r4, [pc, #688]	; (8007098 <atan+0x2e8>)
 8006de6:	f300 8121 	bgt.w	800702c <atan+0x27c>
 8006dea:	4dac      	ldr	r5, [pc, #688]	; (800709c <atan+0x2ec>)
 8006dec:	4620      	mov	r0, r4
 8006dee:	4629      	mov	r1, r5
 8006df0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df4:	4baa      	ldr	r3, [pc, #680]	; (80070a0 <atan+0x2f0>)
 8006df6:	429e      	cmp	r6, r3
 8006df8:	dc11      	bgt.n	8006e1e <atan+0x6e>
 8006dfa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006dfe:	429e      	cmp	r6, r3
 8006e00:	dc0a      	bgt.n	8006e18 <atan+0x68>
 8006e02:	a38b      	add	r3, pc, #556	; (adr r3, 8007030 <atan+0x280>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f7f9 f9b0 	bl	800016c <__adddf3>
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4ba5      	ldr	r3, [pc, #660]	; (80070a4 <atan+0x2f4>)
 8006e10:	f7f9 fdf2 	bl	80009f8 <__aeabi_dcmpgt>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d1e9      	bne.n	8006dec <atan+0x3c>
 8006e18:	f04f 3aff 	mov.w	sl, #4294967295
 8006e1c:	e027      	b.n	8006e6e <atan+0xbe>
 8006e1e:	f000 f951 	bl	80070c4 <fabs>
 8006e22:	4ba1      	ldr	r3, [pc, #644]	; (80070a8 <atan+0x2f8>)
 8006e24:	4604      	mov	r4, r0
 8006e26:	429e      	cmp	r6, r3
 8006e28:	460d      	mov	r5, r1
 8006e2a:	f300 80b8 	bgt.w	8006f9e <atan+0x1ee>
 8006e2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006e32:	429e      	cmp	r6, r3
 8006e34:	f300 809c 	bgt.w	8006f70 <atan+0x1c0>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	f7f9 f996 	bl	800016c <__adddf3>
 8006e40:	2200      	movs	r2, #0
 8006e42:	4b98      	ldr	r3, [pc, #608]	; (80070a4 <atan+0x2f4>)
 8006e44:	f7f9 f990 	bl	8000168 <__aeabi_dsub>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	460f      	mov	r7, r1
 8006e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e52:	4620      	mov	r0, r4
 8006e54:	4629      	mov	r1, r5
 8006e56:	f7f9 f989 	bl	800016c <__adddf3>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4630      	mov	r0, r6
 8006e60:	4639      	mov	r1, r7
 8006e62:	f7f9 fc63 	bl	800072c <__aeabi_ddiv>
 8006e66:	f04f 0a00 	mov.w	sl, #0
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	460d      	mov	r5, r1
 8006e6e:	4622      	mov	r2, r4
 8006e70:	462b      	mov	r3, r5
 8006e72:	4620      	mov	r0, r4
 8006e74:	4629      	mov	r1, r5
 8006e76:	f7f9 fb2f 	bl	80004d8 <__aeabi_dmul>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4680      	mov	r8, r0
 8006e80:	4689      	mov	r9, r1
 8006e82:	f7f9 fb29 	bl	80004d8 <__aeabi_dmul>
 8006e86:	a36c      	add	r3, pc, #432	; (adr r3, 8007038 <atan+0x288>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	460f      	mov	r7, r1
 8006e90:	f7f9 fb22 	bl	80004d8 <__aeabi_dmul>
 8006e94:	a36a      	add	r3, pc, #424	; (adr r3, 8007040 <atan+0x290>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f7f9 f967 	bl	800016c <__adddf3>
 8006e9e:	4632      	mov	r2, r6
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	f7f9 fb19 	bl	80004d8 <__aeabi_dmul>
 8006ea6:	a368      	add	r3, pc, #416	; (adr r3, 8007048 <atan+0x298>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	f7f9 f95e 	bl	800016c <__adddf3>
 8006eb0:	4632      	mov	r2, r6
 8006eb2:	463b      	mov	r3, r7
 8006eb4:	f7f9 fb10 	bl	80004d8 <__aeabi_dmul>
 8006eb8:	a365      	add	r3, pc, #404	; (adr r3, 8007050 <atan+0x2a0>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f7f9 f955 	bl	800016c <__adddf3>
 8006ec2:	4632      	mov	r2, r6
 8006ec4:	463b      	mov	r3, r7
 8006ec6:	f7f9 fb07 	bl	80004d8 <__aeabi_dmul>
 8006eca:	a363      	add	r3, pc, #396	; (adr r3, 8007058 <atan+0x2a8>)
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	f7f9 f94c 	bl	800016c <__adddf3>
 8006ed4:	4632      	mov	r2, r6
 8006ed6:	463b      	mov	r3, r7
 8006ed8:	f7f9 fafe 	bl	80004d8 <__aeabi_dmul>
 8006edc:	a360      	add	r3, pc, #384	; (adr r3, 8007060 <atan+0x2b0>)
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f7f9 f943 	bl	800016c <__adddf3>
 8006ee6:	4642      	mov	r2, r8
 8006ee8:	464b      	mov	r3, r9
 8006eea:	f7f9 faf5 	bl	80004d8 <__aeabi_dmul>
 8006eee:	a35e      	add	r3, pc, #376	; (adr r3, 8007068 <atan+0x2b8>)
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	4680      	mov	r8, r0
 8006ef6:	4689      	mov	r9, r1
 8006ef8:	4630      	mov	r0, r6
 8006efa:	4639      	mov	r1, r7
 8006efc:	f7f9 faec 	bl	80004d8 <__aeabi_dmul>
 8006f00:	a35b      	add	r3, pc, #364	; (adr r3, 8007070 <atan+0x2c0>)
 8006f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f06:	f7f9 f92f 	bl	8000168 <__aeabi_dsub>
 8006f0a:	4632      	mov	r2, r6
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	f7f9 fae3 	bl	80004d8 <__aeabi_dmul>
 8006f12:	a359      	add	r3, pc, #356	; (adr r3, 8007078 <atan+0x2c8>)
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	f7f9 f926 	bl	8000168 <__aeabi_dsub>
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	463b      	mov	r3, r7
 8006f20:	f7f9 fada 	bl	80004d8 <__aeabi_dmul>
 8006f24:	a356      	add	r3, pc, #344	; (adr r3, 8007080 <atan+0x2d0>)
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	f7f9 f91d 	bl	8000168 <__aeabi_dsub>
 8006f2e:	4632      	mov	r2, r6
 8006f30:	463b      	mov	r3, r7
 8006f32:	f7f9 fad1 	bl	80004d8 <__aeabi_dmul>
 8006f36:	a354      	add	r3, pc, #336	; (adr r3, 8007088 <atan+0x2d8>)
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f7f9 f914 	bl	8000168 <__aeabi_dsub>
 8006f40:	4632      	mov	r2, r6
 8006f42:	463b      	mov	r3, r7
 8006f44:	f7f9 fac8 	bl	80004d8 <__aeabi_dmul>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	f7f9 f90c 	bl	800016c <__adddf3>
 8006f54:	4622      	mov	r2, r4
 8006f56:	462b      	mov	r3, r5
 8006f58:	f7f9 fabe 	bl	80004d8 <__aeabi_dmul>
 8006f5c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	d144      	bne.n	8006ff0 <atan+0x240>
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f7f9 f8fd 	bl	8000168 <__aeabi_dsub>
 8006f6e:	e734      	b.n	8006dda <atan+0x2a>
 8006f70:	2200      	movs	r2, #0
 8006f72:	4b4c      	ldr	r3, [pc, #304]	; (80070a4 <atan+0x2f4>)
 8006f74:	f7f9 f8f8 	bl	8000168 <__aeabi_dsub>
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	460f      	mov	r7, r1
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	4b48      	ldr	r3, [pc, #288]	; (80070a4 <atan+0x2f4>)
 8006f84:	f7f9 f8f2 	bl	800016c <__adddf3>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	4639      	mov	r1, r7
 8006f90:	f7f9 fbcc 	bl	800072c <__aeabi_ddiv>
 8006f94:	f04f 0a01 	mov.w	sl, #1
 8006f98:	4604      	mov	r4, r0
 8006f9a:	460d      	mov	r5, r1
 8006f9c:	e767      	b.n	8006e6e <atan+0xbe>
 8006f9e:	4b43      	ldr	r3, [pc, #268]	; (80070ac <atan+0x2fc>)
 8006fa0:	429e      	cmp	r6, r3
 8006fa2:	da1a      	bge.n	8006fda <atan+0x22a>
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4b42      	ldr	r3, [pc, #264]	; (80070b0 <atan+0x300>)
 8006fa8:	f7f9 f8de 	bl	8000168 <__aeabi_dsub>
 8006fac:	2200      	movs	r2, #0
 8006fae:	4606      	mov	r6, r0
 8006fb0:	460f      	mov	r7, r1
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4b3e      	ldr	r3, [pc, #248]	; (80070b0 <atan+0x300>)
 8006fb8:	f7f9 fa8e 	bl	80004d8 <__aeabi_dmul>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4b39      	ldr	r3, [pc, #228]	; (80070a4 <atan+0x2f4>)
 8006fc0:	f7f9 f8d4 	bl	800016c <__adddf3>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 fbae 	bl	800072c <__aeabi_ddiv>
 8006fd0:	f04f 0a02 	mov.w	sl, #2
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	e749      	b.n	8006e6e <atan+0xbe>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	2000      	movs	r0, #0
 8006fe0:	4934      	ldr	r1, [pc, #208]	; (80070b4 <atan+0x304>)
 8006fe2:	f7f9 fba3 	bl	800072c <__aeabi_ddiv>
 8006fe6:	f04f 0a03 	mov.w	sl, #3
 8006fea:	4604      	mov	r4, r0
 8006fec:	460d      	mov	r5, r1
 8006fee:	e73e      	b.n	8006e6e <atan+0xbe>
 8006ff0:	4b31      	ldr	r3, [pc, #196]	; (80070b8 <atan+0x308>)
 8006ff2:	4e32      	ldr	r6, [pc, #200]	; (80070bc <atan+0x30c>)
 8006ff4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	f7f9 f8b4 	bl	8000168 <__aeabi_dsub>
 8007000:	4622      	mov	r2, r4
 8007002:	462b      	mov	r3, r5
 8007004:	f7f9 f8b0 	bl	8000168 <__aeabi_dsub>
 8007008:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007014:	f7f9 f8a8 	bl	8000168 <__aeabi_dsub>
 8007018:	f1bb 0f00 	cmp.w	fp, #0
 800701c:	4604      	mov	r4, r0
 800701e:	460d      	mov	r5, r1
 8007020:	f6bf aee4 	bge.w	8006dec <atan+0x3c>
 8007024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007028:	461d      	mov	r5, r3
 800702a:	e6df      	b.n	8006dec <atan+0x3c>
 800702c:	4d24      	ldr	r5, [pc, #144]	; (80070c0 <atan+0x310>)
 800702e:	e6dd      	b.n	8006dec <atan+0x3c>
 8007030:	8800759c 	.word	0x8800759c
 8007034:	7e37e43c 	.word	0x7e37e43c
 8007038:	e322da11 	.word	0xe322da11
 800703c:	3f90ad3a 	.word	0x3f90ad3a
 8007040:	24760deb 	.word	0x24760deb
 8007044:	3fa97b4b 	.word	0x3fa97b4b
 8007048:	a0d03d51 	.word	0xa0d03d51
 800704c:	3fb10d66 	.word	0x3fb10d66
 8007050:	c54c206e 	.word	0xc54c206e
 8007054:	3fb745cd 	.word	0x3fb745cd
 8007058:	920083ff 	.word	0x920083ff
 800705c:	3fc24924 	.word	0x3fc24924
 8007060:	5555550d 	.word	0x5555550d
 8007064:	3fd55555 	.word	0x3fd55555
 8007068:	2c6a6c2f 	.word	0x2c6a6c2f
 800706c:	bfa2b444 	.word	0xbfa2b444
 8007070:	52defd9a 	.word	0x52defd9a
 8007074:	3fadde2d 	.word	0x3fadde2d
 8007078:	af749a6d 	.word	0xaf749a6d
 800707c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007080:	fe231671 	.word	0xfe231671
 8007084:	3fbc71c6 	.word	0x3fbc71c6
 8007088:	9998ebc4 	.word	0x9998ebc4
 800708c:	3fc99999 	.word	0x3fc99999
 8007090:	440fffff 	.word	0x440fffff
 8007094:	7ff00000 	.word	0x7ff00000
 8007098:	54442d18 	.word	0x54442d18
 800709c:	bff921fb 	.word	0xbff921fb
 80070a0:	3fdbffff 	.word	0x3fdbffff
 80070a4:	3ff00000 	.word	0x3ff00000
 80070a8:	3ff2ffff 	.word	0x3ff2ffff
 80070ac:	40038000 	.word	0x40038000
 80070b0:	3ff80000 	.word	0x3ff80000
 80070b4:	bff00000 	.word	0xbff00000
 80070b8:	08007540 	.word	0x08007540
 80070bc:	08007520 	.word	0x08007520
 80070c0:	3ff921fb 	.word	0x3ff921fb

080070c4 <fabs>:
 80070c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80070c8:	4619      	mov	r1, r3
 80070ca:	4770      	bx	lr

080070cc <_init>:
 80070cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ce:	bf00      	nop
 80070d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d2:	bc08      	pop	{r3}
 80070d4:	469e      	mov	lr, r3
 80070d6:	4770      	bx	lr

080070d8 <_fini>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	bf00      	nop
 80070dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070de:	bc08      	pop	{r3}
 80070e0:	469e      	mov	lr, r3
 80070e2:	4770      	bx	lr
